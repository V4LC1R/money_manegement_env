
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model User
 * 
 */
export type User = $Result.DefaultSelection<Prisma.$UserPayload>
/**
 * Model Holder
 * 
 */
export type Holder = $Result.DefaultSelection<Prisma.$HolderPayload>
/**
 * Model Recurrence
 * 
 */
export type Recurrence = $Result.DefaultSelection<Prisma.$RecurrencePayload>
/**
 * Model Account
 * 
 */
export type Account = $Result.DefaultSelection<Prisma.$AccountPayload>
/**
 * Model Parcel
 * 
 */
export type Parcel = $Result.DefaultSelection<Prisma.$ParcelPayload>
/**
 * Model TransactionsForms
 * 
 */
export type TransactionsForms = $Result.DefaultSelection<Prisma.$TransactionsFormsPayload>
/**
 * Model FinancialTransaction
 * 
 */
export type FinancialTransaction = $Result.DefaultSelection<Prisma.$FinancialTransactionPayload>
/**
 * Model TransactionType
 * 
 */
export type TransactionType = $Result.DefaultSelection<Prisma.$TransactionTypePayload>
/**
 * Model AccountPlan
 * 
 */
export type AccountPlan = $Result.DefaultSelection<Prisma.$AccountPlanPayload>

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Users
 * const users = await prisma.user.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Users
   * const users = await prisma.user.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb, ExtArgs>

      /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<ExtArgs>;

  /**
   * `prisma.holder`: Exposes CRUD operations for the **Holder** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Holders
    * const holders = await prisma.holder.findMany()
    * ```
    */
  get holder(): Prisma.HolderDelegate<ExtArgs>;

  /**
   * `prisma.recurrence`: Exposes CRUD operations for the **Recurrence** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Recurrences
    * const recurrences = await prisma.recurrence.findMany()
    * ```
    */
  get recurrence(): Prisma.RecurrenceDelegate<ExtArgs>;

  /**
   * `prisma.account`: Exposes CRUD operations for the **Account** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Accounts
    * const accounts = await prisma.account.findMany()
    * ```
    */
  get account(): Prisma.AccountDelegate<ExtArgs>;

  /**
   * `prisma.parcel`: Exposes CRUD operations for the **Parcel** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Parcels
    * const parcels = await prisma.parcel.findMany()
    * ```
    */
  get parcel(): Prisma.ParcelDelegate<ExtArgs>;

  /**
   * `prisma.transactionsForms`: Exposes CRUD operations for the **TransactionsForms** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more TransactionsForms
    * const transactionsForms = await prisma.transactionsForms.findMany()
    * ```
    */
  get transactionsForms(): Prisma.TransactionsFormsDelegate<ExtArgs>;

  /**
   * `prisma.financialTransaction`: Exposes CRUD operations for the **FinancialTransaction** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more FinancialTransactions
    * const financialTransactions = await prisma.financialTransaction.findMany()
    * ```
    */
  get financialTransaction(): Prisma.FinancialTransactionDelegate<ExtArgs>;

  /**
   * `prisma.transactionType`: Exposes CRUD operations for the **TransactionType** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more TransactionTypes
    * const transactionTypes = await prisma.transactionType.findMany()
    * ```
    */
  get transactionType(): Prisma.TransactionTypeDelegate<ExtArgs>;

  /**
   * `prisma.accountPlan`: Exposes CRUD operations for the **AccountPlan** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more AccountPlans
    * const accountPlans = await prisma.accountPlan.findMany()
    * ```
    */
  get accountPlan(): Prisma.AccountPlanDelegate<ExtArgs>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 6.1.0
   * Query Engine version: 11f085a2012c0f4778414c8db2651556ee0ef959
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    User: 'User',
    Holder: 'Holder',
    Recurrence: 'Recurrence',
    Account: 'Account',
    Parcel: 'Parcel',
    TransactionsForms: 'TransactionsForms',
    FinancialTransaction: 'FinancialTransaction',
    TransactionType: 'TransactionType',
    AccountPlan: 'AccountPlan'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.InternalArgs, clientOptions: PrismaClientOptions }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], this['params']['clientOptions']>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> = {
    meta: {
      modelProps: "user" | "holder" | "recurrence" | "account" | "parcel" | "transactionsForms" | "financialTransaction" | "transactionType" | "accountPlan"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      User: {
        payload: Prisma.$UserPayload<ExtArgs>
        fields: Prisma.UserFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findFirst: {
            args: Prisma.UserFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findMany: {
            args: Prisma.UserFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          create: {
            args: Prisma.UserCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          createMany: {
            args: Prisma.UserCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.UserCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          delete: {
            args: Prisma.UserDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          update: {
            args: Prisma.UserUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          deleteMany: {
            args: Prisma.UserDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.UserUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          aggregate: {
            args: Prisma.UserAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUser>
          }
          groupBy: {
            args: Prisma.UserGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserCountArgs<ExtArgs>
            result: $Utils.Optional<UserCountAggregateOutputType> | number
          }
        }
      }
      Holder: {
        payload: Prisma.$HolderPayload<ExtArgs>
        fields: Prisma.HolderFieldRefs
        operations: {
          findUnique: {
            args: Prisma.HolderFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HolderPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.HolderFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HolderPayload>
          }
          findFirst: {
            args: Prisma.HolderFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HolderPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.HolderFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HolderPayload>
          }
          findMany: {
            args: Prisma.HolderFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HolderPayload>[]
          }
          create: {
            args: Prisma.HolderCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HolderPayload>
          }
          createMany: {
            args: Prisma.HolderCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.HolderCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HolderPayload>[]
          }
          delete: {
            args: Prisma.HolderDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HolderPayload>
          }
          update: {
            args: Prisma.HolderUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HolderPayload>
          }
          deleteMany: {
            args: Prisma.HolderDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.HolderUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.HolderUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HolderPayload>
          }
          aggregate: {
            args: Prisma.HolderAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateHolder>
          }
          groupBy: {
            args: Prisma.HolderGroupByArgs<ExtArgs>
            result: $Utils.Optional<HolderGroupByOutputType>[]
          }
          count: {
            args: Prisma.HolderCountArgs<ExtArgs>
            result: $Utils.Optional<HolderCountAggregateOutputType> | number
          }
        }
      }
      Recurrence: {
        payload: Prisma.$RecurrencePayload<ExtArgs>
        fields: Prisma.RecurrenceFieldRefs
        operations: {
          findUnique: {
            args: Prisma.RecurrenceFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RecurrencePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.RecurrenceFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RecurrencePayload>
          }
          findFirst: {
            args: Prisma.RecurrenceFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RecurrencePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.RecurrenceFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RecurrencePayload>
          }
          findMany: {
            args: Prisma.RecurrenceFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RecurrencePayload>[]
          }
          create: {
            args: Prisma.RecurrenceCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RecurrencePayload>
          }
          createMany: {
            args: Prisma.RecurrenceCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.RecurrenceCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RecurrencePayload>[]
          }
          delete: {
            args: Prisma.RecurrenceDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RecurrencePayload>
          }
          update: {
            args: Prisma.RecurrenceUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RecurrencePayload>
          }
          deleteMany: {
            args: Prisma.RecurrenceDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.RecurrenceUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.RecurrenceUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RecurrencePayload>
          }
          aggregate: {
            args: Prisma.RecurrenceAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateRecurrence>
          }
          groupBy: {
            args: Prisma.RecurrenceGroupByArgs<ExtArgs>
            result: $Utils.Optional<RecurrenceGroupByOutputType>[]
          }
          count: {
            args: Prisma.RecurrenceCountArgs<ExtArgs>
            result: $Utils.Optional<RecurrenceCountAggregateOutputType> | number
          }
        }
      }
      Account: {
        payload: Prisma.$AccountPayload<ExtArgs>
        fields: Prisma.AccountFieldRefs
        operations: {
          findUnique: {
            args: Prisma.AccountFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.AccountFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountPayload>
          }
          findFirst: {
            args: Prisma.AccountFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.AccountFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountPayload>
          }
          findMany: {
            args: Prisma.AccountFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountPayload>[]
          }
          create: {
            args: Prisma.AccountCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountPayload>
          }
          createMany: {
            args: Prisma.AccountCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.AccountCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountPayload>[]
          }
          delete: {
            args: Prisma.AccountDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountPayload>
          }
          update: {
            args: Prisma.AccountUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountPayload>
          }
          deleteMany: {
            args: Prisma.AccountDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.AccountUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.AccountUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountPayload>
          }
          aggregate: {
            args: Prisma.AccountAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateAccount>
          }
          groupBy: {
            args: Prisma.AccountGroupByArgs<ExtArgs>
            result: $Utils.Optional<AccountGroupByOutputType>[]
          }
          count: {
            args: Prisma.AccountCountArgs<ExtArgs>
            result: $Utils.Optional<AccountCountAggregateOutputType> | number
          }
        }
      }
      Parcel: {
        payload: Prisma.$ParcelPayload<ExtArgs>
        fields: Prisma.ParcelFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ParcelFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ParcelPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ParcelFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ParcelPayload>
          }
          findFirst: {
            args: Prisma.ParcelFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ParcelPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ParcelFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ParcelPayload>
          }
          findMany: {
            args: Prisma.ParcelFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ParcelPayload>[]
          }
          create: {
            args: Prisma.ParcelCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ParcelPayload>
          }
          createMany: {
            args: Prisma.ParcelCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ParcelCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ParcelPayload>[]
          }
          delete: {
            args: Prisma.ParcelDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ParcelPayload>
          }
          update: {
            args: Prisma.ParcelUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ParcelPayload>
          }
          deleteMany: {
            args: Prisma.ParcelDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ParcelUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.ParcelUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ParcelPayload>
          }
          aggregate: {
            args: Prisma.ParcelAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateParcel>
          }
          groupBy: {
            args: Prisma.ParcelGroupByArgs<ExtArgs>
            result: $Utils.Optional<ParcelGroupByOutputType>[]
          }
          count: {
            args: Prisma.ParcelCountArgs<ExtArgs>
            result: $Utils.Optional<ParcelCountAggregateOutputType> | number
          }
        }
      }
      TransactionsForms: {
        payload: Prisma.$TransactionsFormsPayload<ExtArgs>
        fields: Prisma.TransactionsFormsFieldRefs
        operations: {
          findUnique: {
            args: Prisma.TransactionsFormsFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TransactionsFormsPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.TransactionsFormsFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TransactionsFormsPayload>
          }
          findFirst: {
            args: Prisma.TransactionsFormsFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TransactionsFormsPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.TransactionsFormsFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TransactionsFormsPayload>
          }
          findMany: {
            args: Prisma.TransactionsFormsFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TransactionsFormsPayload>[]
          }
          create: {
            args: Prisma.TransactionsFormsCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TransactionsFormsPayload>
          }
          createMany: {
            args: Prisma.TransactionsFormsCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.TransactionsFormsCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TransactionsFormsPayload>[]
          }
          delete: {
            args: Prisma.TransactionsFormsDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TransactionsFormsPayload>
          }
          update: {
            args: Prisma.TransactionsFormsUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TransactionsFormsPayload>
          }
          deleteMany: {
            args: Prisma.TransactionsFormsDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.TransactionsFormsUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.TransactionsFormsUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TransactionsFormsPayload>
          }
          aggregate: {
            args: Prisma.TransactionsFormsAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateTransactionsForms>
          }
          groupBy: {
            args: Prisma.TransactionsFormsGroupByArgs<ExtArgs>
            result: $Utils.Optional<TransactionsFormsGroupByOutputType>[]
          }
          count: {
            args: Prisma.TransactionsFormsCountArgs<ExtArgs>
            result: $Utils.Optional<TransactionsFormsCountAggregateOutputType> | number
          }
        }
      }
      FinancialTransaction: {
        payload: Prisma.$FinancialTransactionPayload<ExtArgs>
        fields: Prisma.FinancialTransactionFieldRefs
        operations: {
          findUnique: {
            args: Prisma.FinancialTransactionFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FinancialTransactionPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.FinancialTransactionFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FinancialTransactionPayload>
          }
          findFirst: {
            args: Prisma.FinancialTransactionFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FinancialTransactionPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.FinancialTransactionFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FinancialTransactionPayload>
          }
          findMany: {
            args: Prisma.FinancialTransactionFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FinancialTransactionPayload>[]
          }
          create: {
            args: Prisma.FinancialTransactionCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FinancialTransactionPayload>
          }
          createMany: {
            args: Prisma.FinancialTransactionCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.FinancialTransactionCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FinancialTransactionPayload>[]
          }
          delete: {
            args: Prisma.FinancialTransactionDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FinancialTransactionPayload>
          }
          update: {
            args: Prisma.FinancialTransactionUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FinancialTransactionPayload>
          }
          deleteMany: {
            args: Prisma.FinancialTransactionDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.FinancialTransactionUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.FinancialTransactionUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FinancialTransactionPayload>
          }
          aggregate: {
            args: Prisma.FinancialTransactionAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateFinancialTransaction>
          }
          groupBy: {
            args: Prisma.FinancialTransactionGroupByArgs<ExtArgs>
            result: $Utils.Optional<FinancialTransactionGroupByOutputType>[]
          }
          count: {
            args: Prisma.FinancialTransactionCountArgs<ExtArgs>
            result: $Utils.Optional<FinancialTransactionCountAggregateOutputType> | number
          }
        }
      }
      TransactionType: {
        payload: Prisma.$TransactionTypePayload<ExtArgs>
        fields: Prisma.TransactionTypeFieldRefs
        operations: {
          findUnique: {
            args: Prisma.TransactionTypeFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TransactionTypePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.TransactionTypeFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TransactionTypePayload>
          }
          findFirst: {
            args: Prisma.TransactionTypeFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TransactionTypePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.TransactionTypeFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TransactionTypePayload>
          }
          findMany: {
            args: Prisma.TransactionTypeFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TransactionTypePayload>[]
          }
          create: {
            args: Prisma.TransactionTypeCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TransactionTypePayload>
          }
          createMany: {
            args: Prisma.TransactionTypeCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.TransactionTypeCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TransactionTypePayload>[]
          }
          delete: {
            args: Prisma.TransactionTypeDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TransactionTypePayload>
          }
          update: {
            args: Prisma.TransactionTypeUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TransactionTypePayload>
          }
          deleteMany: {
            args: Prisma.TransactionTypeDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.TransactionTypeUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.TransactionTypeUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TransactionTypePayload>
          }
          aggregate: {
            args: Prisma.TransactionTypeAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateTransactionType>
          }
          groupBy: {
            args: Prisma.TransactionTypeGroupByArgs<ExtArgs>
            result: $Utils.Optional<TransactionTypeGroupByOutputType>[]
          }
          count: {
            args: Prisma.TransactionTypeCountArgs<ExtArgs>
            result: $Utils.Optional<TransactionTypeCountAggregateOutputType> | number
          }
        }
      }
      AccountPlan: {
        payload: Prisma.$AccountPlanPayload<ExtArgs>
        fields: Prisma.AccountPlanFieldRefs
        operations: {
          findUnique: {
            args: Prisma.AccountPlanFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountPlanPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.AccountPlanFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountPlanPayload>
          }
          findFirst: {
            args: Prisma.AccountPlanFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountPlanPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.AccountPlanFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountPlanPayload>
          }
          findMany: {
            args: Prisma.AccountPlanFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountPlanPayload>[]
          }
          create: {
            args: Prisma.AccountPlanCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountPlanPayload>
          }
          createMany: {
            args: Prisma.AccountPlanCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.AccountPlanCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountPlanPayload>[]
          }
          delete: {
            args: Prisma.AccountPlanDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountPlanPayload>
          }
          update: {
            args: Prisma.AccountPlanUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountPlanPayload>
          }
          deleteMany: {
            args: Prisma.AccountPlanDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.AccountPlanUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.AccountPlanUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountPlanPayload>
          }
          aggregate: {
            args: Prisma.AccountPlanAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateAccountPlan>
          }
          groupBy: {
            args: Prisma.AccountPlanGroupByArgs<ExtArgs>
            result: $Utils.Optional<AccountPlanGroupByOutputType>[]
          }
          count: {
            args: Prisma.AccountPlanCountArgs<ExtArgs>
            result: $Utils.Optional<AccountPlanCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
  }


  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type UserCountOutputType
   */

  export type UserCountOutputType = {
    holders: number
    accounts: number
    transactionsFinancials: number
  }

  export type UserCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    holders?: boolean | UserCountOutputTypeCountHoldersArgs
    accounts?: boolean | UserCountOutputTypeCountAccountsArgs
    transactionsFinancials?: boolean | UserCountOutputTypeCountTransactionsFinancialsArgs
  }

  // Custom InputTypes
  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCountOutputType
     */
    select?: UserCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountHoldersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: HolderWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountAccountsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AccountWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountTransactionsFinancialsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: FinancialTransactionWhereInput
  }


  /**
   * Count Type HolderCountOutputType
   */

  export type HolderCountOutputType = {
    transactionsForms: number
  }

  export type HolderCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    transactionsForms?: boolean | HolderCountOutputTypeCountTransactionsFormsArgs
  }

  // Custom InputTypes
  /**
   * HolderCountOutputType without action
   */
  export type HolderCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HolderCountOutputType
     */
    select?: HolderCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * HolderCountOutputType without action
   */
  export type HolderCountOutputTypeCountTransactionsFormsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TransactionsFormsWhereInput
  }


  /**
   * Count Type AccountCountOutputType
   */

  export type AccountCountOutputType = {
    parcels: number
    financialTransactions: number
  }

  export type AccountCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    parcels?: boolean | AccountCountOutputTypeCountParcelsArgs
    financialTransactions?: boolean | AccountCountOutputTypeCountFinancialTransactionsArgs
  }

  // Custom InputTypes
  /**
   * AccountCountOutputType without action
   */
  export type AccountCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AccountCountOutputType
     */
    select?: AccountCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * AccountCountOutputType without action
   */
  export type AccountCountOutputTypeCountParcelsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ParcelWhereInput
  }

  /**
   * AccountCountOutputType without action
   */
  export type AccountCountOutputTypeCountFinancialTransactionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: FinancialTransactionWhereInput
  }


  /**
   * Count Type ParcelCountOutputType
   */

  export type ParcelCountOutputType = {
    FinancialTransactions: number
  }

  export type ParcelCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    FinancialTransactions?: boolean | ParcelCountOutputTypeCountFinancialTransactionsArgs
  }

  // Custom InputTypes
  /**
   * ParcelCountOutputType without action
   */
  export type ParcelCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ParcelCountOutputType
     */
    select?: ParcelCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * ParcelCountOutputType without action
   */
  export type ParcelCountOutputTypeCountFinancialTransactionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: FinancialTransactionWhereInput
  }


  /**
   * Count Type TransactionsFormsCountOutputType
   */

  export type TransactionsFormsCountOutputType = {
    FinancialTransactions: number
  }

  export type TransactionsFormsCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    FinancialTransactions?: boolean | TransactionsFormsCountOutputTypeCountFinancialTransactionsArgs
  }

  // Custom InputTypes
  /**
   * TransactionsFormsCountOutputType without action
   */
  export type TransactionsFormsCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TransactionsFormsCountOutputType
     */
    select?: TransactionsFormsCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * TransactionsFormsCountOutputType without action
   */
  export type TransactionsFormsCountOutputTypeCountFinancialTransactionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: FinancialTransactionWhereInput
  }


  /**
   * Count Type TransactionTypeCountOutputType
   */

  export type TransactionTypeCountOutputType = {
    financialTransactions: number
  }

  export type TransactionTypeCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    financialTransactions?: boolean | TransactionTypeCountOutputTypeCountFinancialTransactionsArgs
  }

  // Custom InputTypes
  /**
   * TransactionTypeCountOutputType without action
   */
  export type TransactionTypeCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TransactionTypeCountOutputType
     */
    select?: TransactionTypeCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * TransactionTypeCountOutputType without action
   */
  export type TransactionTypeCountOutputTypeCountFinancialTransactionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: FinancialTransactionWhereInput
  }


  /**
   * Count Type AccountPlanCountOutputType
   */

  export type AccountPlanCountOutputType = {
    recurrences: number
    accounts: number
    parcels: number
    financialTransactions: number
  }

  export type AccountPlanCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    recurrences?: boolean | AccountPlanCountOutputTypeCountRecurrencesArgs
    accounts?: boolean | AccountPlanCountOutputTypeCountAccountsArgs
    parcels?: boolean | AccountPlanCountOutputTypeCountParcelsArgs
    financialTransactions?: boolean | AccountPlanCountOutputTypeCountFinancialTransactionsArgs
  }

  // Custom InputTypes
  /**
   * AccountPlanCountOutputType without action
   */
  export type AccountPlanCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AccountPlanCountOutputType
     */
    select?: AccountPlanCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * AccountPlanCountOutputType without action
   */
  export type AccountPlanCountOutputTypeCountRecurrencesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RecurrenceWhereInput
  }

  /**
   * AccountPlanCountOutputType without action
   */
  export type AccountPlanCountOutputTypeCountAccountsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AccountWhereInput
  }

  /**
   * AccountPlanCountOutputType without action
   */
  export type AccountPlanCountOutputTypeCountParcelsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ParcelWhereInput
  }

  /**
   * AccountPlanCountOutputType without action
   */
  export type AccountPlanCountOutputTypeCountFinancialTransactionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: FinancialTransactionWhereInput
  }


  /**
   * Models
   */

  /**
   * Model User
   */

  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserAvgAggregateOutputType = {
    id: number | null
  }

  export type UserSumAggregateOutputType = {
    id: number | null
  }

  export type UserMinAggregateOutputType = {
    id: number | null
    email: string | null
    name: string | null
    password: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type UserMaxAggregateOutputType = {
    id: number | null
    email: string | null
    name: string | null
    password: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    email: number
    name: number
    password: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type UserAvgAggregateInputType = {
    id?: true
  }

  export type UserSumAggregateInputType = {
    id?: true
  }

  export type UserMinAggregateInputType = {
    id?: true
    email?: true
    name?: true
    password?: true
    createdAt?: true
    updatedAt?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    email?: true
    name?: true
    password?: true
    createdAt?: true
    updatedAt?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    email?: true
    name?: true
    password?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type UserAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which User to aggregate.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UserAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UserSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
    orderBy?: UserOrderByWithAggregationInput | UserOrderByWithAggregationInput[]
    by: UserScalarFieldEnum[] | UserScalarFieldEnum
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _avg?: UserAvgAggregateInputType
    _sum?: UserSumAggregateInputType
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }

  export type UserGroupByOutputType = {
    id: number
    email: string
    name: string
    password: string
    createdAt: Date
    updatedAt: Date
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    name?: boolean
    password?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    holders?: boolean | User$holdersArgs<ExtArgs>
    accounts?: boolean | User$accountsArgs<ExtArgs>
    transactionsFinancials?: boolean | User$transactionsFinancialsArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>

  export type UserSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    name?: boolean
    password?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["user"]>

  export type UserSelectScalar = {
    id?: boolean
    email?: boolean
    name?: boolean
    password?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type UserInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    holders?: boolean | User$holdersArgs<ExtArgs>
    accounts?: boolean | User$accountsArgs<ExtArgs>
    transactionsFinancials?: boolean | User$transactionsFinancialsArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type UserIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $UserPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "User"
    objects: {
      holders: Prisma.$HolderPayload<ExtArgs>[]
      accounts: Prisma.$AccountPayload<ExtArgs>[]
      transactionsFinancials: Prisma.$FinancialTransactionPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      email: string
      name: string
      password: string
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["user"]>
    composites: {}
  }

  type UserGetPayload<S extends boolean | null | undefined | UserDefaultArgs> = $Result.GetResult<Prisma.$UserPayload, S>

  type UserCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<UserFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: UserCountAggregateInputType | true
    }

  export interface UserDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['User'], meta: { name: 'User' } }
    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserFindUniqueArgs>(args: SelectSubset<T, UserFindUniqueArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one User that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {UserFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserFindUniqueOrThrowArgs>(args: SelectSubset<T, UserFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserFindFirstArgs>(args?: SelectSubset<T, UserFindFirstArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first User that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserFindFirstOrThrowArgs>(args?: SelectSubset<T, UserFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UserFindManyArgs>(args?: SelectSubset<T, UserFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
     */
    create<T extends UserCreateArgs>(args: SelectSubset<T, UserCreateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Users.
     * @param {UserCreateManyArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserCreateManyArgs>(args?: SelectSubset<T, UserCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Users and returns the data saved in the database.
     * @param {UserCreateManyAndReturnArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Users and only return the `id`
     * const userWithIdOnly = await prisma.user.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends UserCreateManyAndReturnArgs>(args?: SelectSubset<T, UserCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
     */
    delete<T extends UserDeleteArgs>(args: SelectSubset<T, UserDeleteArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserUpdateArgs>(args: SelectSubset<T, UserUpdateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserDeleteManyArgs>(args?: SelectSubset<T, UserDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserUpdateManyArgs>(args: SelectSubset<T, UserUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
     */
    upsert<T extends UserUpsertArgs>(args: SelectSubset<T, UserUpsertArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): Prisma.PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the User model
   */
  readonly fields: UserFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    holders<T extends User$holdersArgs<ExtArgs> = {}>(args?: Subset<T, User$holdersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$HolderPayload<ExtArgs>, T, "findMany"> | Null>
    accounts<T extends User$accountsArgs<ExtArgs> = {}>(args?: Subset<T, User$accountsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "findMany"> | Null>
    transactionsFinancials<T extends User$transactionsFinancialsArgs<ExtArgs> = {}>(args?: Subset<T, User$transactionsFinancialsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FinancialTransactionPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the User model
   */ 
  interface UserFieldRefs {
    readonly id: FieldRef<"User", 'Int'>
    readonly email: FieldRef<"User", 'String'>
    readonly name: FieldRef<"User", 'String'>
    readonly password: FieldRef<"User", 'String'>
    readonly createdAt: FieldRef<"User", 'DateTime'>
    readonly updatedAt: FieldRef<"User", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * User findUnique
   */
  export type UserFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findUniqueOrThrow
   */
  export type UserFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findFirst
   */
  export type UserFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findFirstOrThrow
   */
  export type UserFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findMany
   */
  export type UserFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User create
   */
  export type UserCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to create a User.
     */
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }

  /**
   * User createMany
   */
  export type UserCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * User createManyAndReturn
   */
  export type UserCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * User update
   */
  export type UserUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to update a User.
     */
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User updateMany
   */
  export type UserUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
  }

  /**
   * User upsert
   */
  export type UserUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The filter to search for the User to update in case it exists.
     */
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     */
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }

  /**
   * User delete
   */
  export type UserDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter which User to delete.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Users to delete
     */
    where?: UserWhereInput
  }

  /**
   * User.holders
   */
  export type User$holdersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Holder
     */
    select?: HolderSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HolderInclude<ExtArgs> | null
    where?: HolderWhereInput
    orderBy?: HolderOrderByWithRelationInput | HolderOrderByWithRelationInput[]
    cursor?: HolderWhereUniqueInput
    take?: number
    skip?: number
    distinct?: HolderScalarFieldEnum | HolderScalarFieldEnum[]
  }

  /**
   * User.accounts
   */
  export type User$accountsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountInclude<ExtArgs> | null
    where?: AccountWhereInput
    orderBy?: AccountOrderByWithRelationInput | AccountOrderByWithRelationInput[]
    cursor?: AccountWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AccountScalarFieldEnum | AccountScalarFieldEnum[]
  }

  /**
   * User.transactionsFinancials
   */
  export type User$transactionsFinancialsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FinancialTransaction
     */
    select?: FinancialTransactionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FinancialTransactionInclude<ExtArgs> | null
    where?: FinancialTransactionWhereInput
    orderBy?: FinancialTransactionOrderByWithRelationInput | FinancialTransactionOrderByWithRelationInput[]
    cursor?: FinancialTransactionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: FinancialTransactionScalarFieldEnum | FinancialTransactionScalarFieldEnum[]
  }

  /**
   * User without action
   */
  export type UserDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
  }


  /**
   * Model Holder
   */

  export type AggregateHolder = {
    _count: HolderCountAggregateOutputType | null
    _avg: HolderAvgAggregateOutputType | null
    _sum: HolderSumAggregateOutputType | null
    _min: HolderMinAggregateOutputType | null
    _max: HolderMaxAggregateOutputType | null
  }

  export type HolderAvgAggregateOutputType = {
    id: number | null
    value: number | null
    ownerId: number | null
  }

  export type HolderSumAggregateOutputType = {
    id: number | null
    value: number | null
    ownerId: number | null
  }

  export type HolderMinAggregateOutputType = {
    id: number | null
    name: string | null
    value: number | null
    ownerId: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type HolderMaxAggregateOutputType = {
    id: number | null
    name: string | null
    value: number | null
    ownerId: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type HolderCountAggregateOutputType = {
    id: number
    name: number
    value: number
    ownerId: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type HolderAvgAggregateInputType = {
    id?: true
    value?: true
    ownerId?: true
  }

  export type HolderSumAggregateInputType = {
    id?: true
    value?: true
    ownerId?: true
  }

  export type HolderMinAggregateInputType = {
    id?: true
    name?: true
    value?: true
    ownerId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type HolderMaxAggregateInputType = {
    id?: true
    name?: true
    value?: true
    ownerId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type HolderCountAggregateInputType = {
    id?: true
    name?: true
    value?: true
    ownerId?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type HolderAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Holder to aggregate.
     */
    where?: HolderWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Holders to fetch.
     */
    orderBy?: HolderOrderByWithRelationInput | HolderOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: HolderWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Holders from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Holders.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Holders
    **/
    _count?: true | HolderCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: HolderAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: HolderSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: HolderMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: HolderMaxAggregateInputType
  }

  export type GetHolderAggregateType<T extends HolderAggregateArgs> = {
        [P in keyof T & keyof AggregateHolder]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateHolder[P]>
      : GetScalarType<T[P], AggregateHolder[P]>
  }




  export type HolderGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: HolderWhereInput
    orderBy?: HolderOrderByWithAggregationInput | HolderOrderByWithAggregationInput[]
    by: HolderScalarFieldEnum[] | HolderScalarFieldEnum
    having?: HolderScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: HolderCountAggregateInputType | true
    _avg?: HolderAvgAggregateInputType
    _sum?: HolderSumAggregateInputType
    _min?: HolderMinAggregateInputType
    _max?: HolderMaxAggregateInputType
  }

  export type HolderGroupByOutputType = {
    id: number
    name: string
    value: number
    ownerId: number
    createdAt: Date
    updatedAt: Date
    _count: HolderCountAggregateOutputType | null
    _avg: HolderAvgAggregateOutputType | null
    _sum: HolderSumAggregateOutputType | null
    _min: HolderMinAggregateOutputType | null
    _max: HolderMaxAggregateOutputType | null
  }

  type GetHolderGroupByPayload<T extends HolderGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<HolderGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof HolderGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], HolderGroupByOutputType[P]>
            : GetScalarType<T[P], HolderGroupByOutputType[P]>
        }
      >
    >


  export type HolderSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    value?: boolean
    ownerId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    owner?: boolean | UserDefaultArgs<ExtArgs>
    transactionsForms?: boolean | Holder$transactionsFormsArgs<ExtArgs>
    _count?: boolean | HolderCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["holder"]>

  export type HolderSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    value?: boolean
    ownerId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    owner?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["holder"]>

  export type HolderSelectScalar = {
    id?: boolean
    name?: boolean
    value?: boolean
    ownerId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type HolderInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    owner?: boolean | UserDefaultArgs<ExtArgs>
    transactionsForms?: boolean | Holder$transactionsFormsArgs<ExtArgs>
    _count?: boolean | HolderCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type HolderIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    owner?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $HolderPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Holder"
    objects: {
      owner: Prisma.$UserPayload<ExtArgs>
      transactionsForms: Prisma.$TransactionsFormsPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      name: string
      value: number
      ownerId: number
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["holder"]>
    composites: {}
  }

  type HolderGetPayload<S extends boolean | null | undefined | HolderDefaultArgs> = $Result.GetResult<Prisma.$HolderPayload, S>

  type HolderCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<HolderFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: HolderCountAggregateInputType | true
    }

  export interface HolderDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Holder'], meta: { name: 'Holder' } }
    /**
     * Find zero or one Holder that matches the filter.
     * @param {HolderFindUniqueArgs} args - Arguments to find a Holder
     * @example
     * // Get one Holder
     * const holder = await prisma.holder.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends HolderFindUniqueArgs>(args: SelectSubset<T, HolderFindUniqueArgs<ExtArgs>>): Prisma__HolderClient<$Result.GetResult<Prisma.$HolderPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Holder that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {HolderFindUniqueOrThrowArgs} args - Arguments to find a Holder
     * @example
     * // Get one Holder
     * const holder = await prisma.holder.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends HolderFindUniqueOrThrowArgs>(args: SelectSubset<T, HolderFindUniqueOrThrowArgs<ExtArgs>>): Prisma__HolderClient<$Result.GetResult<Prisma.$HolderPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Holder that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HolderFindFirstArgs} args - Arguments to find a Holder
     * @example
     * // Get one Holder
     * const holder = await prisma.holder.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends HolderFindFirstArgs>(args?: SelectSubset<T, HolderFindFirstArgs<ExtArgs>>): Prisma__HolderClient<$Result.GetResult<Prisma.$HolderPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Holder that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HolderFindFirstOrThrowArgs} args - Arguments to find a Holder
     * @example
     * // Get one Holder
     * const holder = await prisma.holder.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends HolderFindFirstOrThrowArgs>(args?: SelectSubset<T, HolderFindFirstOrThrowArgs<ExtArgs>>): Prisma__HolderClient<$Result.GetResult<Prisma.$HolderPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Holders that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HolderFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Holders
     * const holders = await prisma.holder.findMany()
     * 
     * // Get first 10 Holders
     * const holders = await prisma.holder.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const holderWithIdOnly = await prisma.holder.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends HolderFindManyArgs>(args?: SelectSubset<T, HolderFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$HolderPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Holder.
     * @param {HolderCreateArgs} args - Arguments to create a Holder.
     * @example
     * // Create one Holder
     * const Holder = await prisma.holder.create({
     *   data: {
     *     // ... data to create a Holder
     *   }
     * })
     * 
     */
    create<T extends HolderCreateArgs>(args: SelectSubset<T, HolderCreateArgs<ExtArgs>>): Prisma__HolderClient<$Result.GetResult<Prisma.$HolderPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Holders.
     * @param {HolderCreateManyArgs} args - Arguments to create many Holders.
     * @example
     * // Create many Holders
     * const holder = await prisma.holder.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends HolderCreateManyArgs>(args?: SelectSubset<T, HolderCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Holders and returns the data saved in the database.
     * @param {HolderCreateManyAndReturnArgs} args - Arguments to create many Holders.
     * @example
     * // Create many Holders
     * const holder = await prisma.holder.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Holders and only return the `id`
     * const holderWithIdOnly = await prisma.holder.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends HolderCreateManyAndReturnArgs>(args?: SelectSubset<T, HolderCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$HolderPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Holder.
     * @param {HolderDeleteArgs} args - Arguments to delete one Holder.
     * @example
     * // Delete one Holder
     * const Holder = await prisma.holder.delete({
     *   where: {
     *     // ... filter to delete one Holder
     *   }
     * })
     * 
     */
    delete<T extends HolderDeleteArgs>(args: SelectSubset<T, HolderDeleteArgs<ExtArgs>>): Prisma__HolderClient<$Result.GetResult<Prisma.$HolderPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Holder.
     * @param {HolderUpdateArgs} args - Arguments to update one Holder.
     * @example
     * // Update one Holder
     * const holder = await prisma.holder.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends HolderUpdateArgs>(args: SelectSubset<T, HolderUpdateArgs<ExtArgs>>): Prisma__HolderClient<$Result.GetResult<Prisma.$HolderPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Holders.
     * @param {HolderDeleteManyArgs} args - Arguments to filter Holders to delete.
     * @example
     * // Delete a few Holders
     * const { count } = await prisma.holder.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends HolderDeleteManyArgs>(args?: SelectSubset<T, HolderDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Holders.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HolderUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Holders
     * const holder = await prisma.holder.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends HolderUpdateManyArgs>(args: SelectSubset<T, HolderUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Holder.
     * @param {HolderUpsertArgs} args - Arguments to update or create a Holder.
     * @example
     * // Update or create a Holder
     * const holder = await prisma.holder.upsert({
     *   create: {
     *     // ... data to create a Holder
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Holder we want to update
     *   }
     * })
     */
    upsert<T extends HolderUpsertArgs>(args: SelectSubset<T, HolderUpsertArgs<ExtArgs>>): Prisma__HolderClient<$Result.GetResult<Prisma.$HolderPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Holders.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HolderCountArgs} args - Arguments to filter Holders to count.
     * @example
     * // Count the number of Holders
     * const count = await prisma.holder.count({
     *   where: {
     *     // ... the filter for the Holders we want to count
     *   }
     * })
    **/
    count<T extends HolderCountArgs>(
      args?: Subset<T, HolderCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], HolderCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Holder.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HolderAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends HolderAggregateArgs>(args: Subset<T, HolderAggregateArgs>): Prisma.PrismaPromise<GetHolderAggregateType<T>>

    /**
     * Group by Holder.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HolderGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends HolderGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: HolderGroupByArgs['orderBy'] }
        : { orderBy?: HolderGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, HolderGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetHolderGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Holder model
   */
  readonly fields: HolderFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Holder.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__HolderClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    owner<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    transactionsForms<T extends Holder$transactionsFormsArgs<ExtArgs> = {}>(args?: Subset<T, Holder$transactionsFormsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TransactionsFormsPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Holder model
   */ 
  interface HolderFieldRefs {
    readonly id: FieldRef<"Holder", 'Int'>
    readonly name: FieldRef<"Holder", 'String'>
    readonly value: FieldRef<"Holder", 'Float'>
    readonly ownerId: FieldRef<"Holder", 'Int'>
    readonly createdAt: FieldRef<"Holder", 'DateTime'>
    readonly updatedAt: FieldRef<"Holder", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Holder findUnique
   */
  export type HolderFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Holder
     */
    select?: HolderSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HolderInclude<ExtArgs> | null
    /**
     * Filter, which Holder to fetch.
     */
    where: HolderWhereUniqueInput
  }

  /**
   * Holder findUniqueOrThrow
   */
  export type HolderFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Holder
     */
    select?: HolderSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HolderInclude<ExtArgs> | null
    /**
     * Filter, which Holder to fetch.
     */
    where: HolderWhereUniqueInput
  }

  /**
   * Holder findFirst
   */
  export type HolderFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Holder
     */
    select?: HolderSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HolderInclude<ExtArgs> | null
    /**
     * Filter, which Holder to fetch.
     */
    where?: HolderWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Holders to fetch.
     */
    orderBy?: HolderOrderByWithRelationInput | HolderOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Holders.
     */
    cursor?: HolderWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Holders from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Holders.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Holders.
     */
    distinct?: HolderScalarFieldEnum | HolderScalarFieldEnum[]
  }

  /**
   * Holder findFirstOrThrow
   */
  export type HolderFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Holder
     */
    select?: HolderSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HolderInclude<ExtArgs> | null
    /**
     * Filter, which Holder to fetch.
     */
    where?: HolderWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Holders to fetch.
     */
    orderBy?: HolderOrderByWithRelationInput | HolderOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Holders.
     */
    cursor?: HolderWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Holders from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Holders.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Holders.
     */
    distinct?: HolderScalarFieldEnum | HolderScalarFieldEnum[]
  }

  /**
   * Holder findMany
   */
  export type HolderFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Holder
     */
    select?: HolderSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HolderInclude<ExtArgs> | null
    /**
     * Filter, which Holders to fetch.
     */
    where?: HolderWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Holders to fetch.
     */
    orderBy?: HolderOrderByWithRelationInput | HolderOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Holders.
     */
    cursor?: HolderWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Holders from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Holders.
     */
    skip?: number
    distinct?: HolderScalarFieldEnum | HolderScalarFieldEnum[]
  }

  /**
   * Holder create
   */
  export type HolderCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Holder
     */
    select?: HolderSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HolderInclude<ExtArgs> | null
    /**
     * The data needed to create a Holder.
     */
    data: XOR<HolderCreateInput, HolderUncheckedCreateInput>
  }

  /**
   * Holder createMany
   */
  export type HolderCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Holders.
     */
    data: HolderCreateManyInput | HolderCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Holder createManyAndReturn
   */
  export type HolderCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Holder
     */
    select?: HolderSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Holders.
     */
    data: HolderCreateManyInput | HolderCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HolderIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Holder update
   */
  export type HolderUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Holder
     */
    select?: HolderSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HolderInclude<ExtArgs> | null
    /**
     * The data needed to update a Holder.
     */
    data: XOR<HolderUpdateInput, HolderUncheckedUpdateInput>
    /**
     * Choose, which Holder to update.
     */
    where: HolderWhereUniqueInput
  }

  /**
   * Holder updateMany
   */
  export type HolderUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Holders.
     */
    data: XOR<HolderUpdateManyMutationInput, HolderUncheckedUpdateManyInput>
    /**
     * Filter which Holders to update
     */
    where?: HolderWhereInput
  }

  /**
   * Holder upsert
   */
  export type HolderUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Holder
     */
    select?: HolderSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HolderInclude<ExtArgs> | null
    /**
     * The filter to search for the Holder to update in case it exists.
     */
    where: HolderWhereUniqueInput
    /**
     * In case the Holder found by the `where` argument doesn't exist, create a new Holder with this data.
     */
    create: XOR<HolderCreateInput, HolderUncheckedCreateInput>
    /**
     * In case the Holder was found with the provided `where` argument, update it with this data.
     */
    update: XOR<HolderUpdateInput, HolderUncheckedUpdateInput>
  }

  /**
   * Holder delete
   */
  export type HolderDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Holder
     */
    select?: HolderSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HolderInclude<ExtArgs> | null
    /**
     * Filter which Holder to delete.
     */
    where: HolderWhereUniqueInput
  }

  /**
   * Holder deleteMany
   */
  export type HolderDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Holders to delete
     */
    where?: HolderWhereInput
  }

  /**
   * Holder.transactionsForms
   */
  export type Holder$transactionsFormsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TransactionsForms
     */
    select?: TransactionsFormsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TransactionsFormsInclude<ExtArgs> | null
    where?: TransactionsFormsWhereInput
    orderBy?: TransactionsFormsOrderByWithRelationInput | TransactionsFormsOrderByWithRelationInput[]
    cursor?: TransactionsFormsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TransactionsFormsScalarFieldEnum | TransactionsFormsScalarFieldEnum[]
  }

  /**
   * Holder without action
   */
  export type HolderDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Holder
     */
    select?: HolderSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HolderInclude<ExtArgs> | null
  }


  /**
   * Model Recurrence
   */

  export type AggregateRecurrence = {
    _count: RecurrenceCountAggregateOutputType | null
    _avg: RecurrenceAvgAggregateOutputType | null
    _sum: RecurrenceSumAggregateOutputType | null
    _min: RecurrenceMinAggregateOutputType | null
    _max: RecurrenceMaxAggregateOutputType | null
  }

  export type RecurrenceAvgAggregateOutputType = {
    id: number | null
    reptition: number | null
    range: number | null
    value: number | null
    categoryId: number | null
    type: number | null
  }

  export type RecurrenceSumAggregateOutputType = {
    id: number | null
    reptition: number | null
    range: number | null
    value: number | null
    categoryId: number | null
    type: number | null
  }

  export type RecurrenceMinAggregateOutputType = {
    id: number | null
    name: string | null
    reptition: number | null
    range: number | null
    value: number | null
    categoryId: number | null
    type: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type RecurrenceMaxAggregateOutputType = {
    id: number | null
    name: string | null
    reptition: number | null
    range: number | null
    value: number | null
    categoryId: number | null
    type: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type RecurrenceCountAggregateOutputType = {
    id: number
    name: number
    reptition: number
    range: number
    value: number
    categoryId: number
    type: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type RecurrenceAvgAggregateInputType = {
    id?: true
    reptition?: true
    range?: true
    value?: true
    categoryId?: true
    type?: true
  }

  export type RecurrenceSumAggregateInputType = {
    id?: true
    reptition?: true
    range?: true
    value?: true
    categoryId?: true
    type?: true
  }

  export type RecurrenceMinAggregateInputType = {
    id?: true
    name?: true
    reptition?: true
    range?: true
    value?: true
    categoryId?: true
    type?: true
    createdAt?: true
    updatedAt?: true
  }

  export type RecurrenceMaxAggregateInputType = {
    id?: true
    name?: true
    reptition?: true
    range?: true
    value?: true
    categoryId?: true
    type?: true
    createdAt?: true
    updatedAt?: true
  }

  export type RecurrenceCountAggregateInputType = {
    id?: true
    name?: true
    reptition?: true
    range?: true
    value?: true
    categoryId?: true
    type?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type RecurrenceAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Recurrence to aggregate.
     */
    where?: RecurrenceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Recurrences to fetch.
     */
    orderBy?: RecurrenceOrderByWithRelationInput | RecurrenceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: RecurrenceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Recurrences from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Recurrences.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Recurrences
    **/
    _count?: true | RecurrenceCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: RecurrenceAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: RecurrenceSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: RecurrenceMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: RecurrenceMaxAggregateInputType
  }

  export type GetRecurrenceAggregateType<T extends RecurrenceAggregateArgs> = {
        [P in keyof T & keyof AggregateRecurrence]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateRecurrence[P]>
      : GetScalarType<T[P], AggregateRecurrence[P]>
  }




  export type RecurrenceGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RecurrenceWhereInput
    orderBy?: RecurrenceOrderByWithAggregationInput | RecurrenceOrderByWithAggregationInput[]
    by: RecurrenceScalarFieldEnum[] | RecurrenceScalarFieldEnum
    having?: RecurrenceScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: RecurrenceCountAggregateInputType | true
    _avg?: RecurrenceAvgAggregateInputType
    _sum?: RecurrenceSumAggregateInputType
    _min?: RecurrenceMinAggregateInputType
    _max?: RecurrenceMaxAggregateInputType
  }

  export type RecurrenceGroupByOutputType = {
    id: number
    name: string
    reptition: number
    range: number
    value: number
    categoryId: number
    type: number
    createdAt: Date
    updatedAt: Date
    _count: RecurrenceCountAggregateOutputType | null
    _avg: RecurrenceAvgAggregateOutputType | null
    _sum: RecurrenceSumAggregateOutputType | null
    _min: RecurrenceMinAggregateOutputType | null
    _max: RecurrenceMaxAggregateOutputType | null
  }

  type GetRecurrenceGroupByPayload<T extends RecurrenceGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<RecurrenceGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof RecurrenceGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], RecurrenceGroupByOutputType[P]>
            : GetScalarType<T[P], RecurrenceGroupByOutputType[P]>
        }
      >
    >


  export type RecurrenceSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    reptition?: boolean
    range?: boolean
    value?: boolean
    categoryId?: boolean
    type?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    category?: boolean | AccountPlanDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["recurrence"]>

  export type RecurrenceSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    reptition?: boolean
    range?: boolean
    value?: boolean
    categoryId?: boolean
    type?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    category?: boolean | AccountPlanDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["recurrence"]>

  export type RecurrenceSelectScalar = {
    id?: boolean
    name?: boolean
    reptition?: boolean
    range?: boolean
    value?: boolean
    categoryId?: boolean
    type?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type RecurrenceInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    category?: boolean | AccountPlanDefaultArgs<ExtArgs>
  }
  export type RecurrenceIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    category?: boolean | AccountPlanDefaultArgs<ExtArgs>
  }

  export type $RecurrencePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Recurrence"
    objects: {
      category: Prisma.$AccountPlanPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      name: string
      reptition: number
      range: number
      value: number
      categoryId: number
      type: number
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["recurrence"]>
    composites: {}
  }

  type RecurrenceGetPayload<S extends boolean | null | undefined | RecurrenceDefaultArgs> = $Result.GetResult<Prisma.$RecurrencePayload, S>

  type RecurrenceCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<RecurrenceFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: RecurrenceCountAggregateInputType | true
    }

  export interface RecurrenceDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Recurrence'], meta: { name: 'Recurrence' } }
    /**
     * Find zero or one Recurrence that matches the filter.
     * @param {RecurrenceFindUniqueArgs} args - Arguments to find a Recurrence
     * @example
     * // Get one Recurrence
     * const recurrence = await prisma.recurrence.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends RecurrenceFindUniqueArgs>(args: SelectSubset<T, RecurrenceFindUniqueArgs<ExtArgs>>): Prisma__RecurrenceClient<$Result.GetResult<Prisma.$RecurrencePayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Recurrence that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {RecurrenceFindUniqueOrThrowArgs} args - Arguments to find a Recurrence
     * @example
     * // Get one Recurrence
     * const recurrence = await prisma.recurrence.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends RecurrenceFindUniqueOrThrowArgs>(args: SelectSubset<T, RecurrenceFindUniqueOrThrowArgs<ExtArgs>>): Prisma__RecurrenceClient<$Result.GetResult<Prisma.$RecurrencePayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Recurrence that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RecurrenceFindFirstArgs} args - Arguments to find a Recurrence
     * @example
     * // Get one Recurrence
     * const recurrence = await prisma.recurrence.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends RecurrenceFindFirstArgs>(args?: SelectSubset<T, RecurrenceFindFirstArgs<ExtArgs>>): Prisma__RecurrenceClient<$Result.GetResult<Prisma.$RecurrencePayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Recurrence that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RecurrenceFindFirstOrThrowArgs} args - Arguments to find a Recurrence
     * @example
     * // Get one Recurrence
     * const recurrence = await prisma.recurrence.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends RecurrenceFindFirstOrThrowArgs>(args?: SelectSubset<T, RecurrenceFindFirstOrThrowArgs<ExtArgs>>): Prisma__RecurrenceClient<$Result.GetResult<Prisma.$RecurrencePayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Recurrences that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RecurrenceFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Recurrences
     * const recurrences = await prisma.recurrence.findMany()
     * 
     * // Get first 10 Recurrences
     * const recurrences = await prisma.recurrence.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const recurrenceWithIdOnly = await prisma.recurrence.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends RecurrenceFindManyArgs>(args?: SelectSubset<T, RecurrenceFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RecurrencePayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Recurrence.
     * @param {RecurrenceCreateArgs} args - Arguments to create a Recurrence.
     * @example
     * // Create one Recurrence
     * const Recurrence = await prisma.recurrence.create({
     *   data: {
     *     // ... data to create a Recurrence
     *   }
     * })
     * 
     */
    create<T extends RecurrenceCreateArgs>(args: SelectSubset<T, RecurrenceCreateArgs<ExtArgs>>): Prisma__RecurrenceClient<$Result.GetResult<Prisma.$RecurrencePayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Recurrences.
     * @param {RecurrenceCreateManyArgs} args - Arguments to create many Recurrences.
     * @example
     * // Create many Recurrences
     * const recurrence = await prisma.recurrence.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends RecurrenceCreateManyArgs>(args?: SelectSubset<T, RecurrenceCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Recurrences and returns the data saved in the database.
     * @param {RecurrenceCreateManyAndReturnArgs} args - Arguments to create many Recurrences.
     * @example
     * // Create many Recurrences
     * const recurrence = await prisma.recurrence.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Recurrences and only return the `id`
     * const recurrenceWithIdOnly = await prisma.recurrence.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends RecurrenceCreateManyAndReturnArgs>(args?: SelectSubset<T, RecurrenceCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RecurrencePayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Recurrence.
     * @param {RecurrenceDeleteArgs} args - Arguments to delete one Recurrence.
     * @example
     * // Delete one Recurrence
     * const Recurrence = await prisma.recurrence.delete({
     *   where: {
     *     // ... filter to delete one Recurrence
     *   }
     * })
     * 
     */
    delete<T extends RecurrenceDeleteArgs>(args: SelectSubset<T, RecurrenceDeleteArgs<ExtArgs>>): Prisma__RecurrenceClient<$Result.GetResult<Prisma.$RecurrencePayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Recurrence.
     * @param {RecurrenceUpdateArgs} args - Arguments to update one Recurrence.
     * @example
     * // Update one Recurrence
     * const recurrence = await prisma.recurrence.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends RecurrenceUpdateArgs>(args: SelectSubset<T, RecurrenceUpdateArgs<ExtArgs>>): Prisma__RecurrenceClient<$Result.GetResult<Prisma.$RecurrencePayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Recurrences.
     * @param {RecurrenceDeleteManyArgs} args - Arguments to filter Recurrences to delete.
     * @example
     * // Delete a few Recurrences
     * const { count } = await prisma.recurrence.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends RecurrenceDeleteManyArgs>(args?: SelectSubset<T, RecurrenceDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Recurrences.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RecurrenceUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Recurrences
     * const recurrence = await prisma.recurrence.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends RecurrenceUpdateManyArgs>(args: SelectSubset<T, RecurrenceUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Recurrence.
     * @param {RecurrenceUpsertArgs} args - Arguments to update or create a Recurrence.
     * @example
     * // Update or create a Recurrence
     * const recurrence = await prisma.recurrence.upsert({
     *   create: {
     *     // ... data to create a Recurrence
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Recurrence we want to update
     *   }
     * })
     */
    upsert<T extends RecurrenceUpsertArgs>(args: SelectSubset<T, RecurrenceUpsertArgs<ExtArgs>>): Prisma__RecurrenceClient<$Result.GetResult<Prisma.$RecurrencePayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Recurrences.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RecurrenceCountArgs} args - Arguments to filter Recurrences to count.
     * @example
     * // Count the number of Recurrences
     * const count = await prisma.recurrence.count({
     *   where: {
     *     // ... the filter for the Recurrences we want to count
     *   }
     * })
    **/
    count<T extends RecurrenceCountArgs>(
      args?: Subset<T, RecurrenceCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], RecurrenceCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Recurrence.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RecurrenceAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends RecurrenceAggregateArgs>(args: Subset<T, RecurrenceAggregateArgs>): Prisma.PrismaPromise<GetRecurrenceAggregateType<T>>

    /**
     * Group by Recurrence.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RecurrenceGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends RecurrenceGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: RecurrenceGroupByArgs['orderBy'] }
        : { orderBy?: RecurrenceGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, RecurrenceGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetRecurrenceGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Recurrence model
   */
  readonly fields: RecurrenceFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Recurrence.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__RecurrenceClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    category<T extends AccountPlanDefaultArgs<ExtArgs> = {}>(args?: Subset<T, AccountPlanDefaultArgs<ExtArgs>>): Prisma__AccountPlanClient<$Result.GetResult<Prisma.$AccountPlanPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Recurrence model
   */ 
  interface RecurrenceFieldRefs {
    readonly id: FieldRef<"Recurrence", 'Int'>
    readonly name: FieldRef<"Recurrence", 'String'>
    readonly reptition: FieldRef<"Recurrence", 'Int'>
    readonly range: FieldRef<"Recurrence", 'Int'>
    readonly value: FieldRef<"Recurrence", 'Float'>
    readonly categoryId: FieldRef<"Recurrence", 'Int'>
    readonly type: FieldRef<"Recurrence", 'Int'>
    readonly createdAt: FieldRef<"Recurrence", 'DateTime'>
    readonly updatedAt: FieldRef<"Recurrence", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Recurrence findUnique
   */
  export type RecurrenceFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Recurrence
     */
    select?: RecurrenceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RecurrenceInclude<ExtArgs> | null
    /**
     * Filter, which Recurrence to fetch.
     */
    where: RecurrenceWhereUniqueInput
  }

  /**
   * Recurrence findUniqueOrThrow
   */
  export type RecurrenceFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Recurrence
     */
    select?: RecurrenceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RecurrenceInclude<ExtArgs> | null
    /**
     * Filter, which Recurrence to fetch.
     */
    where: RecurrenceWhereUniqueInput
  }

  /**
   * Recurrence findFirst
   */
  export type RecurrenceFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Recurrence
     */
    select?: RecurrenceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RecurrenceInclude<ExtArgs> | null
    /**
     * Filter, which Recurrence to fetch.
     */
    where?: RecurrenceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Recurrences to fetch.
     */
    orderBy?: RecurrenceOrderByWithRelationInput | RecurrenceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Recurrences.
     */
    cursor?: RecurrenceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Recurrences from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Recurrences.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Recurrences.
     */
    distinct?: RecurrenceScalarFieldEnum | RecurrenceScalarFieldEnum[]
  }

  /**
   * Recurrence findFirstOrThrow
   */
  export type RecurrenceFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Recurrence
     */
    select?: RecurrenceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RecurrenceInclude<ExtArgs> | null
    /**
     * Filter, which Recurrence to fetch.
     */
    where?: RecurrenceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Recurrences to fetch.
     */
    orderBy?: RecurrenceOrderByWithRelationInput | RecurrenceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Recurrences.
     */
    cursor?: RecurrenceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Recurrences from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Recurrences.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Recurrences.
     */
    distinct?: RecurrenceScalarFieldEnum | RecurrenceScalarFieldEnum[]
  }

  /**
   * Recurrence findMany
   */
  export type RecurrenceFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Recurrence
     */
    select?: RecurrenceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RecurrenceInclude<ExtArgs> | null
    /**
     * Filter, which Recurrences to fetch.
     */
    where?: RecurrenceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Recurrences to fetch.
     */
    orderBy?: RecurrenceOrderByWithRelationInput | RecurrenceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Recurrences.
     */
    cursor?: RecurrenceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Recurrences from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Recurrences.
     */
    skip?: number
    distinct?: RecurrenceScalarFieldEnum | RecurrenceScalarFieldEnum[]
  }

  /**
   * Recurrence create
   */
  export type RecurrenceCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Recurrence
     */
    select?: RecurrenceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RecurrenceInclude<ExtArgs> | null
    /**
     * The data needed to create a Recurrence.
     */
    data: XOR<RecurrenceCreateInput, RecurrenceUncheckedCreateInput>
  }

  /**
   * Recurrence createMany
   */
  export type RecurrenceCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Recurrences.
     */
    data: RecurrenceCreateManyInput | RecurrenceCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Recurrence createManyAndReturn
   */
  export type RecurrenceCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Recurrence
     */
    select?: RecurrenceSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Recurrences.
     */
    data: RecurrenceCreateManyInput | RecurrenceCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RecurrenceIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Recurrence update
   */
  export type RecurrenceUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Recurrence
     */
    select?: RecurrenceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RecurrenceInclude<ExtArgs> | null
    /**
     * The data needed to update a Recurrence.
     */
    data: XOR<RecurrenceUpdateInput, RecurrenceUncheckedUpdateInput>
    /**
     * Choose, which Recurrence to update.
     */
    where: RecurrenceWhereUniqueInput
  }

  /**
   * Recurrence updateMany
   */
  export type RecurrenceUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Recurrences.
     */
    data: XOR<RecurrenceUpdateManyMutationInput, RecurrenceUncheckedUpdateManyInput>
    /**
     * Filter which Recurrences to update
     */
    where?: RecurrenceWhereInput
  }

  /**
   * Recurrence upsert
   */
  export type RecurrenceUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Recurrence
     */
    select?: RecurrenceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RecurrenceInclude<ExtArgs> | null
    /**
     * The filter to search for the Recurrence to update in case it exists.
     */
    where: RecurrenceWhereUniqueInput
    /**
     * In case the Recurrence found by the `where` argument doesn't exist, create a new Recurrence with this data.
     */
    create: XOR<RecurrenceCreateInput, RecurrenceUncheckedCreateInput>
    /**
     * In case the Recurrence was found with the provided `where` argument, update it with this data.
     */
    update: XOR<RecurrenceUpdateInput, RecurrenceUncheckedUpdateInput>
  }

  /**
   * Recurrence delete
   */
  export type RecurrenceDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Recurrence
     */
    select?: RecurrenceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RecurrenceInclude<ExtArgs> | null
    /**
     * Filter which Recurrence to delete.
     */
    where: RecurrenceWhereUniqueInput
  }

  /**
   * Recurrence deleteMany
   */
  export type RecurrenceDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Recurrences to delete
     */
    where?: RecurrenceWhereInput
  }

  /**
   * Recurrence without action
   */
  export type RecurrenceDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Recurrence
     */
    select?: RecurrenceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RecurrenceInclude<ExtArgs> | null
  }


  /**
   * Model Account
   */

  export type AggregateAccount = {
    _count: AccountCountAggregateOutputType | null
    _avg: AccountAvgAggregateOutputType | null
    _sum: AccountSumAggregateOutputType | null
    _min: AccountMinAggregateOutputType | null
    _max: AccountMaxAggregateOutputType | null
  }

  export type AccountAvgAggregateOutputType = {
    id: number | null
    balance: number | null
    userId: number | null
    categoryId: number | null
  }

  export type AccountSumAggregateOutputType = {
    id: number | null
    balance: number | null
    userId: number | null
    categoryId: number | null
  }

  export type AccountMinAggregateOutputType = {
    id: number | null
    description: string | null
    balance: number | null
    userId: number | null
    categoryId: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type AccountMaxAggregateOutputType = {
    id: number | null
    description: string | null
    balance: number | null
    userId: number | null
    categoryId: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type AccountCountAggregateOutputType = {
    id: number
    description: number
    balance: number
    userId: number
    categoryId: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type AccountAvgAggregateInputType = {
    id?: true
    balance?: true
    userId?: true
    categoryId?: true
  }

  export type AccountSumAggregateInputType = {
    id?: true
    balance?: true
    userId?: true
    categoryId?: true
  }

  export type AccountMinAggregateInputType = {
    id?: true
    description?: true
    balance?: true
    userId?: true
    categoryId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type AccountMaxAggregateInputType = {
    id?: true
    description?: true
    balance?: true
    userId?: true
    categoryId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type AccountCountAggregateInputType = {
    id?: true
    description?: true
    balance?: true
    userId?: true
    categoryId?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type AccountAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Account to aggregate.
     */
    where?: AccountWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Accounts to fetch.
     */
    orderBy?: AccountOrderByWithRelationInput | AccountOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: AccountWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Accounts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Accounts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Accounts
    **/
    _count?: true | AccountCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: AccountAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: AccountSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AccountMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AccountMaxAggregateInputType
  }

  export type GetAccountAggregateType<T extends AccountAggregateArgs> = {
        [P in keyof T & keyof AggregateAccount]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAccount[P]>
      : GetScalarType<T[P], AggregateAccount[P]>
  }




  export type AccountGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AccountWhereInput
    orderBy?: AccountOrderByWithAggregationInput | AccountOrderByWithAggregationInput[]
    by: AccountScalarFieldEnum[] | AccountScalarFieldEnum
    having?: AccountScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AccountCountAggregateInputType | true
    _avg?: AccountAvgAggregateInputType
    _sum?: AccountSumAggregateInputType
    _min?: AccountMinAggregateInputType
    _max?: AccountMaxAggregateInputType
  }

  export type AccountGroupByOutputType = {
    id: number
    description: string
    balance: number
    userId: number
    categoryId: number
    createdAt: Date
    updatedAt: Date
    _count: AccountCountAggregateOutputType | null
    _avg: AccountAvgAggregateOutputType | null
    _sum: AccountSumAggregateOutputType | null
    _min: AccountMinAggregateOutputType | null
    _max: AccountMaxAggregateOutputType | null
  }

  type GetAccountGroupByPayload<T extends AccountGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<AccountGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AccountGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AccountGroupByOutputType[P]>
            : GetScalarType<T[P], AccountGroupByOutputType[P]>
        }
      >
    >


  export type AccountSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    description?: boolean
    balance?: boolean
    userId?: boolean
    categoryId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    parcels?: boolean | Account$parcelsArgs<ExtArgs>
    category?: boolean | AccountPlanDefaultArgs<ExtArgs>
    financialTransactions?: boolean | Account$financialTransactionsArgs<ExtArgs>
    _count?: boolean | AccountCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["account"]>

  export type AccountSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    description?: boolean
    balance?: boolean
    userId?: boolean
    categoryId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    category?: boolean | AccountPlanDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["account"]>

  export type AccountSelectScalar = {
    id?: boolean
    description?: boolean
    balance?: boolean
    userId?: boolean
    categoryId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type AccountInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    parcels?: boolean | Account$parcelsArgs<ExtArgs>
    category?: boolean | AccountPlanDefaultArgs<ExtArgs>
    financialTransactions?: boolean | Account$financialTransactionsArgs<ExtArgs>
    _count?: boolean | AccountCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type AccountIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    category?: boolean | AccountPlanDefaultArgs<ExtArgs>
  }

  export type $AccountPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Account"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
      parcels: Prisma.$ParcelPayload<ExtArgs>[]
      category: Prisma.$AccountPlanPayload<ExtArgs>
      financialTransactions: Prisma.$FinancialTransactionPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      description: string
      balance: number
      userId: number
      categoryId: number
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["account"]>
    composites: {}
  }

  type AccountGetPayload<S extends boolean | null | undefined | AccountDefaultArgs> = $Result.GetResult<Prisma.$AccountPayload, S>

  type AccountCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<AccountFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: AccountCountAggregateInputType | true
    }

  export interface AccountDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Account'], meta: { name: 'Account' } }
    /**
     * Find zero or one Account that matches the filter.
     * @param {AccountFindUniqueArgs} args - Arguments to find a Account
     * @example
     * // Get one Account
     * const account = await prisma.account.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends AccountFindUniqueArgs>(args: SelectSubset<T, AccountFindUniqueArgs<ExtArgs>>): Prisma__AccountClient<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Account that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {AccountFindUniqueOrThrowArgs} args - Arguments to find a Account
     * @example
     * // Get one Account
     * const account = await prisma.account.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends AccountFindUniqueOrThrowArgs>(args: SelectSubset<T, AccountFindUniqueOrThrowArgs<ExtArgs>>): Prisma__AccountClient<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Account that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountFindFirstArgs} args - Arguments to find a Account
     * @example
     * // Get one Account
     * const account = await prisma.account.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends AccountFindFirstArgs>(args?: SelectSubset<T, AccountFindFirstArgs<ExtArgs>>): Prisma__AccountClient<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Account that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountFindFirstOrThrowArgs} args - Arguments to find a Account
     * @example
     * // Get one Account
     * const account = await prisma.account.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends AccountFindFirstOrThrowArgs>(args?: SelectSubset<T, AccountFindFirstOrThrowArgs<ExtArgs>>): Prisma__AccountClient<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Accounts that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Accounts
     * const accounts = await prisma.account.findMany()
     * 
     * // Get first 10 Accounts
     * const accounts = await prisma.account.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const accountWithIdOnly = await prisma.account.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends AccountFindManyArgs>(args?: SelectSubset<T, AccountFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Account.
     * @param {AccountCreateArgs} args - Arguments to create a Account.
     * @example
     * // Create one Account
     * const Account = await prisma.account.create({
     *   data: {
     *     // ... data to create a Account
     *   }
     * })
     * 
     */
    create<T extends AccountCreateArgs>(args: SelectSubset<T, AccountCreateArgs<ExtArgs>>): Prisma__AccountClient<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Accounts.
     * @param {AccountCreateManyArgs} args - Arguments to create many Accounts.
     * @example
     * // Create many Accounts
     * const account = await prisma.account.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends AccountCreateManyArgs>(args?: SelectSubset<T, AccountCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Accounts and returns the data saved in the database.
     * @param {AccountCreateManyAndReturnArgs} args - Arguments to create many Accounts.
     * @example
     * // Create many Accounts
     * const account = await prisma.account.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Accounts and only return the `id`
     * const accountWithIdOnly = await prisma.account.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends AccountCreateManyAndReturnArgs>(args?: SelectSubset<T, AccountCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Account.
     * @param {AccountDeleteArgs} args - Arguments to delete one Account.
     * @example
     * // Delete one Account
     * const Account = await prisma.account.delete({
     *   where: {
     *     // ... filter to delete one Account
     *   }
     * })
     * 
     */
    delete<T extends AccountDeleteArgs>(args: SelectSubset<T, AccountDeleteArgs<ExtArgs>>): Prisma__AccountClient<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Account.
     * @param {AccountUpdateArgs} args - Arguments to update one Account.
     * @example
     * // Update one Account
     * const account = await prisma.account.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends AccountUpdateArgs>(args: SelectSubset<T, AccountUpdateArgs<ExtArgs>>): Prisma__AccountClient<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Accounts.
     * @param {AccountDeleteManyArgs} args - Arguments to filter Accounts to delete.
     * @example
     * // Delete a few Accounts
     * const { count } = await prisma.account.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends AccountDeleteManyArgs>(args?: SelectSubset<T, AccountDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Accounts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Accounts
     * const account = await prisma.account.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends AccountUpdateManyArgs>(args: SelectSubset<T, AccountUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Account.
     * @param {AccountUpsertArgs} args - Arguments to update or create a Account.
     * @example
     * // Update or create a Account
     * const account = await prisma.account.upsert({
     *   create: {
     *     // ... data to create a Account
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Account we want to update
     *   }
     * })
     */
    upsert<T extends AccountUpsertArgs>(args: SelectSubset<T, AccountUpsertArgs<ExtArgs>>): Prisma__AccountClient<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Accounts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountCountArgs} args - Arguments to filter Accounts to count.
     * @example
     * // Count the number of Accounts
     * const count = await prisma.account.count({
     *   where: {
     *     // ... the filter for the Accounts we want to count
     *   }
     * })
    **/
    count<T extends AccountCountArgs>(
      args?: Subset<T, AccountCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AccountCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Account.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AccountAggregateArgs>(args: Subset<T, AccountAggregateArgs>): Prisma.PrismaPromise<GetAccountAggregateType<T>>

    /**
     * Group by Account.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AccountGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AccountGroupByArgs['orderBy'] }
        : { orderBy?: AccountGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AccountGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAccountGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Account model
   */
  readonly fields: AccountFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Account.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__AccountClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    parcels<T extends Account$parcelsArgs<ExtArgs> = {}>(args?: Subset<T, Account$parcelsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ParcelPayload<ExtArgs>, T, "findMany"> | Null>
    category<T extends AccountPlanDefaultArgs<ExtArgs> = {}>(args?: Subset<T, AccountPlanDefaultArgs<ExtArgs>>): Prisma__AccountPlanClient<$Result.GetResult<Prisma.$AccountPlanPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    financialTransactions<T extends Account$financialTransactionsArgs<ExtArgs> = {}>(args?: Subset<T, Account$financialTransactionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FinancialTransactionPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Account model
   */ 
  interface AccountFieldRefs {
    readonly id: FieldRef<"Account", 'Int'>
    readonly description: FieldRef<"Account", 'String'>
    readonly balance: FieldRef<"Account", 'Float'>
    readonly userId: FieldRef<"Account", 'Int'>
    readonly categoryId: FieldRef<"Account", 'Int'>
    readonly createdAt: FieldRef<"Account", 'DateTime'>
    readonly updatedAt: FieldRef<"Account", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Account findUnique
   */
  export type AccountFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountInclude<ExtArgs> | null
    /**
     * Filter, which Account to fetch.
     */
    where: AccountWhereUniqueInput
  }

  /**
   * Account findUniqueOrThrow
   */
  export type AccountFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountInclude<ExtArgs> | null
    /**
     * Filter, which Account to fetch.
     */
    where: AccountWhereUniqueInput
  }

  /**
   * Account findFirst
   */
  export type AccountFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountInclude<ExtArgs> | null
    /**
     * Filter, which Account to fetch.
     */
    where?: AccountWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Accounts to fetch.
     */
    orderBy?: AccountOrderByWithRelationInput | AccountOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Accounts.
     */
    cursor?: AccountWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Accounts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Accounts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Accounts.
     */
    distinct?: AccountScalarFieldEnum | AccountScalarFieldEnum[]
  }

  /**
   * Account findFirstOrThrow
   */
  export type AccountFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountInclude<ExtArgs> | null
    /**
     * Filter, which Account to fetch.
     */
    where?: AccountWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Accounts to fetch.
     */
    orderBy?: AccountOrderByWithRelationInput | AccountOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Accounts.
     */
    cursor?: AccountWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Accounts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Accounts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Accounts.
     */
    distinct?: AccountScalarFieldEnum | AccountScalarFieldEnum[]
  }

  /**
   * Account findMany
   */
  export type AccountFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountInclude<ExtArgs> | null
    /**
     * Filter, which Accounts to fetch.
     */
    where?: AccountWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Accounts to fetch.
     */
    orderBy?: AccountOrderByWithRelationInput | AccountOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Accounts.
     */
    cursor?: AccountWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Accounts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Accounts.
     */
    skip?: number
    distinct?: AccountScalarFieldEnum | AccountScalarFieldEnum[]
  }

  /**
   * Account create
   */
  export type AccountCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountInclude<ExtArgs> | null
    /**
     * The data needed to create a Account.
     */
    data: XOR<AccountCreateInput, AccountUncheckedCreateInput>
  }

  /**
   * Account createMany
   */
  export type AccountCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Accounts.
     */
    data: AccountCreateManyInput | AccountCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Account createManyAndReturn
   */
  export type AccountCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Accounts.
     */
    data: AccountCreateManyInput | AccountCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Account update
   */
  export type AccountUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountInclude<ExtArgs> | null
    /**
     * The data needed to update a Account.
     */
    data: XOR<AccountUpdateInput, AccountUncheckedUpdateInput>
    /**
     * Choose, which Account to update.
     */
    where: AccountWhereUniqueInput
  }

  /**
   * Account updateMany
   */
  export type AccountUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Accounts.
     */
    data: XOR<AccountUpdateManyMutationInput, AccountUncheckedUpdateManyInput>
    /**
     * Filter which Accounts to update
     */
    where?: AccountWhereInput
  }

  /**
   * Account upsert
   */
  export type AccountUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountInclude<ExtArgs> | null
    /**
     * The filter to search for the Account to update in case it exists.
     */
    where: AccountWhereUniqueInput
    /**
     * In case the Account found by the `where` argument doesn't exist, create a new Account with this data.
     */
    create: XOR<AccountCreateInput, AccountUncheckedCreateInput>
    /**
     * In case the Account was found with the provided `where` argument, update it with this data.
     */
    update: XOR<AccountUpdateInput, AccountUncheckedUpdateInput>
  }

  /**
   * Account delete
   */
  export type AccountDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountInclude<ExtArgs> | null
    /**
     * Filter which Account to delete.
     */
    where: AccountWhereUniqueInput
  }

  /**
   * Account deleteMany
   */
  export type AccountDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Accounts to delete
     */
    where?: AccountWhereInput
  }

  /**
   * Account.parcels
   */
  export type Account$parcelsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Parcel
     */
    select?: ParcelSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ParcelInclude<ExtArgs> | null
    where?: ParcelWhereInput
    orderBy?: ParcelOrderByWithRelationInput | ParcelOrderByWithRelationInput[]
    cursor?: ParcelWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ParcelScalarFieldEnum | ParcelScalarFieldEnum[]
  }

  /**
   * Account.financialTransactions
   */
  export type Account$financialTransactionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FinancialTransaction
     */
    select?: FinancialTransactionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FinancialTransactionInclude<ExtArgs> | null
    where?: FinancialTransactionWhereInput
    orderBy?: FinancialTransactionOrderByWithRelationInput | FinancialTransactionOrderByWithRelationInput[]
    cursor?: FinancialTransactionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: FinancialTransactionScalarFieldEnum | FinancialTransactionScalarFieldEnum[]
  }

  /**
   * Account without action
   */
  export type AccountDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountInclude<ExtArgs> | null
  }


  /**
   * Model Parcel
   */

  export type AggregateParcel = {
    _count: ParcelCountAggregateOutputType | null
    _avg: ParcelAvgAggregateOutputType | null
    _sum: ParcelSumAggregateOutputType | null
    _min: ParcelMinAggregateOutputType | null
    _max: ParcelMaxAggregateOutputType | null
  }

  export type ParcelAvgAggregateOutputType = {
    id: number | null
    value: number | null
    accountId: number | null
    categoryId: number | null
  }

  export type ParcelSumAggregateOutputType = {
    id: number | null
    value: number | null
    accountId: number | null
    categoryId: number | null
  }

  export type ParcelMinAggregateOutputType = {
    id: number | null
    value: number | null
    dueDate: Date | null
    competence: Date | null
    accountId: number | null
    categoryId: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ParcelMaxAggregateOutputType = {
    id: number | null
    value: number | null
    dueDate: Date | null
    competence: Date | null
    accountId: number | null
    categoryId: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ParcelCountAggregateOutputType = {
    id: number
    value: number
    dueDate: number
    competence: number
    accountId: number
    categoryId: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type ParcelAvgAggregateInputType = {
    id?: true
    value?: true
    accountId?: true
    categoryId?: true
  }

  export type ParcelSumAggregateInputType = {
    id?: true
    value?: true
    accountId?: true
    categoryId?: true
  }

  export type ParcelMinAggregateInputType = {
    id?: true
    value?: true
    dueDate?: true
    competence?: true
    accountId?: true
    categoryId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ParcelMaxAggregateInputType = {
    id?: true
    value?: true
    dueDate?: true
    competence?: true
    accountId?: true
    categoryId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ParcelCountAggregateInputType = {
    id?: true
    value?: true
    dueDate?: true
    competence?: true
    accountId?: true
    categoryId?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type ParcelAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Parcel to aggregate.
     */
    where?: ParcelWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Parcels to fetch.
     */
    orderBy?: ParcelOrderByWithRelationInput | ParcelOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ParcelWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Parcels from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Parcels.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Parcels
    **/
    _count?: true | ParcelCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ParcelAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ParcelSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ParcelMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ParcelMaxAggregateInputType
  }

  export type GetParcelAggregateType<T extends ParcelAggregateArgs> = {
        [P in keyof T & keyof AggregateParcel]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateParcel[P]>
      : GetScalarType<T[P], AggregateParcel[P]>
  }




  export type ParcelGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ParcelWhereInput
    orderBy?: ParcelOrderByWithAggregationInput | ParcelOrderByWithAggregationInput[]
    by: ParcelScalarFieldEnum[] | ParcelScalarFieldEnum
    having?: ParcelScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ParcelCountAggregateInputType | true
    _avg?: ParcelAvgAggregateInputType
    _sum?: ParcelSumAggregateInputType
    _min?: ParcelMinAggregateInputType
    _max?: ParcelMaxAggregateInputType
  }

  export type ParcelGroupByOutputType = {
    id: number
    value: number
    dueDate: Date
    competence: Date
    accountId: number
    categoryId: number
    createdAt: Date
    updatedAt: Date
    _count: ParcelCountAggregateOutputType | null
    _avg: ParcelAvgAggregateOutputType | null
    _sum: ParcelSumAggregateOutputType | null
    _min: ParcelMinAggregateOutputType | null
    _max: ParcelMaxAggregateOutputType | null
  }

  type GetParcelGroupByPayload<T extends ParcelGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ParcelGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ParcelGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ParcelGroupByOutputType[P]>
            : GetScalarType<T[P], ParcelGroupByOutputType[P]>
        }
      >
    >


  export type ParcelSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    value?: boolean
    dueDate?: boolean
    competence?: boolean
    accountId?: boolean
    categoryId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    category?: boolean | AccountPlanDefaultArgs<ExtArgs>
    account?: boolean | AccountDefaultArgs<ExtArgs>
    FinancialTransactions?: boolean | Parcel$FinancialTransactionsArgs<ExtArgs>
    _count?: boolean | ParcelCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["parcel"]>

  export type ParcelSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    value?: boolean
    dueDate?: boolean
    competence?: boolean
    accountId?: boolean
    categoryId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    category?: boolean | AccountPlanDefaultArgs<ExtArgs>
    account?: boolean | AccountDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["parcel"]>

  export type ParcelSelectScalar = {
    id?: boolean
    value?: boolean
    dueDate?: boolean
    competence?: boolean
    accountId?: boolean
    categoryId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type ParcelInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    category?: boolean | AccountPlanDefaultArgs<ExtArgs>
    account?: boolean | AccountDefaultArgs<ExtArgs>
    FinancialTransactions?: boolean | Parcel$FinancialTransactionsArgs<ExtArgs>
    _count?: boolean | ParcelCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type ParcelIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    category?: boolean | AccountPlanDefaultArgs<ExtArgs>
    account?: boolean | AccountDefaultArgs<ExtArgs>
  }

  export type $ParcelPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Parcel"
    objects: {
      category: Prisma.$AccountPlanPayload<ExtArgs>
      account: Prisma.$AccountPayload<ExtArgs>
      FinancialTransactions: Prisma.$FinancialTransactionPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      value: number
      dueDate: Date
      competence: Date
      accountId: number
      categoryId: number
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["parcel"]>
    composites: {}
  }

  type ParcelGetPayload<S extends boolean | null | undefined | ParcelDefaultArgs> = $Result.GetResult<Prisma.$ParcelPayload, S>

  type ParcelCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<ParcelFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: ParcelCountAggregateInputType | true
    }

  export interface ParcelDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Parcel'], meta: { name: 'Parcel' } }
    /**
     * Find zero or one Parcel that matches the filter.
     * @param {ParcelFindUniqueArgs} args - Arguments to find a Parcel
     * @example
     * // Get one Parcel
     * const parcel = await prisma.parcel.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ParcelFindUniqueArgs>(args: SelectSubset<T, ParcelFindUniqueArgs<ExtArgs>>): Prisma__ParcelClient<$Result.GetResult<Prisma.$ParcelPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Parcel that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {ParcelFindUniqueOrThrowArgs} args - Arguments to find a Parcel
     * @example
     * // Get one Parcel
     * const parcel = await prisma.parcel.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ParcelFindUniqueOrThrowArgs>(args: SelectSubset<T, ParcelFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ParcelClient<$Result.GetResult<Prisma.$ParcelPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Parcel that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ParcelFindFirstArgs} args - Arguments to find a Parcel
     * @example
     * // Get one Parcel
     * const parcel = await prisma.parcel.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ParcelFindFirstArgs>(args?: SelectSubset<T, ParcelFindFirstArgs<ExtArgs>>): Prisma__ParcelClient<$Result.GetResult<Prisma.$ParcelPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Parcel that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ParcelFindFirstOrThrowArgs} args - Arguments to find a Parcel
     * @example
     * // Get one Parcel
     * const parcel = await prisma.parcel.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ParcelFindFirstOrThrowArgs>(args?: SelectSubset<T, ParcelFindFirstOrThrowArgs<ExtArgs>>): Prisma__ParcelClient<$Result.GetResult<Prisma.$ParcelPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Parcels that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ParcelFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Parcels
     * const parcels = await prisma.parcel.findMany()
     * 
     * // Get first 10 Parcels
     * const parcels = await prisma.parcel.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const parcelWithIdOnly = await prisma.parcel.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ParcelFindManyArgs>(args?: SelectSubset<T, ParcelFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ParcelPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Parcel.
     * @param {ParcelCreateArgs} args - Arguments to create a Parcel.
     * @example
     * // Create one Parcel
     * const Parcel = await prisma.parcel.create({
     *   data: {
     *     // ... data to create a Parcel
     *   }
     * })
     * 
     */
    create<T extends ParcelCreateArgs>(args: SelectSubset<T, ParcelCreateArgs<ExtArgs>>): Prisma__ParcelClient<$Result.GetResult<Prisma.$ParcelPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Parcels.
     * @param {ParcelCreateManyArgs} args - Arguments to create many Parcels.
     * @example
     * // Create many Parcels
     * const parcel = await prisma.parcel.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ParcelCreateManyArgs>(args?: SelectSubset<T, ParcelCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Parcels and returns the data saved in the database.
     * @param {ParcelCreateManyAndReturnArgs} args - Arguments to create many Parcels.
     * @example
     * // Create many Parcels
     * const parcel = await prisma.parcel.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Parcels and only return the `id`
     * const parcelWithIdOnly = await prisma.parcel.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ParcelCreateManyAndReturnArgs>(args?: SelectSubset<T, ParcelCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ParcelPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Parcel.
     * @param {ParcelDeleteArgs} args - Arguments to delete one Parcel.
     * @example
     * // Delete one Parcel
     * const Parcel = await prisma.parcel.delete({
     *   where: {
     *     // ... filter to delete one Parcel
     *   }
     * })
     * 
     */
    delete<T extends ParcelDeleteArgs>(args: SelectSubset<T, ParcelDeleteArgs<ExtArgs>>): Prisma__ParcelClient<$Result.GetResult<Prisma.$ParcelPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Parcel.
     * @param {ParcelUpdateArgs} args - Arguments to update one Parcel.
     * @example
     * // Update one Parcel
     * const parcel = await prisma.parcel.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ParcelUpdateArgs>(args: SelectSubset<T, ParcelUpdateArgs<ExtArgs>>): Prisma__ParcelClient<$Result.GetResult<Prisma.$ParcelPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Parcels.
     * @param {ParcelDeleteManyArgs} args - Arguments to filter Parcels to delete.
     * @example
     * // Delete a few Parcels
     * const { count } = await prisma.parcel.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ParcelDeleteManyArgs>(args?: SelectSubset<T, ParcelDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Parcels.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ParcelUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Parcels
     * const parcel = await prisma.parcel.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ParcelUpdateManyArgs>(args: SelectSubset<T, ParcelUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Parcel.
     * @param {ParcelUpsertArgs} args - Arguments to update or create a Parcel.
     * @example
     * // Update or create a Parcel
     * const parcel = await prisma.parcel.upsert({
     *   create: {
     *     // ... data to create a Parcel
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Parcel we want to update
     *   }
     * })
     */
    upsert<T extends ParcelUpsertArgs>(args: SelectSubset<T, ParcelUpsertArgs<ExtArgs>>): Prisma__ParcelClient<$Result.GetResult<Prisma.$ParcelPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Parcels.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ParcelCountArgs} args - Arguments to filter Parcels to count.
     * @example
     * // Count the number of Parcels
     * const count = await prisma.parcel.count({
     *   where: {
     *     // ... the filter for the Parcels we want to count
     *   }
     * })
    **/
    count<T extends ParcelCountArgs>(
      args?: Subset<T, ParcelCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ParcelCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Parcel.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ParcelAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ParcelAggregateArgs>(args: Subset<T, ParcelAggregateArgs>): Prisma.PrismaPromise<GetParcelAggregateType<T>>

    /**
     * Group by Parcel.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ParcelGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ParcelGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ParcelGroupByArgs['orderBy'] }
        : { orderBy?: ParcelGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ParcelGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetParcelGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Parcel model
   */
  readonly fields: ParcelFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Parcel.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ParcelClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    category<T extends AccountPlanDefaultArgs<ExtArgs> = {}>(args?: Subset<T, AccountPlanDefaultArgs<ExtArgs>>): Prisma__AccountPlanClient<$Result.GetResult<Prisma.$AccountPlanPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    account<T extends AccountDefaultArgs<ExtArgs> = {}>(args?: Subset<T, AccountDefaultArgs<ExtArgs>>): Prisma__AccountClient<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    FinancialTransactions<T extends Parcel$FinancialTransactionsArgs<ExtArgs> = {}>(args?: Subset<T, Parcel$FinancialTransactionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FinancialTransactionPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Parcel model
   */ 
  interface ParcelFieldRefs {
    readonly id: FieldRef<"Parcel", 'Int'>
    readonly value: FieldRef<"Parcel", 'Float'>
    readonly dueDate: FieldRef<"Parcel", 'DateTime'>
    readonly competence: FieldRef<"Parcel", 'DateTime'>
    readonly accountId: FieldRef<"Parcel", 'Int'>
    readonly categoryId: FieldRef<"Parcel", 'Int'>
    readonly createdAt: FieldRef<"Parcel", 'DateTime'>
    readonly updatedAt: FieldRef<"Parcel", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Parcel findUnique
   */
  export type ParcelFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Parcel
     */
    select?: ParcelSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ParcelInclude<ExtArgs> | null
    /**
     * Filter, which Parcel to fetch.
     */
    where: ParcelWhereUniqueInput
  }

  /**
   * Parcel findUniqueOrThrow
   */
  export type ParcelFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Parcel
     */
    select?: ParcelSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ParcelInclude<ExtArgs> | null
    /**
     * Filter, which Parcel to fetch.
     */
    where: ParcelWhereUniqueInput
  }

  /**
   * Parcel findFirst
   */
  export type ParcelFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Parcel
     */
    select?: ParcelSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ParcelInclude<ExtArgs> | null
    /**
     * Filter, which Parcel to fetch.
     */
    where?: ParcelWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Parcels to fetch.
     */
    orderBy?: ParcelOrderByWithRelationInput | ParcelOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Parcels.
     */
    cursor?: ParcelWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Parcels from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Parcels.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Parcels.
     */
    distinct?: ParcelScalarFieldEnum | ParcelScalarFieldEnum[]
  }

  /**
   * Parcel findFirstOrThrow
   */
  export type ParcelFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Parcel
     */
    select?: ParcelSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ParcelInclude<ExtArgs> | null
    /**
     * Filter, which Parcel to fetch.
     */
    where?: ParcelWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Parcels to fetch.
     */
    orderBy?: ParcelOrderByWithRelationInput | ParcelOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Parcels.
     */
    cursor?: ParcelWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Parcels from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Parcels.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Parcels.
     */
    distinct?: ParcelScalarFieldEnum | ParcelScalarFieldEnum[]
  }

  /**
   * Parcel findMany
   */
  export type ParcelFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Parcel
     */
    select?: ParcelSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ParcelInclude<ExtArgs> | null
    /**
     * Filter, which Parcels to fetch.
     */
    where?: ParcelWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Parcels to fetch.
     */
    orderBy?: ParcelOrderByWithRelationInput | ParcelOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Parcels.
     */
    cursor?: ParcelWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Parcels from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Parcels.
     */
    skip?: number
    distinct?: ParcelScalarFieldEnum | ParcelScalarFieldEnum[]
  }

  /**
   * Parcel create
   */
  export type ParcelCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Parcel
     */
    select?: ParcelSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ParcelInclude<ExtArgs> | null
    /**
     * The data needed to create a Parcel.
     */
    data: XOR<ParcelCreateInput, ParcelUncheckedCreateInput>
  }

  /**
   * Parcel createMany
   */
  export type ParcelCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Parcels.
     */
    data: ParcelCreateManyInput | ParcelCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Parcel createManyAndReturn
   */
  export type ParcelCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Parcel
     */
    select?: ParcelSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Parcels.
     */
    data: ParcelCreateManyInput | ParcelCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ParcelIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Parcel update
   */
  export type ParcelUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Parcel
     */
    select?: ParcelSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ParcelInclude<ExtArgs> | null
    /**
     * The data needed to update a Parcel.
     */
    data: XOR<ParcelUpdateInput, ParcelUncheckedUpdateInput>
    /**
     * Choose, which Parcel to update.
     */
    where: ParcelWhereUniqueInput
  }

  /**
   * Parcel updateMany
   */
  export type ParcelUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Parcels.
     */
    data: XOR<ParcelUpdateManyMutationInput, ParcelUncheckedUpdateManyInput>
    /**
     * Filter which Parcels to update
     */
    where?: ParcelWhereInput
  }

  /**
   * Parcel upsert
   */
  export type ParcelUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Parcel
     */
    select?: ParcelSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ParcelInclude<ExtArgs> | null
    /**
     * The filter to search for the Parcel to update in case it exists.
     */
    where: ParcelWhereUniqueInput
    /**
     * In case the Parcel found by the `where` argument doesn't exist, create a new Parcel with this data.
     */
    create: XOR<ParcelCreateInput, ParcelUncheckedCreateInput>
    /**
     * In case the Parcel was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ParcelUpdateInput, ParcelUncheckedUpdateInput>
  }

  /**
   * Parcel delete
   */
  export type ParcelDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Parcel
     */
    select?: ParcelSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ParcelInclude<ExtArgs> | null
    /**
     * Filter which Parcel to delete.
     */
    where: ParcelWhereUniqueInput
  }

  /**
   * Parcel deleteMany
   */
  export type ParcelDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Parcels to delete
     */
    where?: ParcelWhereInput
  }

  /**
   * Parcel.FinancialTransactions
   */
  export type Parcel$FinancialTransactionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FinancialTransaction
     */
    select?: FinancialTransactionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FinancialTransactionInclude<ExtArgs> | null
    where?: FinancialTransactionWhereInput
    orderBy?: FinancialTransactionOrderByWithRelationInput | FinancialTransactionOrderByWithRelationInput[]
    cursor?: FinancialTransactionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: FinancialTransactionScalarFieldEnum | FinancialTransactionScalarFieldEnum[]
  }

  /**
   * Parcel without action
   */
  export type ParcelDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Parcel
     */
    select?: ParcelSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ParcelInclude<ExtArgs> | null
  }


  /**
   * Model TransactionsForms
   */

  export type AggregateTransactionsForms = {
    _count: TransactionsFormsCountAggregateOutputType | null
    _avg: TransactionsFormsAvgAggregateOutputType | null
    _sum: TransactionsFormsSumAggregateOutputType | null
    _min: TransactionsFormsMinAggregateOutputType | null
    _max: TransactionsFormsMaxAggregateOutputType | null
  }

  export type TransactionsFormsAvgAggregateOutputType = {
    id: number | null
    type: number | null
    holderId: number | null
  }

  export type TransactionsFormsSumAggregateOutputType = {
    id: number | null
    type: number | null
    holderId: number | null
  }

  export type TransactionsFormsMinAggregateOutputType = {
    id: number | null
    name: string | null
    type: number | null
    holderId: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type TransactionsFormsMaxAggregateOutputType = {
    id: number | null
    name: string | null
    type: number | null
    holderId: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type TransactionsFormsCountAggregateOutputType = {
    id: number
    name: number
    type: number
    holderId: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type TransactionsFormsAvgAggregateInputType = {
    id?: true
    type?: true
    holderId?: true
  }

  export type TransactionsFormsSumAggregateInputType = {
    id?: true
    type?: true
    holderId?: true
  }

  export type TransactionsFormsMinAggregateInputType = {
    id?: true
    name?: true
    type?: true
    holderId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type TransactionsFormsMaxAggregateInputType = {
    id?: true
    name?: true
    type?: true
    holderId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type TransactionsFormsCountAggregateInputType = {
    id?: true
    name?: true
    type?: true
    holderId?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type TransactionsFormsAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which TransactionsForms to aggregate.
     */
    where?: TransactionsFormsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TransactionsForms to fetch.
     */
    orderBy?: TransactionsFormsOrderByWithRelationInput | TransactionsFormsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: TransactionsFormsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TransactionsForms from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TransactionsForms.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned TransactionsForms
    **/
    _count?: true | TransactionsFormsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: TransactionsFormsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: TransactionsFormsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TransactionsFormsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TransactionsFormsMaxAggregateInputType
  }

  export type GetTransactionsFormsAggregateType<T extends TransactionsFormsAggregateArgs> = {
        [P in keyof T & keyof AggregateTransactionsForms]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTransactionsForms[P]>
      : GetScalarType<T[P], AggregateTransactionsForms[P]>
  }




  export type TransactionsFormsGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TransactionsFormsWhereInput
    orderBy?: TransactionsFormsOrderByWithAggregationInput | TransactionsFormsOrderByWithAggregationInput[]
    by: TransactionsFormsScalarFieldEnum[] | TransactionsFormsScalarFieldEnum
    having?: TransactionsFormsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TransactionsFormsCountAggregateInputType | true
    _avg?: TransactionsFormsAvgAggregateInputType
    _sum?: TransactionsFormsSumAggregateInputType
    _min?: TransactionsFormsMinAggregateInputType
    _max?: TransactionsFormsMaxAggregateInputType
  }

  export type TransactionsFormsGroupByOutputType = {
    id: number
    name: string
    type: number
    holderId: number
    createdAt: Date
    updatedAt: Date
    _count: TransactionsFormsCountAggregateOutputType | null
    _avg: TransactionsFormsAvgAggregateOutputType | null
    _sum: TransactionsFormsSumAggregateOutputType | null
    _min: TransactionsFormsMinAggregateOutputType | null
    _max: TransactionsFormsMaxAggregateOutputType | null
  }

  type GetTransactionsFormsGroupByPayload<T extends TransactionsFormsGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<TransactionsFormsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TransactionsFormsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TransactionsFormsGroupByOutputType[P]>
            : GetScalarType<T[P], TransactionsFormsGroupByOutputType[P]>
        }
      >
    >


  export type TransactionsFormsSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    type?: boolean
    holderId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    holder?: boolean | HolderDefaultArgs<ExtArgs>
    FinancialTransactions?: boolean | TransactionsForms$FinancialTransactionsArgs<ExtArgs>
    _count?: boolean | TransactionsFormsCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["transactionsForms"]>

  export type TransactionsFormsSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    type?: boolean
    holderId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    holder?: boolean | HolderDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["transactionsForms"]>

  export type TransactionsFormsSelectScalar = {
    id?: boolean
    name?: boolean
    type?: boolean
    holderId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type TransactionsFormsInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    holder?: boolean | HolderDefaultArgs<ExtArgs>
    FinancialTransactions?: boolean | TransactionsForms$FinancialTransactionsArgs<ExtArgs>
    _count?: boolean | TransactionsFormsCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type TransactionsFormsIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    holder?: boolean | HolderDefaultArgs<ExtArgs>
  }

  export type $TransactionsFormsPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "TransactionsForms"
    objects: {
      holder: Prisma.$HolderPayload<ExtArgs>
      FinancialTransactions: Prisma.$FinancialTransactionPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      name: string
      type: number
      holderId: number
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["transactionsForms"]>
    composites: {}
  }

  type TransactionsFormsGetPayload<S extends boolean | null | undefined | TransactionsFormsDefaultArgs> = $Result.GetResult<Prisma.$TransactionsFormsPayload, S>

  type TransactionsFormsCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<TransactionsFormsFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: TransactionsFormsCountAggregateInputType | true
    }

  export interface TransactionsFormsDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['TransactionsForms'], meta: { name: 'TransactionsForms' } }
    /**
     * Find zero or one TransactionsForms that matches the filter.
     * @param {TransactionsFormsFindUniqueArgs} args - Arguments to find a TransactionsForms
     * @example
     * // Get one TransactionsForms
     * const transactionsForms = await prisma.transactionsForms.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends TransactionsFormsFindUniqueArgs>(args: SelectSubset<T, TransactionsFormsFindUniqueArgs<ExtArgs>>): Prisma__TransactionsFormsClient<$Result.GetResult<Prisma.$TransactionsFormsPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one TransactionsForms that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {TransactionsFormsFindUniqueOrThrowArgs} args - Arguments to find a TransactionsForms
     * @example
     * // Get one TransactionsForms
     * const transactionsForms = await prisma.transactionsForms.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends TransactionsFormsFindUniqueOrThrowArgs>(args: SelectSubset<T, TransactionsFormsFindUniqueOrThrowArgs<ExtArgs>>): Prisma__TransactionsFormsClient<$Result.GetResult<Prisma.$TransactionsFormsPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first TransactionsForms that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TransactionsFormsFindFirstArgs} args - Arguments to find a TransactionsForms
     * @example
     * // Get one TransactionsForms
     * const transactionsForms = await prisma.transactionsForms.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends TransactionsFormsFindFirstArgs>(args?: SelectSubset<T, TransactionsFormsFindFirstArgs<ExtArgs>>): Prisma__TransactionsFormsClient<$Result.GetResult<Prisma.$TransactionsFormsPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first TransactionsForms that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TransactionsFormsFindFirstOrThrowArgs} args - Arguments to find a TransactionsForms
     * @example
     * // Get one TransactionsForms
     * const transactionsForms = await prisma.transactionsForms.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends TransactionsFormsFindFirstOrThrowArgs>(args?: SelectSubset<T, TransactionsFormsFindFirstOrThrowArgs<ExtArgs>>): Prisma__TransactionsFormsClient<$Result.GetResult<Prisma.$TransactionsFormsPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more TransactionsForms that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TransactionsFormsFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all TransactionsForms
     * const transactionsForms = await prisma.transactionsForms.findMany()
     * 
     * // Get first 10 TransactionsForms
     * const transactionsForms = await prisma.transactionsForms.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const transactionsFormsWithIdOnly = await prisma.transactionsForms.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends TransactionsFormsFindManyArgs>(args?: SelectSubset<T, TransactionsFormsFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TransactionsFormsPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a TransactionsForms.
     * @param {TransactionsFormsCreateArgs} args - Arguments to create a TransactionsForms.
     * @example
     * // Create one TransactionsForms
     * const TransactionsForms = await prisma.transactionsForms.create({
     *   data: {
     *     // ... data to create a TransactionsForms
     *   }
     * })
     * 
     */
    create<T extends TransactionsFormsCreateArgs>(args: SelectSubset<T, TransactionsFormsCreateArgs<ExtArgs>>): Prisma__TransactionsFormsClient<$Result.GetResult<Prisma.$TransactionsFormsPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many TransactionsForms.
     * @param {TransactionsFormsCreateManyArgs} args - Arguments to create many TransactionsForms.
     * @example
     * // Create many TransactionsForms
     * const transactionsForms = await prisma.transactionsForms.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends TransactionsFormsCreateManyArgs>(args?: SelectSubset<T, TransactionsFormsCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many TransactionsForms and returns the data saved in the database.
     * @param {TransactionsFormsCreateManyAndReturnArgs} args - Arguments to create many TransactionsForms.
     * @example
     * // Create many TransactionsForms
     * const transactionsForms = await prisma.transactionsForms.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many TransactionsForms and only return the `id`
     * const transactionsFormsWithIdOnly = await prisma.transactionsForms.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends TransactionsFormsCreateManyAndReturnArgs>(args?: SelectSubset<T, TransactionsFormsCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TransactionsFormsPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a TransactionsForms.
     * @param {TransactionsFormsDeleteArgs} args - Arguments to delete one TransactionsForms.
     * @example
     * // Delete one TransactionsForms
     * const TransactionsForms = await prisma.transactionsForms.delete({
     *   where: {
     *     // ... filter to delete one TransactionsForms
     *   }
     * })
     * 
     */
    delete<T extends TransactionsFormsDeleteArgs>(args: SelectSubset<T, TransactionsFormsDeleteArgs<ExtArgs>>): Prisma__TransactionsFormsClient<$Result.GetResult<Prisma.$TransactionsFormsPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one TransactionsForms.
     * @param {TransactionsFormsUpdateArgs} args - Arguments to update one TransactionsForms.
     * @example
     * // Update one TransactionsForms
     * const transactionsForms = await prisma.transactionsForms.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends TransactionsFormsUpdateArgs>(args: SelectSubset<T, TransactionsFormsUpdateArgs<ExtArgs>>): Prisma__TransactionsFormsClient<$Result.GetResult<Prisma.$TransactionsFormsPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more TransactionsForms.
     * @param {TransactionsFormsDeleteManyArgs} args - Arguments to filter TransactionsForms to delete.
     * @example
     * // Delete a few TransactionsForms
     * const { count } = await prisma.transactionsForms.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends TransactionsFormsDeleteManyArgs>(args?: SelectSubset<T, TransactionsFormsDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more TransactionsForms.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TransactionsFormsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many TransactionsForms
     * const transactionsForms = await prisma.transactionsForms.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends TransactionsFormsUpdateManyArgs>(args: SelectSubset<T, TransactionsFormsUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one TransactionsForms.
     * @param {TransactionsFormsUpsertArgs} args - Arguments to update or create a TransactionsForms.
     * @example
     * // Update or create a TransactionsForms
     * const transactionsForms = await prisma.transactionsForms.upsert({
     *   create: {
     *     // ... data to create a TransactionsForms
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the TransactionsForms we want to update
     *   }
     * })
     */
    upsert<T extends TransactionsFormsUpsertArgs>(args: SelectSubset<T, TransactionsFormsUpsertArgs<ExtArgs>>): Prisma__TransactionsFormsClient<$Result.GetResult<Prisma.$TransactionsFormsPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of TransactionsForms.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TransactionsFormsCountArgs} args - Arguments to filter TransactionsForms to count.
     * @example
     * // Count the number of TransactionsForms
     * const count = await prisma.transactionsForms.count({
     *   where: {
     *     // ... the filter for the TransactionsForms we want to count
     *   }
     * })
    **/
    count<T extends TransactionsFormsCountArgs>(
      args?: Subset<T, TransactionsFormsCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TransactionsFormsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a TransactionsForms.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TransactionsFormsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TransactionsFormsAggregateArgs>(args: Subset<T, TransactionsFormsAggregateArgs>): Prisma.PrismaPromise<GetTransactionsFormsAggregateType<T>>

    /**
     * Group by TransactionsForms.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TransactionsFormsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends TransactionsFormsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: TransactionsFormsGroupByArgs['orderBy'] }
        : { orderBy?: TransactionsFormsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, TransactionsFormsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTransactionsFormsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the TransactionsForms model
   */
  readonly fields: TransactionsFormsFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for TransactionsForms.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__TransactionsFormsClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    holder<T extends HolderDefaultArgs<ExtArgs> = {}>(args?: Subset<T, HolderDefaultArgs<ExtArgs>>): Prisma__HolderClient<$Result.GetResult<Prisma.$HolderPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    FinancialTransactions<T extends TransactionsForms$FinancialTransactionsArgs<ExtArgs> = {}>(args?: Subset<T, TransactionsForms$FinancialTransactionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FinancialTransactionPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the TransactionsForms model
   */ 
  interface TransactionsFormsFieldRefs {
    readonly id: FieldRef<"TransactionsForms", 'Int'>
    readonly name: FieldRef<"TransactionsForms", 'String'>
    readonly type: FieldRef<"TransactionsForms", 'Int'>
    readonly holderId: FieldRef<"TransactionsForms", 'Int'>
    readonly createdAt: FieldRef<"TransactionsForms", 'DateTime'>
    readonly updatedAt: FieldRef<"TransactionsForms", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * TransactionsForms findUnique
   */
  export type TransactionsFormsFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TransactionsForms
     */
    select?: TransactionsFormsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TransactionsFormsInclude<ExtArgs> | null
    /**
     * Filter, which TransactionsForms to fetch.
     */
    where: TransactionsFormsWhereUniqueInput
  }

  /**
   * TransactionsForms findUniqueOrThrow
   */
  export type TransactionsFormsFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TransactionsForms
     */
    select?: TransactionsFormsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TransactionsFormsInclude<ExtArgs> | null
    /**
     * Filter, which TransactionsForms to fetch.
     */
    where: TransactionsFormsWhereUniqueInput
  }

  /**
   * TransactionsForms findFirst
   */
  export type TransactionsFormsFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TransactionsForms
     */
    select?: TransactionsFormsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TransactionsFormsInclude<ExtArgs> | null
    /**
     * Filter, which TransactionsForms to fetch.
     */
    where?: TransactionsFormsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TransactionsForms to fetch.
     */
    orderBy?: TransactionsFormsOrderByWithRelationInput | TransactionsFormsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for TransactionsForms.
     */
    cursor?: TransactionsFormsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TransactionsForms from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TransactionsForms.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of TransactionsForms.
     */
    distinct?: TransactionsFormsScalarFieldEnum | TransactionsFormsScalarFieldEnum[]
  }

  /**
   * TransactionsForms findFirstOrThrow
   */
  export type TransactionsFormsFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TransactionsForms
     */
    select?: TransactionsFormsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TransactionsFormsInclude<ExtArgs> | null
    /**
     * Filter, which TransactionsForms to fetch.
     */
    where?: TransactionsFormsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TransactionsForms to fetch.
     */
    orderBy?: TransactionsFormsOrderByWithRelationInput | TransactionsFormsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for TransactionsForms.
     */
    cursor?: TransactionsFormsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TransactionsForms from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TransactionsForms.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of TransactionsForms.
     */
    distinct?: TransactionsFormsScalarFieldEnum | TransactionsFormsScalarFieldEnum[]
  }

  /**
   * TransactionsForms findMany
   */
  export type TransactionsFormsFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TransactionsForms
     */
    select?: TransactionsFormsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TransactionsFormsInclude<ExtArgs> | null
    /**
     * Filter, which TransactionsForms to fetch.
     */
    where?: TransactionsFormsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TransactionsForms to fetch.
     */
    orderBy?: TransactionsFormsOrderByWithRelationInput | TransactionsFormsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing TransactionsForms.
     */
    cursor?: TransactionsFormsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TransactionsForms from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TransactionsForms.
     */
    skip?: number
    distinct?: TransactionsFormsScalarFieldEnum | TransactionsFormsScalarFieldEnum[]
  }

  /**
   * TransactionsForms create
   */
  export type TransactionsFormsCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TransactionsForms
     */
    select?: TransactionsFormsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TransactionsFormsInclude<ExtArgs> | null
    /**
     * The data needed to create a TransactionsForms.
     */
    data: XOR<TransactionsFormsCreateInput, TransactionsFormsUncheckedCreateInput>
  }

  /**
   * TransactionsForms createMany
   */
  export type TransactionsFormsCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many TransactionsForms.
     */
    data: TransactionsFormsCreateManyInput | TransactionsFormsCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * TransactionsForms createManyAndReturn
   */
  export type TransactionsFormsCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TransactionsForms
     */
    select?: TransactionsFormsSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many TransactionsForms.
     */
    data: TransactionsFormsCreateManyInput | TransactionsFormsCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TransactionsFormsIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * TransactionsForms update
   */
  export type TransactionsFormsUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TransactionsForms
     */
    select?: TransactionsFormsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TransactionsFormsInclude<ExtArgs> | null
    /**
     * The data needed to update a TransactionsForms.
     */
    data: XOR<TransactionsFormsUpdateInput, TransactionsFormsUncheckedUpdateInput>
    /**
     * Choose, which TransactionsForms to update.
     */
    where: TransactionsFormsWhereUniqueInput
  }

  /**
   * TransactionsForms updateMany
   */
  export type TransactionsFormsUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update TransactionsForms.
     */
    data: XOR<TransactionsFormsUpdateManyMutationInput, TransactionsFormsUncheckedUpdateManyInput>
    /**
     * Filter which TransactionsForms to update
     */
    where?: TransactionsFormsWhereInput
  }

  /**
   * TransactionsForms upsert
   */
  export type TransactionsFormsUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TransactionsForms
     */
    select?: TransactionsFormsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TransactionsFormsInclude<ExtArgs> | null
    /**
     * The filter to search for the TransactionsForms to update in case it exists.
     */
    where: TransactionsFormsWhereUniqueInput
    /**
     * In case the TransactionsForms found by the `where` argument doesn't exist, create a new TransactionsForms with this data.
     */
    create: XOR<TransactionsFormsCreateInput, TransactionsFormsUncheckedCreateInput>
    /**
     * In case the TransactionsForms was found with the provided `where` argument, update it with this data.
     */
    update: XOR<TransactionsFormsUpdateInput, TransactionsFormsUncheckedUpdateInput>
  }

  /**
   * TransactionsForms delete
   */
  export type TransactionsFormsDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TransactionsForms
     */
    select?: TransactionsFormsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TransactionsFormsInclude<ExtArgs> | null
    /**
     * Filter which TransactionsForms to delete.
     */
    where: TransactionsFormsWhereUniqueInput
  }

  /**
   * TransactionsForms deleteMany
   */
  export type TransactionsFormsDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which TransactionsForms to delete
     */
    where?: TransactionsFormsWhereInput
  }

  /**
   * TransactionsForms.FinancialTransactions
   */
  export type TransactionsForms$FinancialTransactionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FinancialTransaction
     */
    select?: FinancialTransactionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FinancialTransactionInclude<ExtArgs> | null
    where?: FinancialTransactionWhereInput
    orderBy?: FinancialTransactionOrderByWithRelationInput | FinancialTransactionOrderByWithRelationInput[]
    cursor?: FinancialTransactionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: FinancialTransactionScalarFieldEnum | FinancialTransactionScalarFieldEnum[]
  }

  /**
   * TransactionsForms without action
   */
  export type TransactionsFormsDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TransactionsForms
     */
    select?: TransactionsFormsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TransactionsFormsInclude<ExtArgs> | null
  }


  /**
   * Model FinancialTransaction
   */

  export type AggregateFinancialTransaction = {
    _count: FinancialTransactionCountAggregateOutputType | null
    _avg: FinancialTransactionAvgAggregateOutputType | null
    _sum: FinancialTransactionSumAggregateOutputType | null
    _min: FinancialTransactionMinAggregateOutputType | null
    _max: FinancialTransactionMaxAggregateOutputType | null
  }

  export type FinancialTransactionAvgAggregateOutputType = {
    id: number | null
    value: number | null
    userId: number | null
    transactionsFormsId: number | null
    categoryId: number | null
    parcelId: number | null
    accountId: number | null
    typeId: number | null
  }

  export type FinancialTransactionSumAggregateOutputType = {
    id: number | null
    value: number | null
    userId: number | null
    transactionsFormsId: number | null
    categoryId: number | null
    parcelId: number | null
    accountId: number | null
    typeId: number | null
  }

  export type FinancialTransactionMinAggregateOutputType = {
    id: number | null
    description: string | null
    value: number | null
    userId: number | null
    transactionsFormsId: number | null
    categoryId: number | null
    parcelId: number | null
    accountId: number | null
    typeId: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type FinancialTransactionMaxAggregateOutputType = {
    id: number | null
    description: string | null
    value: number | null
    userId: number | null
    transactionsFormsId: number | null
    categoryId: number | null
    parcelId: number | null
    accountId: number | null
    typeId: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type FinancialTransactionCountAggregateOutputType = {
    id: number
    description: number
    value: number
    userId: number
    transactionsFormsId: number
    categoryId: number
    parcelId: number
    accountId: number
    typeId: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type FinancialTransactionAvgAggregateInputType = {
    id?: true
    value?: true
    userId?: true
    transactionsFormsId?: true
    categoryId?: true
    parcelId?: true
    accountId?: true
    typeId?: true
  }

  export type FinancialTransactionSumAggregateInputType = {
    id?: true
    value?: true
    userId?: true
    transactionsFormsId?: true
    categoryId?: true
    parcelId?: true
    accountId?: true
    typeId?: true
  }

  export type FinancialTransactionMinAggregateInputType = {
    id?: true
    description?: true
    value?: true
    userId?: true
    transactionsFormsId?: true
    categoryId?: true
    parcelId?: true
    accountId?: true
    typeId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type FinancialTransactionMaxAggregateInputType = {
    id?: true
    description?: true
    value?: true
    userId?: true
    transactionsFormsId?: true
    categoryId?: true
    parcelId?: true
    accountId?: true
    typeId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type FinancialTransactionCountAggregateInputType = {
    id?: true
    description?: true
    value?: true
    userId?: true
    transactionsFormsId?: true
    categoryId?: true
    parcelId?: true
    accountId?: true
    typeId?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type FinancialTransactionAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which FinancialTransaction to aggregate.
     */
    where?: FinancialTransactionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FinancialTransactions to fetch.
     */
    orderBy?: FinancialTransactionOrderByWithRelationInput | FinancialTransactionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: FinancialTransactionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FinancialTransactions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FinancialTransactions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned FinancialTransactions
    **/
    _count?: true | FinancialTransactionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: FinancialTransactionAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: FinancialTransactionSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: FinancialTransactionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: FinancialTransactionMaxAggregateInputType
  }

  export type GetFinancialTransactionAggregateType<T extends FinancialTransactionAggregateArgs> = {
        [P in keyof T & keyof AggregateFinancialTransaction]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateFinancialTransaction[P]>
      : GetScalarType<T[P], AggregateFinancialTransaction[P]>
  }




  export type FinancialTransactionGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: FinancialTransactionWhereInput
    orderBy?: FinancialTransactionOrderByWithAggregationInput | FinancialTransactionOrderByWithAggregationInput[]
    by: FinancialTransactionScalarFieldEnum[] | FinancialTransactionScalarFieldEnum
    having?: FinancialTransactionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: FinancialTransactionCountAggregateInputType | true
    _avg?: FinancialTransactionAvgAggregateInputType
    _sum?: FinancialTransactionSumAggregateInputType
    _min?: FinancialTransactionMinAggregateInputType
    _max?: FinancialTransactionMaxAggregateInputType
  }

  export type FinancialTransactionGroupByOutputType = {
    id: number
    description: string
    value: number
    userId: number
    transactionsFormsId: number
    categoryId: number
    parcelId: number
    accountId: number
    typeId: number
    createdAt: Date
    updatedAt: Date
    _count: FinancialTransactionCountAggregateOutputType | null
    _avg: FinancialTransactionAvgAggregateOutputType | null
    _sum: FinancialTransactionSumAggregateOutputType | null
    _min: FinancialTransactionMinAggregateOutputType | null
    _max: FinancialTransactionMaxAggregateOutputType | null
  }

  type GetFinancialTransactionGroupByPayload<T extends FinancialTransactionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<FinancialTransactionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof FinancialTransactionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], FinancialTransactionGroupByOutputType[P]>
            : GetScalarType<T[P], FinancialTransactionGroupByOutputType[P]>
        }
      >
    >


  export type FinancialTransactionSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    description?: boolean
    value?: boolean
    userId?: boolean
    transactionsFormsId?: boolean
    categoryId?: boolean
    parcelId?: boolean
    accountId?: boolean
    typeId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    typeTransaction?: boolean | TransactionTypeDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
    category?: boolean | AccountPlanDefaultArgs<ExtArgs>
    account?: boolean | AccountDefaultArgs<ExtArgs>
    parcel?: boolean | ParcelDefaultArgs<ExtArgs>
    transactionsForm?: boolean | TransactionsFormsDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["financialTransaction"]>

  export type FinancialTransactionSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    description?: boolean
    value?: boolean
    userId?: boolean
    transactionsFormsId?: boolean
    categoryId?: boolean
    parcelId?: boolean
    accountId?: boolean
    typeId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    typeTransaction?: boolean | TransactionTypeDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
    category?: boolean | AccountPlanDefaultArgs<ExtArgs>
    account?: boolean | AccountDefaultArgs<ExtArgs>
    parcel?: boolean | ParcelDefaultArgs<ExtArgs>
    transactionsForm?: boolean | TransactionsFormsDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["financialTransaction"]>

  export type FinancialTransactionSelectScalar = {
    id?: boolean
    description?: boolean
    value?: boolean
    userId?: boolean
    transactionsFormsId?: boolean
    categoryId?: boolean
    parcelId?: boolean
    accountId?: boolean
    typeId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type FinancialTransactionInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    typeTransaction?: boolean | TransactionTypeDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
    category?: boolean | AccountPlanDefaultArgs<ExtArgs>
    account?: boolean | AccountDefaultArgs<ExtArgs>
    parcel?: boolean | ParcelDefaultArgs<ExtArgs>
    transactionsForm?: boolean | TransactionsFormsDefaultArgs<ExtArgs>
  }
  export type FinancialTransactionIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    typeTransaction?: boolean | TransactionTypeDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
    category?: boolean | AccountPlanDefaultArgs<ExtArgs>
    account?: boolean | AccountDefaultArgs<ExtArgs>
    parcel?: boolean | ParcelDefaultArgs<ExtArgs>
    transactionsForm?: boolean | TransactionsFormsDefaultArgs<ExtArgs>
  }

  export type $FinancialTransactionPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "FinancialTransaction"
    objects: {
      typeTransaction: Prisma.$TransactionTypePayload<ExtArgs>
      user: Prisma.$UserPayload<ExtArgs>
      category: Prisma.$AccountPlanPayload<ExtArgs>
      account: Prisma.$AccountPayload<ExtArgs>
      parcel: Prisma.$ParcelPayload<ExtArgs>
      transactionsForm: Prisma.$TransactionsFormsPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      description: string
      value: number
      userId: number
      transactionsFormsId: number
      categoryId: number
      parcelId: number
      accountId: number
      typeId: number
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["financialTransaction"]>
    composites: {}
  }

  type FinancialTransactionGetPayload<S extends boolean | null | undefined | FinancialTransactionDefaultArgs> = $Result.GetResult<Prisma.$FinancialTransactionPayload, S>

  type FinancialTransactionCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<FinancialTransactionFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: FinancialTransactionCountAggregateInputType | true
    }

  export interface FinancialTransactionDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['FinancialTransaction'], meta: { name: 'FinancialTransaction' } }
    /**
     * Find zero or one FinancialTransaction that matches the filter.
     * @param {FinancialTransactionFindUniqueArgs} args - Arguments to find a FinancialTransaction
     * @example
     * // Get one FinancialTransaction
     * const financialTransaction = await prisma.financialTransaction.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends FinancialTransactionFindUniqueArgs>(args: SelectSubset<T, FinancialTransactionFindUniqueArgs<ExtArgs>>): Prisma__FinancialTransactionClient<$Result.GetResult<Prisma.$FinancialTransactionPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one FinancialTransaction that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {FinancialTransactionFindUniqueOrThrowArgs} args - Arguments to find a FinancialTransaction
     * @example
     * // Get one FinancialTransaction
     * const financialTransaction = await prisma.financialTransaction.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends FinancialTransactionFindUniqueOrThrowArgs>(args: SelectSubset<T, FinancialTransactionFindUniqueOrThrowArgs<ExtArgs>>): Prisma__FinancialTransactionClient<$Result.GetResult<Prisma.$FinancialTransactionPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first FinancialTransaction that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FinancialTransactionFindFirstArgs} args - Arguments to find a FinancialTransaction
     * @example
     * // Get one FinancialTransaction
     * const financialTransaction = await prisma.financialTransaction.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends FinancialTransactionFindFirstArgs>(args?: SelectSubset<T, FinancialTransactionFindFirstArgs<ExtArgs>>): Prisma__FinancialTransactionClient<$Result.GetResult<Prisma.$FinancialTransactionPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first FinancialTransaction that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FinancialTransactionFindFirstOrThrowArgs} args - Arguments to find a FinancialTransaction
     * @example
     * // Get one FinancialTransaction
     * const financialTransaction = await prisma.financialTransaction.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends FinancialTransactionFindFirstOrThrowArgs>(args?: SelectSubset<T, FinancialTransactionFindFirstOrThrowArgs<ExtArgs>>): Prisma__FinancialTransactionClient<$Result.GetResult<Prisma.$FinancialTransactionPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more FinancialTransactions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FinancialTransactionFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all FinancialTransactions
     * const financialTransactions = await prisma.financialTransaction.findMany()
     * 
     * // Get first 10 FinancialTransactions
     * const financialTransactions = await prisma.financialTransaction.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const financialTransactionWithIdOnly = await prisma.financialTransaction.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends FinancialTransactionFindManyArgs>(args?: SelectSubset<T, FinancialTransactionFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FinancialTransactionPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a FinancialTransaction.
     * @param {FinancialTransactionCreateArgs} args - Arguments to create a FinancialTransaction.
     * @example
     * // Create one FinancialTransaction
     * const FinancialTransaction = await prisma.financialTransaction.create({
     *   data: {
     *     // ... data to create a FinancialTransaction
     *   }
     * })
     * 
     */
    create<T extends FinancialTransactionCreateArgs>(args: SelectSubset<T, FinancialTransactionCreateArgs<ExtArgs>>): Prisma__FinancialTransactionClient<$Result.GetResult<Prisma.$FinancialTransactionPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many FinancialTransactions.
     * @param {FinancialTransactionCreateManyArgs} args - Arguments to create many FinancialTransactions.
     * @example
     * // Create many FinancialTransactions
     * const financialTransaction = await prisma.financialTransaction.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends FinancialTransactionCreateManyArgs>(args?: SelectSubset<T, FinancialTransactionCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many FinancialTransactions and returns the data saved in the database.
     * @param {FinancialTransactionCreateManyAndReturnArgs} args - Arguments to create many FinancialTransactions.
     * @example
     * // Create many FinancialTransactions
     * const financialTransaction = await prisma.financialTransaction.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many FinancialTransactions and only return the `id`
     * const financialTransactionWithIdOnly = await prisma.financialTransaction.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends FinancialTransactionCreateManyAndReturnArgs>(args?: SelectSubset<T, FinancialTransactionCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FinancialTransactionPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a FinancialTransaction.
     * @param {FinancialTransactionDeleteArgs} args - Arguments to delete one FinancialTransaction.
     * @example
     * // Delete one FinancialTransaction
     * const FinancialTransaction = await prisma.financialTransaction.delete({
     *   where: {
     *     // ... filter to delete one FinancialTransaction
     *   }
     * })
     * 
     */
    delete<T extends FinancialTransactionDeleteArgs>(args: SelectSubset<T, FinancialTransactionDeleteArgs<ExtArgs>>): Prisma__FinancialTransactionClient<$Result.GetResult<Prisma.$FinancialTransactionPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one FinancialTransaction.
     * @param {FinancialTransactionUpdateArgs} args - Arguments to update one FinancialTransaction.
     * @example
     * // Update one FinancialTransaction
     * const financialTransaction = await prisma.financialTransaction.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends FinancialTransactionUpdateArgs>(args: SelectSubset<T, FinancialTransactionUpdateArgs<ExtArgs>>): Prisma__FinancialTransactionClient<$Result.GetResult<Prisma.$FinancialTransactionPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more FinancialTransactions.
     * @param {FinancialTransactionDeleteManyArgs} args - Arguments to filter FinancialTransactions to delete.
     * @example
     * // Delete a few FinancialTransactions
     * const { count } = await prisma.financialTransaction.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends FinancialTransactionDeleteManyArgs>(args?: SelectSubset<T, FinancialTransactionDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more FinancialTransactions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FinancialTransactionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many FinancialTransactions
     * const financialTransaction = await prisma.financialTransaction.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends FinancialTransactionUpdateManyArgs>(args: SelectSubset<T, FinancialTransactionUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one FinancialTransaction.
     * @param {FinancialTransactionUpsertArgs} args - Arguments to update or create a FinancialTransaction.
     * @example
     * // Update or create a FinancialTransaction
     * const financialTransaction = await prisma.financialTransaction.upsert({
     *   create: {
     *     // ... data to create a FinancialTransaction
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the FinancialTransaction we want to update
     *   }
     * })
     */
    upsert<T extends FinancialTransactionUpsertArgs>(args: SelectSubset<T, FinancialTransactionUpsertArgs<ExtArgs>>): Prisma__FinancialTransactionClient<$Result.GetResult<Prisma.$FinancialTransactionPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of FinancialTransactions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FinancialTransactionCountArgs} args - Arguments to filter FinancialTransactions to count.
     * @example
     * // Count the number of FinancialTransactions
     * const count = await prisma.financialTransaction.count({
     *   where: {
     *     // ... the filter for the FinancialTransactions we want to count
     *   }
     * })
    **/
    count<T extends FinancialTransactionCountArgs>(
      args?: Subset<T, FinancialTransactionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], FinancialTransactionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a FinancialTransaction.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FinancialTransactionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends FinancialTransactionAggregateArgs>(args: Subset<T, FinancialTransactionAggregateArgs>): Prisma.PrismaPromise<GetFinancialTransactionAggregateType<T>>

    /**
     * Group by FinancialTransaction.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FinancialTransactionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends FinancialTransactionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: FinancialTransactionGroupByArgs['orderBy'] }
        : { orderBy?: FinancialTransactionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, FinancialTransactionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetFinancialTransactionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the FinancialTransaction model
   */
  readonly fields: FinancialTransactionFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for FinancialTransaction.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__FinancialTransactionClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    typeTransaction<T extends TransactionTypeDefaultArgs<ExtArgs> = {}>(args?: Subset<T, TransactionTypeDefaultArgs<ExtArgs>>): Prisma__TransactionTypeClient<$Result.GetResult<Prisma.$TransactionTypePayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    category<T extends AccountPlanDefaultArgs<ExtArgs> = {}>(args?: Subset<T, AccountPlanDefaultArgs<ExtArgs>>): Prisma__AccountPlanClient<$Result.GetResult<Prisma.$AccountPlanPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    account<T extends AccountDefaultArgs<ExtArgs> = {}>(args?: Subset<T, AccountDefaultArgs<ExtArgs>>): Prisma__AccountClient<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    parcel<T extends ParcelDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ParcelDefaultArgs<ExtArgs>>): Prisma__ParcelClient<$Result.GetResult<Prisma.$ParcelPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    transactionsForm<T extends TransactionsFormsDefaultArgs<ExtArgs> = {}>(args?: Subset<T, TransactionsFormsDefaultArgs<ExtArgs>>): Prisma__TransactionsFormsClient<$Result.GetResult<Prisma.$TransactionsFormsPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the FinancialTransaction model
   */ 
  interface FinancialTransactionFieldRefs {
    readonly id: FieldRef<"FinancialTransaction", 'Int'>
    readonly description: FieldRef<"FinancialTransaction", 'String'>
    readonly value: FieldRef<"FinancialTransaction", 'Float'>
    readonly userId: FieldRef<"FinancialTransaction", 'Int'>
    readonly transactionsFormsId: FieldRef<"FinancialTransaction", 'Int'>
    readonly categoryId: FieldRef<"FinancialTransaction", 'Int'>
    readonly parcelId: FieldRef<"FinancialTransaction", 'Int'>
    readonly accountId: FieldRef<"FinancialTransaction", 'Int'>
    readonly typeId: FieldRef<"FinancialTransaction", 'Int'>
    readonly createdAt: FieldRef<"FinancialTransaction", 'DateTime'>
    readonly updatedAt: FieldRef<"FinancialTransaction", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * FinancialTransaction findUnique
   */
  export type FinancialTransactionFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FinancialTransaction
     */
    select?: FinancialTransactionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FinancialTransactionInclude<ExtArgs> | null
    /**
     * Filter, which FinancialTransaction to fetch.
     */
    where: FinancialTransactionWhereUniqueInput
  }

  /**
   * FinancialTransaction findUniqueOrThrow
   */
  export type FinancialTransactionFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FinancialTransaction
     */
    select?: FinancialTransactionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FinancialTransactionInclude<ExtArgs> | null
    /**
     * Filter, which FinancialTransaction to fetch.
     */
    where: FinancialTransactionWhereUniqueInput
  }

  /**
   * FinancialTransaction findFirst
   */
  export type FinancialTransactionFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FinancialTransaction
     */
    select?: FinancialTransactionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FinancialTransactionInclude<ExtArgs> | null
    /**
     * Filter, which FinancialTransaction to fetch.
     */
    where?: FinancialTransactionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FinancialTransactions to fetch.
     */
    orderBy?: FinancialTransactionOrderByWithRelationInput | FinancialTransactionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for FinancialTransactions.
     */
    cursor?: FinancialTransactionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FinancialTransactions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FinancialTransactions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of FinancialTransactions.
     */
    distinct?: FinancialTransactionScalarFieldEnum | FinancialTransactionScalarFieldEnum[]
  }

  /**
   * FinancialTransaction findFirstOrThrow
   */
  export type FinancialTransactionFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FinancialTransaction
     */
    select?: FinancialTransactionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FinancialTransactionInclude<ExtArgs> | null
    /**
     * Filter, which FinancialTransaction to fetch.
     */
    where?: FinancialTransactionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FinancialTransactions to fetch.
     */
    orderBy?: FinancialTransactionOrderByWithRelationInput | FinancialTransactionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for FinancialTransactions.
     */
    cursor?: FinancialTransactionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FinancialTransactions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FinancialTransactions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of FinancialTransactions.
     */
    distinct?: FinancialTransactionScalarFieldEnum | FinancialTransactionScalarFieldEnum[]
  }

  /**
   * FinancialTransaction findMany
   */
  export type FinancialTransactionFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FinancialTransaction
     */
    select?: FinancialTransactionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FinancialTransactionInclude<ExtArgs> | null
    /**
     * Filter, which FinancialTransactions to fetch.
     */
    where?: FinancialTransactionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FinancialTransactions to fetch.
     */
    orderBy?: FinancialTransactionOrderByWithRelationInput | FinancialTransactionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing FinancialTransactions.
     */
    cursor?: FinancialTransactionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FinancialTransactions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FinancialTransactions.
     */
    skip?: number
    distinct?: FinancialTransactionScalarFieldEnum | FinancialTransactionScalarFieldEnum[]
  }

  /**
   * FinancialTransaction create
   */
  export type FinancialTransactionCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FinancialTransaction
     */
    select?: FinancialTransactionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FinancialTransactionInclude<ExtArgs> | null
    /**
     * The data needed to create a FinancialTransaction.
     */
    data: XOR<FinancialTransactionCreateInput, FinancialTransactionUncheckedCreateInput>
  }

  /**
   * FinancialTransaction createMany
   */
  export type FinancialTransactionCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many FinancialTransactions.
     */
    data: FinancialTransactionCreateManyInput | FinancialTransactionCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * FinancialTransaction createManyAndReturn
   */
  export type FinancialTransactionCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FinancialTransaction
     */
    select?: FinancialTransactionSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many FinancialTransactions.
     */
    data: FinancialTransactionCreateManyInput | FinancialTransactionCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FinancialTransactionIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * FinancialTransaction update
   */
  export type FinancialTransactionUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FinancialTransaction
     */
    select?: FinancialTransactionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FinancialTransactionInclude<ExtArgs> | null
    /**
     * The data needed to update a FinancialTransaction.
     */
    data: XOR<FinancialTransactionUpdateInput, FinancialTransactionUncheckedUpdateInput>
    /**
     * Choose, which FinancialTransaction to update.
     */
    where: FinancialTransactionWhereUniqueInput
  }

  /**
   * FinancialTransaction updateMany
   */
  export type FinancialTransactionUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update FinancialTransactions.
     */
    data: XOR<FinancialTransactionUpdateManyMutationInput, FinancialTransactionUncheckedUpdateManyInput>
    /**
     * Filter which FinancialTransactions to update
     */
    where?: FinancialTransactionWhereInput
  }

  /**
   * FinancialTransaction upsert
   */
  export type FinancialTransactionUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FinancialTransaction
     */
    select?: FinancialTransactionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FinancialTransactionInclude<ExtArgs> | null
    /**
     * The filter to search for the FinancialTransaction to update in case it exists.
     */
    where: FinancialTransactionWhereUniqueInput
    /**
     * In case the FinancialTransaction found by the `where` argument doesn't exist, create a new FinancialTransaction with this data.
     */
    create: XOR<FinancialTransactionCreateInput, FinancialTransactionUncheckedCreateInput>
    /**
     * In case the FinancialTransaction was found with the provided `where` argument, update it with this data.
     */
    update: XOR<FinancialTransactionUpdateInput, FinancialTransactionUncheckedUpdateInput>
  }

  /**
   * FinancialTransaction delete
   */
  export type FinancialTransactionDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FinancialTransaction
     */
    select?: FinancialTransactionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FinancialTransactionInclude<ExtArgs> | null
    /**
     * Filter which FinancialTransaction to delete.
     */
    where: FinancialTransactionWhereUniqueInput
  }

  /**
   * FinancialTransaction deleteMany
   */
  export type FinancialTransactionDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which FinancialTransactions to delete
     */
    where?: FinancialTransactionWhereInput
  }

  /**
   * FinancialTransaction without action
   */
  export type FinancialTransactionDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FinancialTransaction
     */
    select?: FinancialTransactionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FinancialTransactionInclude<ExtArgs> | null
  }


  /**
   * Model TransactionType
   */

  export type AggregateTransactionType = {
    _count: TransactionTypeCountAggregateOutputType | null
    _avg: TransactionTypeAvgAggregateOutputType | null
    _sum: TransactionTypeSumAggregateOutputType | null
    _min: TransactionTypeMinAggregateOutputType | null
    _max: TransactionTypeMaxAggregateOutputType | null
  }

  export type TransactionTypeAvgAggregateOutputType = {
    id: number | null
  }

  export type TransactionTypeSumAggregateOutputType = {
    id: number | null
  }

  export type TransactionTypeMinAggregateOutputType = {
    id: number | null
    name: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type TransactionTypeMaxAggregateOutputType = {
    id: number | null
    name: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type TransactionTypeCountAggregateOutputType = {
    id: number
    name: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type TransactionTypeAvgAggregateInputType = {
    id?: true
  }

  export type TransactionTypeSumAggregateInputType = {
    id?: true
  }

  export type TransactionTypeMinAggregateInputType = {
    id?: true
    name?: true
    createdAt?: true
    updatedAt?: true
  }

  export type TransactionTypeMaxAggregateInputType = {
    id?: true
    name?: true
    createdAt?: true
    updatedAt?: true
  }

  export type TransactionTypeCountAggregateInputType = {
    id?: true
    name?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type TransactionTypeAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which TransactionType to aggregate.
     */
    where?: TransactionTypeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TransactionTypes to fetch.
     */
    orderBy?: TransactionTypeOrderByWithRelationInput | TransactionTypeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: TransactionTypeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TransactionTypes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TransactionTypes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned TransactionTypes
    **/
    _count?: true | TransactionTypeCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: TransactionTypeAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: TransactionTypeSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TransactionTypeMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TransactionTypeMaxAggregateInputType
  }

  export type GetTransactionTypeAggregateType<T extends TransactionTypeAggregateArgs> = {
        [P in keyof T & keyof AggregateTransactionType]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTransactionType[P]>
      : GetScalarType<T[P], AggregateTransactionType[P]>
  }




  export type TransactionTypeGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TransactionTypeWhereInput
    orderBy?: TransactionTypeOrderByWithAggregationInput | TransactionTypeOrderByWithAggregationInput[]
    by: TransactionTypeScalarFieldEnum[] | TransactionTypeScalarFieldEnum
    having?: TransactionTypeScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TransactionTypeCountAggregateInputType | true
    _avg?: TransactionTypeAvgAggregateInputType
    _sum?: TransactionTypeSumAggregateInputType
    _min?: TransactionTypeMinAggregateInputType
    _max?: TransactionTypeMaxAggregateInputType
  }

  export type TransactionTypeGroupByOutputType = {
    id: number
    name: string
    createdAt: Date
    updatedAt: Date
    _count: TransactionTypeCountAggregateOutputType | null
    _avg: TransactionTypeAvgAggregateOutputType | null
    _sum: TransactionTypeSumAggregateOutputType | null
    _min: TransactionTypeMinAggregateOutputType | null
    _max: TransactionTypeMaxAggregateOutputType | null
  }

  type GetTransactionTypeGroupByPayload<T extends TransactionTypeGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<TransactionTypeGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TransactionTypeGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TransactionTypeGroupByOutputType[P]>
            : GetScalarType<T[P], TransactionTypeGroupByOutputType[P]>
        }
      >
    >


  export type TransactionTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    financialTransactions?: boolean | TransactionType$financialTransactionsArgs<ExtArgs>
    _count?: boolean | TransactionTypeCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["transactionType"]>

  export type TransactionTypeSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["transactionType"]>

  export type TransactionTypeSelectScalar = {
    id?: boolean
    name?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type TransactionTypeInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    financialTransactions?: boolean | TransactionType$financialTransactionsArgs<ExtArgs>
    _count?: boolean | TransactionTypeCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type TransactionTypeIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $TransactionTypePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "TransactionType"
    objects: {
      financialTransactions: Prisma.$FinancialTransactionPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      name: string
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["transactionType"]>
    composites: {}
  }

  type TransactionTypeGetPayload<S extends boolean | null | undefined | TransactionTypeDefaultArgs> = $Result.GetResult<Prisma.$TransactionTypePayload, S>

  type TransactionTypeCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<TransactionTypeFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: TransactionTypeCountAggregateInputType | true
    }

  export interface TransactionTypeDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['TransactionType'], meta: { name: 'TransactionType' } }
    /**
     * Find zero or one TransactionType that matches the filter.
     * @param {TransactionTypeFindUniqueArgs} args - Arguments to find a TransactionType
     * @example
     * // Get one TransactionType
     * const transactionType = await prisma.transactionType.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends TransactionTypeFindUniqueArgs>(args: SelectSubset<T, TransactionTypeFindUniqueArgs<ExtArgs>>): Prisma__TransactionTypeClient<$Result.GetResult<Prisma.$TransactionTypePayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one TransactionType that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {TransactionTypeFindUniqueOrThrowArgs} args - Arguments to find a TransactionType
     * @example
     * // Get one TransactionType
     * const transactionType = await prisma.transactionType.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends TransactionTypeFindUniqueOrThrowArgs>(args: SelectSubset<T, TransactionTypeFindUniqueOrThrowArgs<ExtArgs>>): Prisma__TransactionTypeClient<$Result.GetResult<Prisma.$TransactionTypePayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first TransactionType that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TransactionTypeFindFirstArgs} args - Arguments to find a TransactionType
     * @example
     * // Get one TransactionType
     * const transactionType = await prisma.transactionType.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends TransactionTypeFindFirstArgs>(args?: SelectSubset<T, TransactionTypeFindFirstArgs<ExtArgs>>): Prisma__TransactionTypeClient<$Result.GetResult<Prisma.$TransactionTypePayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first TransactionType that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TransactionTypeFindFirstOrThrowArgs} args - Arguments to find a TransactionType
     * @example
     * // Get one TransactionType
     * const transactionType = await prisma.transactionType.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends TransactionTypeFindFirstOrThrowArgs>(args?: SelectSubset<T, TransactionTypeFindFirstOrThrowArgs<ExtArgs>>): Prisma__TransactionTypeClient<$Result.GetResult<Prisma.$TransactionTypePayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more TransactionTypes that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TransactionTypeFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all TransactionTypes
     * const transactionTypes = await prisma.transactionType.findMany()
     * 
     * // Get first 10 TransactionTypes
     * const transactionTypes = await prisma.transactionType.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const transactionTypeWithIdOnly = await prisma.transactionType.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends TransactionTypeFindManyArgs>(args?: SelectSubset<T, TransactionTypeFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TransactionTypePayload<ExtArgs>, T, "findMany">>

    /**
     * Create a TransactionType.
     * @param {TransactionTypeCreateArgs} args - Arguments to create a TransactionType.
     * @example
     * // Create one TransactionType
     * const TransactionType = await prisma.transactionType.create({
     *   data: {
     *     // ... data to create a TransactionType
     *   }
     * })
     * 
     */
    create<T extends TransactionTypeCreateArgs>(args: SelectSubset<T, TransactionTypeCreateArgs<ExtArgs>>): Prisma__TransactionTypeClient<$Result.GetResult<Prisma.$TransactionTypePayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many TransactionTypes.
     * @param {TransactionTypeCreateManyArgs} args - Arguments to create many TransactionTypes.
     * @example
     * // Create many TransactionTypes
     * const transactionType = await prisma.transactionType.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends TransactionTypeCreateManyArgs>(args?: SelectSubset<T, TransactionTypeCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many TransactionTypes and returns the data saved in the database.
     * @param {TransactionTypeCreateManyAndReturnArgs} args - Arguments to create many TransactionTypes.
     * @example
     * // Create many TransactionTypes
     * const transactionType = await prisma.transactionType.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many TransactionTypes and only return the `id`
     * const transactionTypeWithIdOnly = await prisma.transactionType.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends TransactionTypeCreateManyAndReturnArgs>(args?: SelectSubset<T, TransactionTypeCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TransactionTypePayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a TransactionType.
     * @param {TransactionTypeDeleteArgs} args - Arguments to delete one TransactionType.
     * @example
     * // Delete one TransactionType
     * const TransactionType = await prisma.transactionType.delete({
     *   where: {
     *     // ... filter to delete one TransactionType
     *   }
     * })
     * 
     */
    delete<T extends TransactionTypeDeleteArgs>(args: SelectSubset<T, TransactionTypeDeleteArgs<ExtArgs>>): Prisma__TransactionTypeClient<$Result.GetResult<Prisma.$TransactionTypePayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one TransactionType.
     * @param {TransactionTypeUpdateArgs} args - Arguments to update one TransactionType.
     * @example
     * // Update one TransactionType
     * const transactionType = await prisma.transactionType.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends TransactionTypeUpdateArgs>(args: SelectSubset<T, TransactionTypeUpdateArgs<ExtArgs>>): Prisma__TransactionTypeClient<$Result.GetResult<Prisma.$TransactionTypePayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more TransactionTypes.
     * @param {TransactionTypeDeleteManyArgs} args - Arguments to filter TransactionTypes to delete.
     * @example
     * // Delete a few TransactionTypes
     * const { count } = await prisma.transactionType.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends TransactionTypeDeleteManyArgs>(args?: SelectSubset<T, TransactionTypeDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more TransactionTypes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TransactionTypeUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many TransactionTypes
     * const transactionType = await prisma.transactionType.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends TransactionTypeUpdateManyArgs>(args: SelectSubset<T, TransactionTypeUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one TransactionType.
     * @param {TransactionTypeUpsertArgs} args - Arguments to update or create a TransactionType.
     * @example
     * // Update or create a TransactionType
     * const transactionType = await prisma.transactionType.upsert({
     *   create: {
     *     // ... data to create a TransactionType
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the TransactionType we want to update
     *   }
     * })
     */
    upsert<T extends TransactionTypeUpsertArgs>(args: SelectSubset<T, TransactionTypeUpsertArgs<ExtArgs>>): Prisma__TransactionTypeClient<$Result.GetResult<Prisma.$TransactionTypePayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of TransactionTypes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TransactionTypeCountArgs} args - Arguments to filter TransactionTypes to count.
     * @example
     * // Count the number of TransactionTypes
     * const count = await prisma.transactionType.count({
     *   where: {
     *     // ... the filter for the TransactionTypes we want to count
     *   }
     * })
    **/
    count<T extends TransactionTypeCountArgs>(
      args?: Subset<T, TransactionTypeCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TransactionTypeCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a TransactionType.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TransactionTypeAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TransactionTypeAggregateArgs>(args: Subset<T, TransactionTypeAggregateArgs>): Prisma.PrismaPromise<GetTransactionTypeAggregateType<T>>

    /**
     * Group by TransactionType.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TransactionTypeGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends TransactionTypeGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: TransactionTypeGroupByArgs['orderBy'] }
        : { orderBy?: TransactionTypeGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, TransactionTypeGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTransactionTypeGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the TransactionType model
   */
  readonly fields: TransactionTypeFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for TransactionType.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__TransactionTypeClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    financialTransactions<T extends TransactionType$financialTransactionsArgs<ExtArgs> = {}>(args?: Subset<T, TransactionType$financialTransactionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FinancialTransactionPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the TransactionType model
   */ 
  interface TransactionTypeFieldRefs {
    readonly id: FieldRef<"TransactionType", 'Int'>
    readonly name: FieldRef<"TransactionType", 'String'>
    readonly createdAt: FieldRef<"TransactionType", 'DateTime'>
    readonly updatedAt: FieldRef<"TransactionType", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * TransactionType findUnique
   */
  export type TransactionTypeFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TransactionType
     */
    select?: TransactionTypeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TransactionTypeInclude<ExtArgs> | null
    /**
     * Filter, which TransactionType to fetch.
     */
    where: TransactionTypeWhereUniqueInput
  }

  /**
   * TransactionType findUniqueOrThrow
   */
  export type TransactionTypeFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TransactionType
     */
    select?: TransactionTypeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TransactionTypeInclude<ExtArgs> | null
    /**
     * Filter, which TransactionType to fetch.
     */
    where: TransactionTypeWhereUniqueInput
  }

  /**
   * TransactionType findFirst
   */
  export type TransactionTypeFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TransactionType
     */
    select?: TransactionTypeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TransactionTypeInclude<ExtArgs> | null
    /**
     * Filter, which TransactionType to fetch.
     */
    where?: TransactionTypeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TransactionTypes to fetch.
     */
    orderBy?: TransactionTypeOrderByWithRelationInput | TransactionTypeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for TransactionTypes.
     */
    cursor?: TransactionTypeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TransactionTypes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TransactionTypes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of TransactionTypes.
     */
    distinct?: TransactionTypeScalarFieldEnum | TransactionTypeScalarFieldEnum[]
  }

  /**
   * TransactionType findFirstOrThrow
   */
  export type TransactionTypeFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TransactionType
     */
    select?: TransactionTypeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TransactionTypeInclude<ExtArgs> | null
    /**
     * Filter, which TransactionType to fetch.
     */
    where?: TransactionTypeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TransactionTypes to fetch.
     */
    orderBy?: TransactionTypeOrderByWithRelationInput | TransactionTypeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for TransactionTypes.
     */
    cursor?: TransactionTypeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TransactionTypes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TransactionTypes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of TransactionTypes.
     */
    distinct?: TransactionTypeScalarFieldEnum | TransactionTypeScalarFieldEnum[]
  }

  /**
   * TransactionType findMany
   */
  export type TransactionTypeFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TransactionType
     */
    select?: TransactionTypeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TransactionTypeInclude<ExtArgs> | null
    /**
     * Filter, which TransactionTypes to fetch.
     */
    where?: TransactionTypeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TransactionTypes to fetch.
     */
    orderBy?: TransactionTypeOrderByWithRelationInput | TransactionTypeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing TransactionTypes.
     */
    cursor?: TransactionTypeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TransactionTypes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TransactionTypes.
     */
    skip?: number
    distinct?: TransactionTypeScalarFieldEnum | TransactionTypeScalarFieldEnum[]
  }

  /**
   * TransactionType create
   */
  export type TransactionTypeCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TransactionType
     */
    select?: TransactionTypeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TransactionTypeInclude<ExtArgs> | null
    /**
     * The data needed to create a TransactionType.
     */
    data: XOR<TransactionTypeCreateInput, TransactionTypeUncheckedCreateInput>
  }

  /**
   * TransactionType createMany
   */
  export type TransactionTypeCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many TransactionTypes.
     */
    data: TransactionTypeCreateManyInput | TransactionTypeCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * TransactionType createManyAndReturn
   */
  export type TransactionTypeCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TransactionType
     */
    select?: TransactionTypeSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many TransactionTypes.
     */
    data: TransactionTypeCreateManyInput | TransactionTypeCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * TransactionType update
   */
  export type TransactionTypeUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TransactionType
     */
    select?: TransactionTypeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TransactionTypeInclude<ExtArgs> | null
    /**
     * The data needed to update a TransactionType.
     */
    data: XOR<TransactionTypeUpdateInput, TransactionTypeUncheckedUpdateInput>
    /**
     * Choose, which TransactionType to update.
     */
    where: TransactionTypeWhereUniqueInput
  }

  /**
   * TransactionType updateMany
   */
  export type TransactionTypeUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update TransactionTypes.
     */
    data: XOR<TransactionTypeUpdateManyMutationInput, TransactionTypeUncheckedUpdateManyInput>
    /**
     * Filter which TransactionTypes to update
     */
    where?: TransactionTypeWhereInput
  }

  /**
   * TransactionType upsert
   */
  export type TransactionTypeUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TransactionType
     */
    select?: TransactionTypeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TransactionTypeInclude<ExtArgs> | null
    /**
     * The filter to search for the TransactionType to update in case it exists.
     */
    where: TransactionTypeWhereUniqueInput
    /**
     * In case the TransactionType found by the `where` argument doesn't exist, create a new TransactionType with this data.
     */
    create: XOR<TransactionTypeCreateInput, TransactionTypeUncheckedCreateInput>
    /**
     * In case the TransactionType was found with the provided `where` argument, update it with this data.
     */
    update: XOR<TransactionTypeUpdateInput, TransactionTypeUncheckedUpdateInput>
  }

  /**
   * TransactionType delete
   */
  export type TransactionTypeDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TransactionType
     */
    select?: TransactionTypeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TransactionTypeInclude<ExtArgs> | null
    /**
     * Filter which TransactionType to delete.
     */
    where: TransactionTypeWhereUniqueInput
  }

  /**
   * TransactionType deleteMany
   */
  export type TransactionTypeDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which TransactionTypes to delete
     */
    where?: TransactionTypeWhereInput
  }

  /**
   * TransactionType.financialTransactions
   */
  export type TransactionType$financialTransactionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FinancialTransaction
     */
    select?: FinancialTransactionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FinancialTransactionInclude<ExtArgs> | null
    where?: FinancialTransactionWhereInput
    orderBy?: FinancialTransactionOrderByWithRelationInput | FinancialTransactionOrderByWithRelationInput[]
    cursor?: FinancialTransactionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: FinancialTransactionScalarFieldEnum | FinancialTransactionScalarFieldEnum[]
  }

  /**
   * TransactionType without action
   */
  export type TransactionTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TransactionType
     */
    select?: TransactionTypeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TransactionTypeInclude<ExtArgs> | null
  }


  /**
   * Model AccountPlan
   */

  export type AggregateAccountPlan = {
    _count: AccountPlanCountAggregateOutputType | null
    _avg: AccountPlanAvgAggregateOutputType | null
    _sum: AccountPlanSumAggregateOutputType | null
    _min: AccountPlanMinAggregateOutputType | null
    _max: AccountPlanMaxAggregateOutputType | null
  }

  export type AccountPlanAvgAggregateOutputType = {
    id: number | null
    type: number | null
  }

  export type AccountPlanSumAggregateOutputType = {
    id: number | null
    type: number | null
  }

  export type AccountPlanMinAggregateOutputType = {
    id: number | null
    name: string | null
    type: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type AccountPlanMaxAggregateOutputType = {
    id: number | null
    name: string | null
    type: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type AccountPlanCountAggregateOutputType = {
    id: number
    name: number
    type: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type AccountPlanAvgAggregateInputType = {
    id?: true
    type?: true
  }

  export type AccountPlanSumAggregateInputType = {
    id?: true
    type?: true
  }

  export type AccountPlanMinAggregateInputType = {
    id?: true
    name?: true
    type?: true
    createdAt?: true
    updatedAt?: true
  }

  export type AccountPlanMaxAggregateInputType = {
    id?: true
    name?: true
    type?: true
    createdAt?: true
    updatedAt?: true
  }

  export type AccountPlanCountAggregateInputType = {
    id?: true
    name?: true
    type?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type AccountPlanAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which AccountPlan to aggregate.
     */
    where?: AccountPlanWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AccountPlans to fetch.
     */
    orderBy?: AccountPlanOrderByWithRelationInput | AccountPlanOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: AccountPlanWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AccountPlans from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AccountPlans.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned AccountPlans
    **/
    _count?: true | AccountPlanCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: AccountPlanAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: AccountPlanSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AccountPlanMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AccountPlanMaxAggregateInputType
  }

  export type GetAccountPlanAggregateType<T extends AccountPlanAggregateArgs> = {
        [P in keyof T & keyof AggregateAccountPlan]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAccountPlan[P]>
      : GetScalarType<T[P], AggregateAccountPlan[P]>
  }




  export type AccountPlanGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AccountPlanWhereInput
    orderBy?: AccountPlanOrderByWithAggregationInput | AccountPlanOrderByWithAggregationInput[]
    by: AccountPlanScalarFieldEnum[] | AccountPlanScalarFieldEnum
    having?: AccountPlanScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AccountPlanCountAggregateInputType | true
    _avg?: AccountPlanAvgAggregateInputType
    _sum?: AccountPlanSumAggregateInputType
    _min?: AccountPlanMinAggregateInputType
    _max?: AccountPlanMaxAggregateInputType
  }

  export type AccountPlanGroupByOutputType = {
    id: number
    name: string
    type: number
    createdAt: Date
    updatedAt: Date
    _count: AccountPlanCountAggregateOutputType | null
    _avg: AccountPlanAvgAggregateOutputType | null
    _sum: AccountPlanSumAggregateOutputType | null
    _min: AccountPlanMinAggregateOutputType | null
    _max: AccountPlanMaxAggregateOutputType | null
  }

  type GetAccountPlanGroupByPayload<T extends AccountPlanGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<AccountPlanGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AccountPlanGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AccountPlanGroupByOutputType[P]>
            : GetScalarType<T[P], AccountPlanGroupByOutputType[P]>
        }
      >
    >


  export type AccountPlanSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    type?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    recurrences?: boolean | AccountPlan$recurrencesArgs<ExtArgs>
    accounts?: boolean | AccountPlan$accountsArgs<ExtArgs>
    parcels?: boolean | AccountPlan$parcelsArgs<ExtArgs>
    financialTransactions?: boolean | AccountPlan$financialTransactionsArgs<ExtArgs>
    _count?: boolean | AccountPlanCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["accountPlan"]>

  export type AccountPlanSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    type?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["accountPlan"]>

  export type AccountPlanSelectScalar = {
    id?: boolean
    name?: boolean
    type?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type AccountPlanInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    recurrences?: boolean | AccountPlan$recurrencesArgs<ExtArgs>
    accounts?: boolean | AccountPlan$accountsArgs<ExtArgs>
    parcels?: boolean | AccountPlan$parcelsArgs<ExtArgs>
    financialTransactions?: boolean | AccountPlan$financialTransactionsArgs<ExtArgs>
    _count?: boolean | AccountPlanCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type AccountPlanIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $AccountPlanPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "AccountPlan"
    objects: {
      recurrences: Prisma.$RecurrencePayload<ExtArgs>[]
      accounts: Prisma.$AccountPayload<ExtArgs>[]
      parcels: Prisma.$ParcelPayload<ExtArgs>[]
      financialTransactions: Prisma.$FinancialTransactionPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      name: string
      type: number
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["accountPlan"]>
    composites: {}
  }

  type AccountPlanGetPayload<S extends boolean | null | undefined | AccountPlanDefaultArgs> = $Result.GetResult<Prisma.$AccountPlanPayload, S>

  type AccountPlanCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<AccountPlanFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: AccountPlanCountAggregateInputType | true
    }

  export interface AccountPlanDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['AccountPlan'], meta: { name: 'AccountPlan' } }
    /**
     * Find zero or one AccountPlan that matches the filter.
     * @param {AccountPlanFindUniqueArgs} args - Arguments to find a AccountPlan
     * @example
     * // Get one AccountPlan
     * const accountPlan = await prisma.accountPlan.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends AccountPlanFindUniqueArgs>(args: SelectSubset<T, AccountPlanFindUniqueArgs<ExtArgs>>): Prisma__AccountPlanClient<$Result.GetResult<Prisma.$AccountPlanPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one AccountPlan that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {AccountPlanFindUniqueOrThrowArgs} args - Arguments to find a AccountPlan
     * @example
     * // Get one AccountPlan
     * const accountPlan = await prisma.accountPlan.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends AccountPlanFindUniqueOrThrowArgs>(args: SelectSubset<T, AccountPlanFindUniqueOrThrowArgs<ExtArgs>>): Prisma__AccountPlanClient<$Result.GetResult<Prisma.$AccountPlanPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first AccountPlan that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountPlanFindFirstArgs} args - Arguments to find a AccountPlan
     * @example
     * // Get one AccountPlan
     * const accountPlan = await prisma.accountPlan.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends AccountPlanFindFirstArgs>(args?: SelectSubset<T, AccountPlanFindFirstArgs<ExtArgs>>): Prisma__AccountPlanClient<$Result.GetResult<Prisma.$AccountPlanPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first AccountPlan that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountPlanFindFirstOrThrowArgs} args - Arguments to find a AccountPlan
     * @example
     * // Get one AccountPlan
     * const accountPlan = await prisma.accountPlan.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends AccountPlanFindFirstOrThrowArgs>(args?: SelectSubset<T, AccountPlanFindFirstOrThrowArgs<ExtArgs>>): Prisma__AccountPlanClient<$Result.GetResult<Prisma.$AccountPlanPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more AccountPlans that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountPlanFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all AccountPlans
     * const accountPlans = await prisma.accountPlan.findMany()
     * 
     * // Get first 10 AccountPlans
     * const accountPlans = await prisma.accountPlan.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const accountPlanWithIdOnly = await prisma.accountPlan.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends AccountPlanFindManyArgs>(args?: SelectSubset<T, AccountPlanFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AccountPlanPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a AccountPlan.
     * @param {AccountPlanCreateArgs} args - Arguments to create a AccountPlan.
     * @example
     * // Create one AccountPlan
     * const AccountPlan = await prisma.accountPlan.create({
     *   data: {
     *     // ... data to create a AccountPlan
     *   }
     * })
     * 
     */
    create<T extends AccountPlanCreateArgs>(args: SelectSubset<T, AccountPlanCreateArgs<ExtArgs>>): Prisma__AccountPlanClient<$Result.GetResult<Prisma.$AccountPlanPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many AccountPlans.
     * @param {AccountPlanCreateManyArgs} args - Arguments to create many AccountPlans.
     * @example
     * // Create many AccountPlans
     * const accountPlan = await prisma.accountPlan.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends AccountPlanCreateManyArgs>(args?: SelectSubset<T, AccountPlanCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many AccountPlans and returns the data saved in the database.
     * @param {AccountPlanCreateManyAndReturnArgs} args - Arguments to create many AccountPlans.
     * @example
     * // Create many AccountPlans
     * const accountPlan = await prisma.accountPlan.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many AccountPlans and only return the `id`
     * const accountPlanWithIdOnly = await prisma.accountPlan.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends AccountPlanCreateManyAndReturnArgs>(args?: SelectSubset<T, AccountPlanCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AccountPlanPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a AccountPlan.
     * @param {AccountPlanDeleteArgs} args - Arguments to delete one AccountPlan.
     * @example
     * // Delete one AccountPlan
     * const AccountPlan = await prisma.accountPlan.delete({
     *   where: {
     *     // ... filter to delete one AccountPlan
     *   }
     * })
     * 
     */
    delete<T extends AccountPlanDeleteArgs>(args: SelectSubset<T, AccountPlanDeleteArgs<ExtArgs>>): Prisma__AccountPlanClient<$Result.GetResult<Prisma.$AccountPlanPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one AccountPlan.
     * @param {AccountPlanUpdateArgs} args - Arguments to update one AccountPlan.
     * @example
     * // Update one AccountPlan
     * const accountPlan = await prisma.accountPlan.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends AccountPlanUpdateArgs>(args: SelectSubset<T, AccountPlanUpdateArgs<ExtArgs>>): Prisma__AccountPlanClient<$Result.GetResult<Prisma.$AccountPlanPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more AccountPlans.
     * @param {AccountPlanDeleteManyArgs} args - Arguments to filter AccountPlans to delete.
     * @example
     * // Delete a few AccountPlans
     * const { count } = await prisma.accountPlan.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends AccountPlanDeleteManyArgs>(args?: SelectSubset<T, AccountPlanDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more AccountPlans.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountPlanUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many AccountPlans
     * const accountPlan = await prisma.accountPlan.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends AccountPlanUpdateManyArgs>(args: SelectSubset<T, AccountPlanUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one AccountPlan.
     * @param {AccountPlanUpsertArgs} args - Arguments to update or create a AccountPlan.
     * @example
     * // Update or create a AccountPlan
     * const accountPlan = await prisma.accountPlan.upsert({
     *   create: {
     *     // ... data to create a AccountPlan
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the AccountPlan we want to update
     *   }
     * })
     */
    upsert<T extends AccountPlanUpsertArgs>(args: SelectSubset<T, AccountPlanUpsertArgs<ExtArgs>>): Prisma__AccountPlanClient<$Result.GetResult<Prisma.$AccountPlanPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of AccountPlans.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountPlanCountArgs} args - Arguments to filter AccountPlans to count.
     * @example
     * // Count the number of AccountPlans
     * const count = await prisma.accountPlan.count({
     *   where: {
     *     // ... the filter for the AccountPlans we want to count
     *   }
     * })
    **/
    count<T extends AccountPlanCountArgs>(
      args?: Subset<T, AccountPlanCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AccountPlanCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a AccountPlan.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountPlanAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AccountPlanAggregateArgs>(args: Subset<T, AccountPlanAggregateArgs>): Prisma.PrismaPromise<GetAccountPlanAggregateType<T>>

    /**
     * Group by AccountPlan.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountPlanGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AccountPlanGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AccountPlanGroupByArgs['orderBy'] }
        : { orderBy?: AccountPlanGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AccountPlanGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAccountPlanGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the AccountPlan model
   */
  readonly fields: AccountPlanFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for AccountPlan.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__AccountPlanClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    recurrences<T extends AccountPlan$recurrencesArgs<ExtArgs> = {}>(args?: Subset<T, AccountPlan$recurrencesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RecurrencePayload<ExtArgs>, T, "findMany"> | Null>
    accounts<T extends AccountPlan$accountsArgs<ExtArgs> = {}>(args?: Subset<T, AccountPlan$accountsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "findMany"> | Null>
    parcels<T extends AccountPlan$parcelsArgs<ExtArgs> = {}>(args?: Subset<T, AccountPlan$parcelsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ParcelPayload<ExtArgs>, T, "findMany"> | Null>
    financialTransactions<T extends AccountPlan$financialTransactionsArgs<ExtArgs> = {}>(args?: Subset<T, AccountPlan$financialTransactionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FinancialTransactionPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the AccountPlan model
   */ 
  interface AccountPlanFieldRefs {
    readonly id: FieldRef<"AccountPlan", 'Int'>
    readonly name: FieldRef<"AccountPlan", 'String'>
    readonly type: FieldRef<"AccountPlan", 'Int'>
    readonly createdAt: FieldRef<"AccountPlan", 'DateTime'>
    readonly updatedAt: FieldRef<"AccountPlan", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * AccountPlan findUnique
   */
  export type AccountPlanFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AccountPlan
     */
    select?: AccountPlanSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountPlanInclude<ExtArgs> | null
    /**
     * Filter, which AccountPlan to fetch.
     */
    where: AccountPlanWhereUniqueInput
  }

  /**
   * AccountPlan findUniqueOrThrow
   */
  export type AccountPlanFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AccountPlan
     */
    select?: AccountPlanSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountPlanInclude<ExtArgs> | null
    /**
     * Filter, which AccountPlan to fetch.
     */
    where: AccountPlanWhereUniqueInput
  }

  /**
   * AccountPlan findFirst
   */
  export type AccountPlanFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AccountPlan
     */
    select?: AccountPlanSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountPlanInclude<ExtArgs> | null
    /**
     * Filter, which AccountPlan to fetch.
     */
    where?: AccountPlanWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AccountPlans to fetch.
     */
    orderBy?: AccountPlanOrderByWithRelationInput | AccountPlanOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for AccountPlans.
     */
    cursor?: AccountPlanWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AccountPlans from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AccountPlans.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of AccountPlans.
     */
    distinct?: AccountPlanScalarFieldEnum | AccountPlanScalarFieldEnum[]
  }

  /**
   * AccountPlan findFirstOrThrow
   */
  export type AccountPlanFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AccountPlan
     */
    select?: AccountPlanSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountPlanInclude<ExtArgs> | null
    /**
     * Filter, which AccountPlan to fetch.
     */
    where?: AccountPlanWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AccountPlans to fetch.
     */
    orderBy?: AccountPlanOrderByWithRelationInput | AccountPlanOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for AccountPlans.
     */
    cursor?: AccountPlanWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AccountPlans from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AccountPlans.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of AccountPlans.
     */
    distinct?: AccountPlanScalarFieldEnum | AccountPlanScalarFieldEnum[]
  }

  /**
   * AccountPlan findMany
   */
  export type AccountPlanFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AccountPlan
     */
    select?: AccountPlanSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountPlanInclude<ExtArgs> | null
    /**
     * Filter, which AccountPlans to fetch.
     */
    where?: AccountPlanWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AccountPlans to fetch.
     */
    orderBy?: AccountPlanOrderByWithRelationInput | AccountPlanOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing AccountPlans.
     */
    cursor?: AccountPlanWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AccountPlans from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AccountPlans.
     */
    skip?: number
    distinct?: AccountPlanScalarFieldEnum | AccountPlanScalarFieldEnum[]
  }

  /**
   * AccountPlan create
   */
  export type AccountPlanCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AccountPlan
     */
    select?: AccountPlanSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountPlanInclude<ExtArgs> | null
    /**
     * The data needed to create a AccountPlan.
     */
    data: XOR<AccountPlanCreateInput, AccountPlanUncheckedCreateInput>
  }

  /**
   * AccountPlan createMany
   */
  export type AccountPlanCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many AccountPlans.
     */
    data: AccountPlanCreateManyInput | AccountPlanCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * AccountPlan createManyAndReturn
   */
  export type AccountPlanCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AccountPlan
     */
    select?: AccountPlanSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many AccountPlans.
     */
    data: AccountPlanCreateManyInput | AccountPlanCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * AccountPlan update
   */
  export type AccountPlanUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AccountPlan
     */
    select?: AccountPlanSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountPlanInclude<ExtArgs> | null
    /**
     * The data needed to update a AccountPlan.
     */
    data: XOR<AccountPlanUpdateInput, AccountPlanUncheckedUpdateInput>
    /**
     * Choose, which AccountPlan to update.
     */
    where: AccountPlanWhereUniqueInput
  }

  /**
   * AccountPlan updateMany
   */
  export type AccountPlanUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update AccountPlans.
     */
    data: XOR<AccountPlanUpdateManyMutationInput, AccountPlanUncheckedUpdateManyInput>
    /**
     * Filter which AccountPlans to update
     */
    where?: AccountPlanWhereInput
  }

  /**
   * AccountPlan upsert
   */
  export type AccountPlanUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AccountPlan
     */
    select?: AccountPlanSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountPlanInclude<ExtArgs> | null
    /**
     * The filter to search for the AccountPlan to update in case it exists.
     */
    where: AccountPlanWhereUniqueInput
    /**
     * In case the AccountPlan found by the `where` argument doesn't exist, create a new AccountPlan with this data.
     */
    create: XOR<AccountPlanCreateInput, AccountPlanUncheckedCreateInput>
    /**
     * In case the AccountPlan was found with the provided `where` argument, update it with this data.
     */
    update: XOR<AccountPlanUpdateInput, AccountPlanUncheckedUpdateInput>
  }

  /**
   * AccountPlan delete
   */
  export type AccountPlanDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AccountPlan
     */
    select?: AccountPlanSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountPlanInclude<ExtArgs> | null
    /**
     * Filter which AccountPlan to delete.
     */
    where: AccountPlanWhereUniqueInput
  }

  /**
   * AccountPlan deleteMany
   */
  export type AccountPlanDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which AccountPlans to delete
     */
    where?: AccountPlanWhereInput
  }

  /**
   * AccountPlan.recurrences
   */
  export type AccountPlan$recurrencesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Recurrence
     */
    select?: RecurrenceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RecurrenceInclude<ExtArgs> | null
    where?: RecurrenceWhereInput
    orderBy?: RecurrenceOrderByWithRelationInput | RecurrenceOrderByWithRelationInput[]
    cursor?: RecurrenceWhereUniqueInput
    take?: number
    skip?: number
    distinct?: RecurrenceScalarFieldEnum | RecurrenceScalarFieldEnum[]
  }

  /**
   * AccountPlan.accounts
   */
  export type AccountPlan$accountsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountInclude<ExtArgs> | null
    where?: AccountWhereInput
    orderBy?: AccountOrderByWithRelationInput | AccountOrderByWithRelationInput[]
    cursor?: AccountWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AccountScalarFieldEnum | AccountScalarFieldEnum[]
  }

  /**
   * AccountPlan.parcels
   */
  export type AccountPlan$parcelsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Parcel
     */
    select?: ParcelSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ParcelInclude<ExtArgs> | null
    where?: ParcelWhereInput
    orderBy?: ParcelOrderByWithRelationInput | ParcelOrderByWithRelationInput[]
    cursor?: ParcelWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ParcelScalarFieldEnum | ParcelScalarFieldEnum[]
  }

  /**
   * AccountPlan.financialTransactions
   */
  export type AccountPlan$financialTransactionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FinancialTransaction
     */
    select?: FinancialTransactionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FinancialTransactionInclude<ExtArgs> | null
    where?: FinancialTransactionWhereInput
    orderBy?: FinancialTransactionOrderByWithRelationInput | FinancialTransactionOrderByWithRelationInput[]
    cursor?: FinancialTransactionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: FinancialTransactionScalarFieldEnum | FinancialTransactionScalarFieldEnum[]
  }

  /**
   * AccountPlan without action
   */
  export type AccountPlanDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AccountPlan
     */
    select?: AccountPlanSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountPlanInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const UserScalarFieldEnum: {
    id: 'id',
    email: 'email',
    name: 'name',
    password: 'password',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const HolderScalarFieldEnum: {
    id: 'id',
    name: 'name',
    value: 'value',
    ownerId: 'ownerId',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type HolderScalarFieldEnum = (typeof HolderScalarFieldEnum)[keyof typeof HolderScalarFieldEnum]


  export const RecurrenceScalarFieldEnum: {
    id: 'id',
    name: 'name',
    reptition: 'reptition',
    range: 'range',
    value: 'value',
    categoryId: 'categoryId',
    type: 'type',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type RecurrenceScalarFieldEnum = (typeof RecurrenceScalarFieldEnum)[keyof typeof RecurrenceScalarFieldEnum]


  export const AccountScalarFieldEnum: {
    id: 'id',
    description: 'description',
    balance: 'balance',
    userId: 'userId',
    categoryId: 'categoryId',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type AccountScalarFieldEnum = (typeof AccountScalarFieldEnum)[keyof typeof AccountScalarFieldEnum]


  export const ParcelScalarFieldEnum: {
    id: 'id',
    value: 'value',
    dueDate: 'dueDate',
    competence: 'competence',
    accountId: 'accountId',
    categoryId: 'categoryId',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type ParcelScalarFieldEnum = (typeof ParcelScalarFieldEnum)[keyof typeof ParcelScalarFieldEnum]


  export const TransactionsFormsScalarFieldEnum: {
    id: 'id',
    name: 'name',
    type: 'type',
    holderId: 'holderId',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type TransactionsFormsScalarFieldEnum = (typeof TransactionsFormsScalarFieldEnum)[keyof typeof TransactionsFormsScalarFieldEnum]


  export const FinancialTransactionScalarFieldEnum: {
    id: 'id',
    description: 'description',
    value: 'value',
    userId: 'userId',
    transactionsFormsId: 'transactionsFormsId',
    categoryId: 'categoryId',
    parcelId: 'parcelId',
    accountId: 'accountId',
    typeId: 'typeId',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type FinancialTransactionScalarFieldEnum = (typeof FinancialTransactionScalarFieldEnum)[keyof typeof FinancialTransactionScalarFieldEnum]


  export const TransactionTypeScalarFieldEnum: {
    id: 'id',
    name: 'name',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type TransactionTypeScalarFieldEnum = (typeof TransactionTypeScalarFieldEnum)[keyof typeof TransactionTypeScalarFieldEnum]


  export const AccountPlanScalarFieldEnum: {
    id: 'id',
    name: 'name',
    type: 'type',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type AccountPlanScalarFieldEnum = (typeof AccountPlanScalarFieldEnum)[keyof typeof AccountPlanScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'DateTime[]'
   */
  export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    
  /**
   * Deep Input Types
   */


  export type UserWhereInput = {
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    id?: IntFilter<"User"> | number
    email?: StringFilter<"User"> | string
    name?: StringFilter<"User"> | string
    password?: StringFilter<"User"> | string
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
    holders?: HolderListRelationFilter
    accounts?: AccountListRelationFilter
    transactionsFinancials?: FinancialTransactionListRelationFilter
  }

  export type UserOrderByWithRelationInput = {
    id?: SortOrder
    email?: SortOrder
    name?: SortOrder
    password?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    holders?: HolderOrderByRelationAggregateInput
    accounts?: AccountOrderByRelationAggregateInput
    transactionsFinancials?: FinancialTransactionOrderByRelationAggregateInput
  }

  export type UserWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    email?: string
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    name?: StringFilter<"User"> | string
    password?: StringFilter<"User"> | string
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
    holders?: HolderListRelationFilter
    accounts?: AccountListRelationFilter
    transactionsFinancials?: FinancialTransactionListRelationFilter
  }, "id" | "email">

  export type UserOrderByWithAggregationInput = {
    id?: SortOrder
    email?: SortOrder
    name?: SortOrder
    password?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: UserCountOrderByAggregateInput
    _avg?: UserAvgOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
    _sum?: UserSumOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    OR?: UserScalarWhereWithAggregatesInput[]
    NOT?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"User"> | number
    email?: StringWithAggregatesFilter<"User"> | string
    name?: StringWithAggregatesFilter<"User"> | string
    password?: StringWithAggregatesFilter<"User"> | string
    createdAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
  }

  export type HolderWhereInput = {
    AND?: HolderWhereInput | HolderWhereInput[]
    OR?: HolderWhereInput[]
    NOT?: HolderWhereInput | HolderWhereInput[]
    id?: IntFilter<"Holder"> | number
    name?: StringFilter<"Holder"> | string
    value?: FloatFilter<"Holder"> | number
    ownerId?: IntFilter<"Holder"> | number
    createdAt?: DateTimeFilter<"Holder"> | Date | string
    updatedAt?: DateTimeFilter<"Holder"> | Date | string
    owner?: XOR<UserScalarRelationFilter, UserWhereInput>
    transactionsForms?: TransactionsFormsListRelationFilter
  }

  export type HolderOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    value?: SortOrder
    ownerId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    owner?: UserOrderByWithRelationInput
    transactionsForms?: TransactionsFormsOrderByRelationAggregateInput
  }

  export type HolderWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: HolderWhereInput | HolderWhereInput[]
    OR?: HolderWhereInput[]
    NOT?: HolderWhereInput | HolderWhereInput[]
    name?: StringFilter<"Holder"> | string
    value?: FloatFilter<"Holder"> | number
    ownerId?: IntFilter<"Holder"> | number
    createdAt?: DateTimeFilter<"Holder"> | Date | string
    updatedAt?: DateTimeFilter<"Holder"> | Date | string
    owner?: XOR<UserScalarRelationFilter, UserWhereInput>
    transactionsForms?: TransactionsFormsListRelationFilter
  }, "id">

  export type HolderOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    value?: SortOrder
    ownerId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: HolderCountOrderByAggregateInput
    _avg?: HolderAvgOrderByAggregateInput
    _max?: HolderMaxOrderByAggregateInput
    _min?: HolderMinOrderByAggregateInput
    _sum?: HolderSumOrderByAggregateInput
  }

  export type HolderScalarWhereWithAggregatesInput = {
    AND?: HolderScalarWhereWithAggregatesInput | HolderScalarWhereWithAggregatesInput[]
    OR?: HolderScalarWhereWithAggregatesInput[]
    NOT?: HolderScalarWhereWithAggregatesInput | HolderScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Holder"> | number
    name?: StringWithAggregatesFilter<"Holder"> | string
    value?: FloatWithAggregatesFilter<"Holder"> | number
    ownerId?: IntWithAggregatesFilter<"Holder"> | number
    createdAt?: DateTimeWithAggregatesFilter<"Holder"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Holder"> | Date | string
  }

  export type RecurrenceWhereInput = {
    AND?: RecurrenceWhereInput | RecurrenceWhereInput[]
    OR?: RecurrenceWhereInput[]
    NOT?: RecurrenceWhereInput | RecurrenceWhereInput[]
    id?: IntFilter<"Recurrence"> | number
    name?: StringFilter<"Recurrence"> | string
    reptition?: IntFilter<"Recurrence"> | number
    range?: IntFilter<"Recurrence"> | number
    value?: FloatFilter<"Recurrence"> | number
    categoryId?: IntFilter<"Recurrence"> | number
    type?: IntFilter<"Recurrence"> | number
    createdAt?: DateTimeFilter<"Recurrence"> | Date | string
    updatedAt?: DateTimeFilter<"Recurrence"> | Date | string
    category?: XOR<AccountPlanScalarRelationFilter, AccountPlanWhereInput>
  }

  export type RecurrenceOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    reptition?: SortOrder
    range?: SortOrder
    value?: SortOrder
    categoryId?: SortOrder
    type?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    category?: AccountPlanOrderByWithRelationInput
  }

  export type RecurrenceWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: RecurrenceWhereInput | RecurrenceWhereInput[]
    OR?: RecurrenceWhereInput[]
    NOT?: RecurrenceWhereInput | RecurrenceWhereInput[]
    name?: StringFilter<"Recurrence"> | string
    reptition?: IntFilter<"Recurrence"> | number
    range?: IntFilter<"Recurrence"> | number
    value?: FloatFilter<"Recurrence"> | number
    categoryId?: IntFilter<"Recurrence"> | number
    type?: IntFilter<"Recurrence"> | number
    createdAt?: DateTimeFilter<"Recurrence"> | Date | string
    updatedAt?: DateTimeFilter<"Recurrence"> | Date | string
    category?: XOR<AccountPlanScalarRelationFilter, AccountPlanWhereInput>
  }, "id">

  export type RecurrenceOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    reptition?: SortOrder
    range?: SortOrder
    value?: SortOrder
    categoryId?: SortOrder
    type?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: RecurrenceCountOrderByAggregateInput
    _avg?: RecurrenceAvgOrderByAggregateInput
    _max?: RecurrenceMaxOrderByAggregateInput
    _min?: RecurrenceMinOrderByAggregateInput
    _sum?: RecurrenceSumOrderByAggregateInput
  }

  export type RecurrenceScalarWhereWithAggregatesInput = {
    AND?: RecurrenceScalarWhereWithAggregatesInput | RecurrenceScalarWhereWithAggregatesInput[]
    OR?: RecurrenceScalarWhereWithAggregatesInput[]
    NOT?: RecurrenceScalarWhereWithAggregatesInput | RecurrenceScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Recurrence"> | number
    name?: StringWithAggregatesFilter<"Recurrence"> | string
    reptition?: IntWithAggregatesFilter<"Recurrence"> | number
    range?: IntWithAggregatesFilter<"Recurrence"> | number
    value?: FloatWithAggregatesFilter<"Recurrence"> | number
    categoryId?: IntWithAggregatesFilter<"Recurrence"> | number
    type?: IntWithAggregatesFilter<"Recurrence"> | number
    createdAt?: DateTimeWithAggregatesFilter<"Recurrence"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Recurrence"> | Date | string
  }

  export type AccountWhereInput = {
    AND?: AccountWhereInput | AccountWhereInput[]
    OR?: AccountWhereInput[]
    NOT?: AccountWhereInput | AccountWhereInput[]
    id?: IntFilter<"Account"> | number
    description?: StringFilter<"Account"> | string
    balance?: FloatFilter<"Account"> | number
    userId?: IntFilter<"Account"> | number
    categoryId?: IntFilter<"Account"> | number
    createdAt?: DateTimeFilter<"Account"> | Date | string
    updatedAt?: DateTimeFilter<"Account"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    parcels?: ParcelListRelationFilter
    category?: XOR<AccountPlanScalarRelationFilter, AccountPlanWhereInput>
    financialTransactions?: FinancialTransactionListRelationFilter
  }

  export type AccountOrderByWithRelationInput = {
    id?: SortOrder
    description?: SortOrder
    balance?: SortOrder
    userId?: SortOrder
    categoryId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    user?: UserOrderByWithRelationInput
    parcels?: ParcelOrderByRelationAggregateInput
    category?: AccountPlanOrderByWithRelationInput
    financialTransactions?: FinancialTransactionOrderByRelationAggregateInput
  }

  export type AccountWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: AccountWhereInput | AccountWhereInput[]
    OR?: AccountWhereInput[]
    NOT?: AccountWhereInput | AccountWhereInput[]
    description?: StringFilter<"Account"> | string
    balance?: FloatFilter<"Account"> | number
    userId?: IntFilter<"Account"> | number
    categoryId?: IntFilter<"Account"> | number
    createdAt?: DateTimeFilter<"Account"> | Date | string
    updatedAt?: DateTimeFilter<"Account"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    parcels?: ParcelListRelationFilter
    category?: XOR<AccountPlanScalarRelationFilter, AccountPlanWhereInput>
    financialTransactions?: FinancialTransactionListRelationFilter
  }, "id">

  export type AccountOrderByWithAggregationInput = {
    id?: SortOrder
    description?: SortOrder
    balance?: SortOrder
    userId?: SortOrder
    categoryId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: AccountCountOrderByAggregateInput
    _avg?: AccountAvgOrderByAggregateInput
    _max?: AccountMaxOrderByAggregateInput
    _min?: AccountMinOrderByAggregateInput
    _sum?: AccountSumOrderByAggregateInput
  }

  export type AccountScalarWhereWithAggregatesInput = {
    AND?: AccountScalarWhereWithAggregatesInput | AccountScalarWhereWithAggregatesInput[]
    OR?: AccountScalarWhereWithAggregatesInput[]
    NOT?: AccountScalarWhereWithAggregatesInput | AccountScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Account"> | number
    description?: StringWithAggregatesFilter<"Account"> | string
    balance?: FloatWithAggregatesFilter<"Account"> | number
    userId?: IntWithAggregatesFilter<"Account"> | number
    categoryId?: IntWithAggregatesFilter<"Account"> | number
    createdAt?: DateTimeWithAggregatesFilter<"Account"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Account"> | Date | string
  }

  export type ParcelWhereInput = {
    AND?: ParcelWhereInput | ParcelWhereInput[]
    OR?: ParcelWhereInput[]
    NOT?: ParcelWhereInput | ParcelWhereInput[]
    id?: IntFilter<"Parcel"> | number
    value?: FloatFilter<"Parcel"> | number
    dueDate?: DateTimeFilter<"Parcel"> | Date | string
    competence?: DateTimeFilter<"Parcel"> | Date | string
    accountId?: IntFilter<"Parcel"> | number
    categoryId?: IntFilter<"Parcel"> | number
    createdAt?: DateTimeFilter<"Parcel"> | Date | string
    updatedAt?: DateTimeFilter<"Parcel"> | Date | string
    category?: XOR<AccountPlanScalarRelationFilter, AccountPlanWhereInput>
    account?: XOR<AccountScalarRelationFilter, AccountWhereInput>
    FinancialTransactions?: FinancialTransactionListRelationFilter
  }

  export type ParcelOrderByWithRelationInput = {
    id?: SortOrder
    value?: SortOrder
    dueDate?: SortOrder
    competence?: SortOrder
    accountId?: SortOrder
    categoryId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    category?: AccountPlanOrderByWithRelationInput
    account?: AccountOrderByWithRelationInput
    FinancialTransactions?: FinancialTransactionOrderByRelationAggregateInput
  }

  export type ParcelWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: ParcelWhereInput | ParcelWhereInput[]
    OR?: ParcelWhereInput[]
    NOT?: ParcelWhereInput | ParcelWhereInput[]
    value?: FloatFilter<"Parcel"> | number
    dueDate?: DateTimeFilter<"Parcel"> | Date | string
    competence?: DateTimeFilter<"Parcel"> | Date | string
    accountId?: IntFilter<"Parcel"> | number
    categoryId?: IntFilter<"Parcel"> | number
    createdAt?: DateTimeFilter<"Parcel"> | Date | string
    updatedAt?: DateTimeFilter<"Parcel"> | Date | string
    category?: XOR<AccountPlanScalarRelationFilter, AccountPlanWhereInput>
    account?: XOR<AccountScalarRelationFilter, AccountWhereInput>
    FinancialTransactions?: FinancialTransactionListRelationFilter
  }, "id">

  export type ParcelOrderByWithAggregationInput = {
    id?: SortOrder
    value?: SortOrder
    dueDate?: SortOrder
    competence?: SortOrder
    accountId?: SortOrder
    categoryId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: ParcelCountOrderByAggregateInput
    _avg?: ParcelAvgOrderByAggregateInput
    _max?: ParcelMaxOrderByAggregateInput
    _min?: ParcelMinOrderByAggregateInput
    _sum?: ParcelSumOrderByAggregateInput
  }

  export type ParcelScalarWhereWithAggregatesInput = {
    AND?: ParcelScalarWhereWithAggregatesInput | ParcelScalarWhereWithAggregatesInput[]
    OR?: ParcelScalarWhereWithAggregatesInput[]
    NOT?: ParcelScalarWhereWithAggregatesInput | ParcelScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Parcel"> | number
    value?: FloatWithAggregatesFilter<"Parcel"> | number
    dueDate?: DateTimeWithAggregatesFilter<"Parcel"> | Date | string
    competence?: DateTimeWithAggregatesFilter<"Parcel"> | Date | string
    accountId?: IntWithAggregatesFilter<"Parcel"> | number
    categoryId?: IntWithAggregatesFilter<"Parcel"> | number
    createdAt?: DateTimeWithAggregatesFilter<"Parcel"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Parcel"> | Date | string
  }

  export type TransactionsFormsWhereInput = {
    AND?: TransactionsFormsWhereInput | TransactionsFormsWhereInput[]
    OR?: TransactionsFormsWhereInput[]
    NOT?: TransactionsFormsWhereInput | TransactionsFormsWhereInput[]
    id?: IntFilter<"TransactionsForms"> | number
    name?: StringFilter<"TransactionsForms"> | string
    type?: IntFilter<"TransactionsForms"> | number
    holderId?: IntFilter<"TransactionsForms"> | number
    createdAt?: DateTimeFilter<"TransactionsForms"> | Date | string
    updatedAt?: DateTimeFilter<"TransactionsForms"> | Date | string
    holder?: XOR<HolderScalarRelationFilter, HolderWhereInput>
    FinancialTransactions?: FinancialTransactionListRelationFilter
  }

  export type TransactionsFormsOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    type?: SortOrder
    holderId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    holder?: HolderOrderByWithRelationInput
    FinancialTransactions?: FinancialTransactionOrderByRelationAggregateInput
  }

  export type TransactionsFormsWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: TransactionsFormsWhereInput | TransactionsFormsWhereInput[]
    OR?: TransactionsFormsWhereInput[]
    NOT?: TransactionsFormsWhereInput | TransactionsFormsWhereInput[]
    name?: StringFilter<"TransactionsForms"> | string
    type?: IntFilter<"TransactionsForms"> | number
    holderId?: IntFilter<"TransactionsForms"> | number
    createdAt?: DateTimeFilter<"TransactionsForms"> | Date | string
    updatedAt?: DateTimeFilter<"TransactionsForms"> | Date | string
    holder?: XOR<HolderScalarRelationFilter, HolderWhereInput>
    FinancialTransactions?: FinancialTransactionListRelationFilter
  }, "id">

  export type TransactionsFormsOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    type?: SortOrder
    holderId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: TransactionsFormsCountOrderByAggregateInput
    _avg?: TransactionsFormsAvgOrderByAggregateInput
    _max?: TransactionsFormsMaxOrderByAggregateInput
    _min?: TransactionsFormsMinOrderByAggregateInput
    _sum?: TransactionsFormsSumOrderByAggregateInput
  }

  export type TransactionsFormsScalarWhereWithAggregatesInput = {
    AND?: TransactionsFormsScalarWhereWithAggregatesInput | TransactionsFormsScalarWhereWithAggregatesInput[]
    OR?: TransactionsFormsScalarWhereWithAggregatesInput[]
    NOT?: TransactionsFormsScalarWhereWithAggregatesInput | TransactionsFormsScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"TransactionsForms"> | number
    name?: StringWithAggregatesFilter<"TransactionsForms"> | string
    type?: IntWithAggregatesFilter<"TransactionsForms"> | number
    holderId?: IntWithAggregatesFilter<"TransactionsForms"> | number
    createdAt?: DateTimeWithAggregatesFilter<"TransactionsForms"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"TransactionsForms"> | Date | string
  }

  export type FinancialTransactionWhereInput = {
    AND?: FinancialTransactionWhereInput | FinancialTransactionWhereInput[]
    OR?: FinancialTransactionWhereInput[]
    NOT?: FinancialTransactionWhereInput | FinancialTransactionWhereInput[]
    id?: IntFilter<"FinancialTransaction"> | number
    description?: StringFilter<"FinancialTransaction"> | string
    value?: FloatFilter<"FinancialTransaction"> | number
    userId?: IntFilter<"FinancialTransaction"> | number
    transactionsFormsId?: IntFilter<"FinancialTransaction"> | number
    categoryId?: IntFilter<"FinancialTransaction"> | number
    parcelId?: IntFilter<"FinancialTransaction"> | number
    accountId?: IntFilter<"FinancialTransaction"> | number
    typeId?: IntFilter<"FinancialTransaction"> | number
    createdAt?: DateTimeFilter<"FinancialTransaction"> | Date | string
    updatedAt?: DateTimeFilter<"FinancialTransaction"> | Date | string
    typeTransaction?: XOR<TransactionTypeScalarRelationFilter, TransactionTypeWhereInput>
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    category?: XOR<AccountPlanScalarRelationFilter, AccountPlanWhereInput>
    account?: XOR<AccountScalarRelationFilter, AccountWhereInput>
    parcel?: XOR<ParcelScalarRelationFilter, ParcelWhereInput>
    transactionsForm?: XOR<TransactionsFormsScalarRelationFilter, TransactionsFormsWhereInput>
  }

  export type FinancialTransactionOrderByWithRelationInput = {
    id?: SortOrder
    description?: SortOrder
    value?: SortOrder
    userId?: SortOrder
    transactionsFormsId?: SortOrder
    categoryId?: SortOrder
    parcelId?: SortOrder
    accountId?: SortOrder
    typeId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    typeTransaction?: TransactionTypeOrderByWithRelationInput
    user?: UserOrderByWithRelationInput
    category?: AccountPlanOrderByWithRelationInput
    account?: AccountOrderByWithRelationInput
    parcel?: ParcelOrderByWithRelationInput
    transactionsForm?: TransactionsFormsOrderByWithRelationInput
  }

  export type FinancialTransactionWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: FinancialTransactionWhereInput | FinancialTransactionWhereInput[]
    OR?: FinancialTransactionWhereInput[]
    NOT?: FinancialTransactionWhereInput | FinancialTransactionWhereInput[]
    description?: StringFilter<"FinancialTransaction"> | string
    value?: FloatFilter<"FinancialTransaction"> | number
    userId?: IntFilter<"FinancialTransaction"> | number
    transactionsFormsId?: IntFilter<"FinancialTransaction"> | number
    categoryId?: IntFilter<"FinancialTransaction"> | number
    parcelId?: IntFilter<"FinancialTransaction"> | number
    accountId?: IntFilter<"FinancialTransaction"> | number
    typeId?: IntFilter<"FinancialTransaction"> | number
    createdAt?: DateTimeFilter<"FinancialTransaction"> | Date | string
    updatedAt?: DateTimeFilter<"FinancialTransaction"> | Date | string
    typeTransaction?: XOR<TransactionTypeScalarRelationFilter, TransactionTypeWhereInput>
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    category?: XOR<AccountPlanScalarRelationFilter, AccountPlanWhereInput>
    account?: XOR<AccountScalarRelationFilter, AccountWhereInput>
    parcel?: XOR<ParcelScalarRelationFilter, ParcelWhereInput>
    transactionsForm?: XOR<TransactionsFormsScalarRelationFilter, TransactionsFormsWhereInput>
  }, "id">

  export type FinancialTransactionOrderByWithAggregationInput = {
    id?: SortOrder
    description?: SortOrder
    value?: SortOrder
    userId?: SortOrder
    transactionsFormsId?: SortOrder
    categoryId?: SortOrder
    parcelId?: SortOrder
    accountId?: SortOrder
    typeId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: FinancialTransactionCountOrderByAggregateInput
    _avg?: FinancialTransactionAvgOrderByAggregateInput
    _max?: FinancialTransactionMaxOrderByAggregateInput
    _min?: FinancialTransactionMinOrderByAggregateInput
    _sum?: FinancialTransactionSumOrderByAggregateInput
  }

  export type FinancialTransactionScalarWhereWithAggregatesInput = {
    AND?: FinancialTransactionScalarWhereWithAggregatesInput | FinancialTransactionScalarWhereWithAggregatesInput[]
    OR?: FinancialTransactionScalarWhereWithAggregatesInput[]
    NOT?: FinancialTransactionScalarWhereWithAggregatesInput | FinancialTransactionScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"FinancialTransaction"> | number
    description?: StringWithAggregatesFilter<"FinancialTransaction"> | string
    value?: FloatWithAggregatesFilter<"FinancialTransaction"> | number
    userId?: IntWithAggregatesFilter<"FinancialTransaction"> | number
    transactionsFormsId?: IntWithAggregatesFilter<"FinancialTransaction"> | number
    categoryId?: IntWithAggregatesFilter<"FinancialTransaction"> | number
    parcelId?: IntWithAggregatesFilter<"FinancialTransaction"> | number
    accountId?: IntWithAggregatesFilter<"FinancialTransaction"> | number
    typeId?: IntWithAggregatesFilter<"FinancialTransaction"> | number
    createdAt?: DateTimeWithAggregatesFilter<"FinancialTransaction"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"FinancialTransaction"> | Date | string
  }

  export type TransactionTypeWhereInput = {
    AND?: TransactionTypeWhereInput | TransactionTypeWhereInput[]
    OR?: TransactionTypeWhereInput[]
    NOT?: TransactionTypeWhereInput | TransactionTypeWhereInput[]
    id?: IntFilter<"TransactionType"> | number
    name?: StringFilter<"TransactionType"> | string
    createdAt?: DateTimeFilter<"TransactionType"> | Date | string
    updatedAt?: DateTimeFilter<"TransactionType"> | Date | string
    financialTransactions?: FinancialTransactionListRelationFilter
  }

  export type TransactionTypeOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    financialTransactions?: FinancialTransactionOrderByRelationAggregateInput
  }

  export type TransactionTypeWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: TransactionTypeWhereInput | TransactionTypeWhereInput[]
    OR?: TransactionTypeWhereInput[]
    NOT?: TransactionTypeWhereInput | TransactionTypeWhereInput[]
    name?: StringFilter<"TransactionType"> | string
    createdAt?: DateTimeFilter<"TransactionType"> | Date | string
    updatedAt?: DateTimeFilter<"TransactionType"> | Date | string
    financialTransactions?: FinancialTransactionListRelationFilter
  }, "id">

  export type TransactionTypeOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: TransactionTypeCountOrderByAggregateInput
    _avg?: TransactionTypeAvgOrderByAggregateInput
    _max?: TransactionTypeMaxOrderByAggregateInput
    _min?: TransactionTypeMinOrderByAggregateInput
    _sum?: TransactionTypeSumOrderByAggregateInput
  }

  export type TransactionTypeScalarWhereWithAggregatesInput = {
    AND?: TransactionTypeScalarWhereWithAggregatesInput | TransactionTypeScalarWhereWithAggregatesInput[]
    OR?: TransactionTypeScalarWhereWithAggregatesInput[]
    NOT?: TransactionTypeScalarWhereWithAggregatesInput | TransactionTypeScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"TransactionType"> | number
    name?: StringWithAggregatesFilter<"TransactionType"> | string
    createdAt?: DateTimeWithAggregatesFilter<"TransactionType"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"TransactionType"> | Date | string
  }

  export type AccountPlanWhereInput = {
    AND?: AccountPlanWhereInput | AccountPlanWhereInput[]
    OR?: AccountPlanWhereInput[]
    NOT?: AccountPlanWhereInput | AccountPlanWhereInput[]
    id?: IntFilter<"AccountPlan"> | number
    name?: StringFilter<"AccountPlan"> | string
    type?: IntFilter<"AccountPlan"> | number
    createdAt?: DateTimeFilter<"AccountPlan"> | Date | string
    updatedAt?: DateTimeFilter<"AccountPlan"> | Date | string
    recurrences?: RecurrenceListRelationFilter
    accounts?: AccountListRelationFilter
    parcels?: ParcelListRelationFilter
    financialTransactions?: FinancialTransactionListRelationFilter
  }

  export type AccountPlanOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    type?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    recurrences?: RecurrenceOrderByRelationAggregateInput
    accounts?: AccountOrderByRelationAggregateInput
    parcels?: ParcelOrderByRelationAggregateInput
    financialTransactions?: FinancialTransactionOrderByRelationAggregateInput
  }

  export type AccountPlanWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: AccountPlanWhereInput | AccountPlanWhereInput[]
    OR?: AccountPlanWhereInput[]
    NOT?: AccountPlanWhereInput | AccountPlanWhereInput[]
    name?: StringFilter<"AccountPlan"> | string
    type?: IntFilter<"AccountPlan"> | number
    createdAt?: DateTimeFilter<"AccountPlan"> | Date | string
    updatedAt?: DateTimeFilter<"AccountPlan"> | Date | string
    recurrences?: RecurrenceListRelationFilter
    accounts?: AccountListRelationFilter
    parcels?: ParcelListRelationFilter
    financialTransactions?: FinancialTransactionListRelationFilter
  }, "id">

  export type AccountPlanOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    type?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: AccountPlanCountOrderByAggregateInput
    _avg?: AccountPlanAvgOrderByAggregateInput
    _max?: AccountPlanMaxOrderByAggregateInput
    _min?: AccountPlanMinOrderByAggregateInput
    _sum?: AccountPlanSumOrderByAggregateInput
  }

  export type AccountPlanScalarWhereWithAggregatesInput = {
    AND?: AccountPlanScalarWhereWithAggregatesInput | AccountPlanScalarWhereWithAggregatesInput[]
    OR?: AccountPlanScalarWhereWithAggregatesInput[]
    NOT?: AccountPlanScalarWhereWithAggregatesInput | AccountPlanScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"AccountPlan"> | number
    name?: StringWithAggregatesFilter<"AccountPlan"> | string
    type?: IntWithAggregatesFilter<"AccountPlan"> | number
    createdAt?: DateTimeWithAggregatesFilter<"AccountPlan"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"AccountPlan"> | Date | string
  }

  export type UserCreateInput = {
    email: string
    name: string
    password: string
    createdAt?: Date | string
    updatedAt?: Date | string
    holders?: HolderCreateNestedManyWithoutOwnerInput
    accounts?: AccountCreateNestedManyWithoutUserInput
    transactionsFinancials?: FinancialTransactionCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateInput = {
    id?: number
    email: string
    name: string
    password: string
    createdAt?: Date | string
    updatedAt?: Date | string
    holders?: HolderUncheckedCreateNestedManyWithoutOwnerInput
    accounts?: AccountUncheckedCreateNestedManyWithoutUserInput
    transactionsFinancials?: FinancialTransactionUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserUpdateInput = {
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    holders?: HolderUpdateManyWithoutOwnerNestedInput
    accounts?: AccountUpdateManyWithoutUserNestedInput
    transactionsFinancials?: FinancialTransactionUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    holders?: HolderUncheckedUpdateManyWithoutOwnerNestedInput
    accounts?: AccountUncheckedUpdateManyWithoutUserNestedInput
    transactionsFinancials?: FinancialTransactionUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateManyInput = {
    id?: number
    email: string
    name: string
    password: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserUpdateManyMutationInput = {
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type HolderCreateInput = {
    name: string
    value: number
    createdAt?: Date | string
    updatedAt?: Date | string
    owner: UserCreateNestedOneWithoutHoldersInput
    transactionsForms?: TransactionsFormsCreateNestedManyWithoutHolderInput
  }

  export type HolderUncheckedCreateInput = {
    id?: number
    name: string
    value: number
    ownerId: number
    createdAt?: Date | string
    updatedAt?: Date | string
    transactionsForms?: TransactionsFormsUncheckedCreateNestedManyWithoutHolderInput
  }

  export type HolderUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    value?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    owner?: UserUpdateOneRequiredWithoutHoldersNestedInput
    transactionsForms?: TransactionsFormsUpdateManyWithoutHolderNestedInput
  }

  export type HolderUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    value?: FloatFieldUpdateOperationsInput | number
    ownerId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    transactionsForms?: TransactionsFormsUncheckedUpdateManyWithoutHolderNestedInput
  }

  export type HolderCreateManyInput = {
    id?: number
    name: string
    value: number
    ownerId: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type HolderUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    value?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type HolderUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    value?: FloatFieldUpdateOperationsInput | number
    ownerId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RecurrenceCreateInput = {
    name: string
    reptition: number
    range: number
    value: number
    type: number
    createdAt?: Date | string
    updatedAt?: Date | string
    category: AccountPlanCreateNestedOneWithoutRecurrencesInput
  }

  export type RecurrenceUncheckedCreateInput = {
    id?: number
    name: string
    reptition: number
    range: number
    value: number
    categoryId: number
    type: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type RecurrenceUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    reptition?: IntFieldUpdateOperationsInput | number
    range?: IntFieldUpdateOperationsInput | number
    value?: FloatFieldUpdateOperationsInput | number
    type?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    category?: AccountPlanUpdateOneRequiredWithoutRecurrencesNestedInput
  }

  export type RecurrenceUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    reptition?: IntFieldUpdateOperationsInput | number
    range?: IntFieldUpdateOperationsInput | number
    value?: FloatFieldUpdateOperationsInput | number
    categoryId?: IntFieldUpdateOperationsInput | number
    type?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RecurrenceCreateManyInput = {
    id?: number
    name: string
    reptition: number
    range: number
    value: number
    categoryId: number
    type: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type RecurrenceUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    reptition?: IntFieldUpdateOperationsInput | number
    range?: IntFieldUpdateOperationsInput | number
    value?: FloatFieldUpdateOperationsInput | number
    type?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RecurrenceUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    reptition?: IntFieldUpdateOperationsInput | number
    range?: IntFieldUpdateOperationsInput | number
    value?: FloatFieldUpdateOperationsInput | number
    categoryId?: IntFieldUpdateOperationsInput | number
    type?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AccountCreateInput = {
    description: string
    balance: number
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutAccountsInput
    parcels?: ParcelCreateNestedManyWithoutAccountInput
    category: AccountPlanCreateNestedOneWithoutAccountsInput
    financialTransactions?: FinancialTransactionCreateNestedManyWithoutAccountInput
  }

  export type AccountUncheckedCreateInput = {
    id?: number
    description: string
    balance: number
    userId: number
    categoryId: number
    createdAt?: Date | string
    updatedAt?: Date | string
    parcels?: ParcelUncheckedCreateNestedManyWithoutAccountInput
    financialTransactions?: FinancialTransactionUncheckedCreateNestedManyWithoutAccountInput
  }

  export type AccountUpdateInput = {
    description?: StringFieldUpdateOperationsInput | string
    balance?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutAccountsNestedInput
    parcels?: ParcelUpdateManyWithoutAccountNestedInput
    category?: AccountPlanUpdateOneRequiredWithoutAccountsNestedInput
    financialTransactions?: FinancialTransactionUpdateManyWithoutAccountNestedInput
  }

  export type AccountUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    description?: StringFieldUpdateOperationsInput | string
    balance?: FloatFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    categoryId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    parcels?: ParcelUncheckedUpdateManyWithoutAccountNestedInput
    financialTransactions?: FinancialTransactionUncheckedUpdateManyWithoutAccountNestedInput
  }

  export type AccountCreateManyInput = {
    id?: number
    description: string
    balance: number
    userId: number
    categoryId: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type AccountUpdateManyMutationInput = {
    description?: StringFieldUpdateOperationsInput | string
    balance?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AccountUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    description?: StringFieldUpdateOperationsInput | string
    balance?: FloatFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    categoryId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ParcelCreateInput = {
    value: number
    dueDate: Date | string
    competence: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
    category: AccountPlanCreateNestedOneWithoutParcelsInput
    account: AccountCreateNestedOneWithoutParcelsInput
    FinancialTransactions?: FinancialTransactionCreateNestedManyWithoutParcelInput
  }

  export type ParcelUncheckedCreateInput = {
    id?: number
    value: number
    dueDate: Date | string
    competence: Date | string
    accountId: number
    categoryId: number
    createdAt?: Date | string
    updatedAt?: Date | string
    FinancialTransactions?: FinancialTransactionUncheckedCreateNestedManyWithoutParcelInput
  }

  export type ParcelUpdateInput = {
    value?: FloatFieldUpdateOperationsInput | number
    dueDate?: DateTimeFieldUpdateOperationsInput | Date | string
    competence?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    category?: AccountPlanUpdateOneRequiredWithoutParcelsNestedInput
    account?: AccountUpdateOneRequiredWithoutParcelsNestedInput
    FinancialTransactions?: FinancialTransactionUpdateManyWithoutParcelNestedInput
  }

  export type ParcelUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    value?: FloatFieldUpdateOperationsInput | number
    dueDate?: DateTimeFieldUpdateOperationsInput | Date | string
    competence?: DateTimeFieldUpdateOperationsInput | Date | string
    accountId?: IntFieldUpdateOperationsInput | number
    categoryId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    FinancialTransactions?: FinancialTransactionUncheckedUpdateManyWithoutParcelNestedInput
  }

  export type ParcelCreateManyInput = {
    id?: number
    value: number
    dueDate: Date | string
    competence: Date | string
    accountId: number
    categoryId: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ParcelUpdateManyMutationInput = {
    value?: FloatFieldUpdateOperationsInput | number
    dueDate?: DateTimeFieldUpdateOperationsInput | Date | string
    competence?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ParcelUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    value?: FloatFieldUpdateOperationsInput | number
    dueDate?: DateTimeFieldUpdateOperationsInput | Date | string
    competence?: DateTimeFieldUpdateOperationsInput | Date | string
    accountId?: IntFieldUpdateOperationsInput | number
    categoryId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TransactionsFormsCreateInput = {
    name: string
    type: number
    createdAt?: Date | string
    updatedAt?: Date | string
    holder: HolderCreateNestedOneWithoutTransactionsFormsInput
    FinancialTransactions?: FinancialTransactionCreateNestedManyWithoutTransactionsFormInput
  }

  export type TransactionsFormsUncheckedCreateInput = {
    id?: number
    name: string
    type: number
    holderId: number
    createdAt?: Date | string
    updatedAt?: Date | string
    FinancialTransactions?: FinancialTransactionUncheckedCreateNestedManyWithoutTransactionsFormInput
  }

  export type TransactionsFormsUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    type?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    holder?: HolderUpdateOneRequiredWithoutTransactionsFormsNestedInput
    FinancialTransactions?: FinancialTransactionUpdateManyWithoutTransactionsFormNestedInput
  }

  export type TransactionsFormsUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    type?: IntFieldUpdateOperationsInput | number
    holderId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    FinancialTransactions?: FinancialTransactionUncheckedUpdateManyWithoutTransactionsFormNestedInput
  }

  export type TransactionsFormsCreateManyInput = {
    id?: number
    name: string
    type: number
    holderId: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TransactionsFormsUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    type?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TransactionsFormsUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    type?: IntFieldUpdateOperationsInput | number
    holderId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FinancialTransactionCreateInput = {
    description: string
    value: number
    createdAt?: Date | string
    updatedAt?: Date | string
    typeTransaction: TransactionTypeCreateNestedOneWithoutFinancialTransactionsInput
    user: UserCreateNestedOneWithoutTransactionsFinancialsInput
    category: AccountPlanCreateNestedOneWithoutFinancialTransactionsInput
    account: AccountCreateNestedOneWithoutFinancialTransactionsInput
    parcel: ParcelCreateNestedOneWithoutFinancialTransactionsInput
    transactionsForm: TransactionsFormsCreateNestedOneWithoutFinancialTransactionsInput
  }

  export type FinancialTransactionUncheckedCreateInput = {
    id?: number
    description: string
    value: number
    userId: number
    transactionsFormsId: number
    categoryId: number
    parcelId: number
    accountId: number
    typeId: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type FinancialTransactionUpdateInput = {
    description?: StringFieldUpdateOperationsInput | string
    value?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    typeTransaction?: TransactionTypeUpdateOneRequiredWithoutFinancialTransactionsNestedInput
    user?: UserUpdateOneRequiredWithoutTransactionsFinancialsNestedInput
    category?: AccountPlanUpdateOneRequiredWithoutFinancialTransactionsNestedInput
    account?: AccountUpdateOneRequiredWithoutFinancialTransactionsNestedInput
    parcel?: ParcelUpdateOneRequiredWithoutFinancialTransactionsNestedInput
    transactionsForm?: TransactionsFormsUpdateOneRequiredWithoutFinancialTransactionsNestedInput
  }

  export type FinancialTransactionUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    description?: StringFieldUpdateOperationsInput | string
    value?: FloatFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    transactionsFormsId?: IntFieldUpdateOperationsInput | number
    categoryId?: IntFieldUpdateOperationsInput | number
    parcelId?: IntFieldUpdateOperationsInput | number
    accountId?: IntFieldUpdateOperationsInput | number
    typeId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FinancialTransactionCreateManyInput = {
    id?: number
    description: string
    value: number
    userId: number
    transactionsFormsId: number
    categoryId: number
    parcelId: number
    accountId: number
    typeId: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type FinancialTransactionUpdateManyMutationInput = {
    description?: StringFieldUpdateOperationsInput | string
    value?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FinancialTransactionUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    description?: StringFieldUpdateOperationsInput | string
    value?: FloatFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    transactionsFormsId?: IntFieldUpdateOperationsInput | number
    categoryId?: IntFieldUpdateOperationsInput | number
    parcelId?: IntFieldUpdateOperationsInput | number
    accountId?: IntFieldUpdateOperationsInput | number
    typeId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TransactionTypeCreateInput = {
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    financialTransactions?: FinancialTransactionCreateNestedManyWithoutTypeTransactionInput
  }

  export type TransactionTypeUncheckedCreateInput = {
    id?: number
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    financialTransactions?: FinancialTransactionUncheckedCreateNestedManyWithoutTypeTransactionInput
  }

  export type TransactionTypeUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    financialTransactions?: FinancialTransactionUpdateManyWithoutTypeTransactionNestedInput
  }

  export type TransactionTypeUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    financialTransactions?: FinancialTransactionUncheckedUpdateManyWithoutTypeTransactionNestedInput
  }

  export type TransactionTypeCreateManyInput = {
    id?: number
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TransactionTypeUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TransactionTypeUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AccountPlanCreateInput = {
    name: string
    type: number
    createdAt?: Date | string
    updatedAt?: Date | string
    recurrences?: RecurrenceCreateNestedManyWithoutCategoryInput
    accounts?: AccountCreateNestedManyWithoutCategoryInput
    parcels?: ParcelCreateNestedManyWithoutCategoryInput
    financialTransactions?: FinancialTransactionCreateNestedManyWithoutCategoryInput
  }

  export type AccountPlanUncheckedCreateInput = {
    id?: number
    name: string
    type: number
    createdAt?: Date | string
    updatedAt?: Date | string
    recurrences?: RecurrenceUncheckedCreateNestedManyWithoutCategoryInput
    accounts?: AccountUncheckedCreateNestedManyWithoutCategoryInput
    parcels?: ParcelUncheckedCreateNestedManyWithoutCategoryInput
    financialTransactions?: FinancialTransactionUncheckedCreateNestedManyWithoutCategoryInput
  }

  export type AccountPlanUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    type?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    recurrences?: RecurrenceUpdateManyWithoutCategoryNestedInput
    accounts?: AccountUpdateManyWithoutCategoryNestedInput
    parcels?: ParcelUpdateManyWithoutCategoryNestedInput
    financialTransactions?: FinancialTransactionUpdateManyWithoutCategoryNestedInput
  }

  export type AccountPlanUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    type?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    recurrences?: RecurrenceUncheckedUpdateManyWithoutCategoryNestedInput
    accounts?: AccountUncheckedUpdateManyWithoutCategoryNestedInput
    parcels?: ParcelUncheckedUpdateManyWithoutCategoryNestedInput
    financialTransactions?: FinancialTransactionUncheckedUpdateManyWithoutCategoryNestedInput
  }

  export type AccountPlanCreateManyInput = {
    id?: number
    name: string
    type: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type AccountPlanUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    type?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AccountPlanUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    type?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type HolderListRelationFilter = {
    every?: HolderWhereInput
    some?: HolderWhereInput
    none?: HolderWhereInput
  }

  export type AccountListRelationFilter = {
    every?: AccountWhereInput
    some?: AccountWhereInput
    none?: AccountWhereInput
  }

  export type FinancialTransactionListRelationFilter = {
    every?: FinancialTransactionWhereInput
    some?: FinancialTransactionWhereInput
    none?: FinancialTransactionWhereInput
  }

  export type HolderOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type AccountOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type FinancialTransactionOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserCountOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    name?: SortOrder
    password?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    name?: SortOrder
    password?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    name?: SortOrder
    password?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type FloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type UserScalarRelationFilter = {
    is?: UserWhereInput
    isNot?: UserWhereInput
  }

  export type TransactionsFormsListRelationFilter = {
    every?: TransactionsFormsWhereInput
    some?: TransactionsFormsWhereInput
    none?: TransactionsFormsWhereInput
  }

  export type TransactionsFormsOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type HolderCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    value?: SortOrder
    ownerId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type HolderAvgOrderByAggregateInput = {
    id?: SortOrder
    value?: SortOrder
    ownerId?: SortOrder
  }

  export type HolderMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    value?: SortOrder
    ownerId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type HolderMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    value?: SortOrder
    ownerId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type HolderSumOrderByAggregateInput = {
    id?: SortOrder
    value?: SortOrder
    ownerId?: SortOrder
  }

  export type FloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type AccountPlanScalarRelationFilter = {
    is?: AccountPlanWhereInput
    isNot?: AccountPlanWhereInput
  }

  export type RecurrenceCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    reptition?: SortOrder
    range?: SortOrder
    value?: SortOrder
    categoryId?: SortOrder
    type?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type RecurrenceAvgOrderByAggregateInput = {
    id?: SortOrder
    reptition?: SortOrder
    range?: SortOrder
    value?: SortOrder
    categoryId?: SortOrder
    type?: SortOrder
  }

  export type RecurrenceMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    reptition?: SortOrder
    range?: SortOrder
    value?: SortOrder
    categoryId?: SortOrder
    type?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type RecurrenceMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    reptition?: SortOrder
    range?: SortOrder
    value?: SortOrder
    categoryId?: SortOrder
    type?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type RecurrenceSumOrderByAggregateInput = {
    id?: SortOrder
    reptition?: SortOrder
    range?: SortOrder
    value?: SortOrder
    categoryId?: SortOrder
    type?: SortOrder
  }

  export type ParcelListRelationFilter = {
    every?: ParcelWhereInput
    some?: ParcelWhereInput
    none?: ParcelWhereInput
  }

  export type ParcelOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type AccountCountOrderByAggregateInput = {
    id?: SortOrder
    description?: SortOrder
    balance?: SortOrder
    userId?: SortOrder
    categoryId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type AccountAvgOrderByAggregateInput = {
    id?: SortOrder
    balance?: SortOrder
    userId?: SortOrder
    categoryId?: SortOrder
  }

  export type AccountMaxOrderByAggregateInput = {
    id?: SortOrder
    description?: SortOrder
    balance?: SortOrder
    userId?: SortOrder
    categoryId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type AccountMinOrderByAggregateInput = {
    id?: SortOrder
    description?: SortOrder
    balance?: SortOrder
    userId?: SortOrder
    categoryId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type AccountSumOrderByAggregateInput = {
    id?: SortOrder
    balance?: SortOrder
    userId?: SortOrder
    categoryId?: SortOrder
  }

  export type AccountScalarRelationFilter = {
    is?: AccountWhereInput
    isNot?: AccountWhereInput
  }

  export type ParcelCountOrderByAggregateInput = {
    id?: SortOrder
    value?: SortOrder
    dueDate?: SortOrder
    competence?: SortOrder
    accountId?: SortOrder
    categoryId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ParcelAvgOrderByAggregateInput = {
    id?: SortOrder
    value?: SortOrder
    accountId?: SortOrder
    categoryId?: SortOrder
  }

  export type ParcelMaxOrderByAggregateInput = {
    id?: SortOrder
    value?: SortOrder
    dueDate?: SortOrder
    competence?: SortOrder
    accountId?: SortOrder
    categoryId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ParcelMinOrderByAggregateInput = {
    id?: SortOrder
    value?: SortOrder
    dueDate?: SortOrder
    competence?: SortOrder
    accountId?: SortOrder
    categoryId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ParcelSumOrderByAggregateInput = {
    id?: SortOrder
    value?: SortOrder
    accountId?: SortOrder
    categoryId?: SortOrder
  }

  export type HolderScalarRelationFilter = {
    is?: HolderWhereInput
    isNot?: HolderWhereInput
  }

  export type TransactionsFormsCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    type?: SortOrder
    holderId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type TransactionsFormsAvgOrderByAggregateInput = {
    id?: SortOrder
    type?: SortOrder
    holderId?: SortOrder
  }

  export type TransactionsFormsMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    type?: SortOrder
    holderId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type TransactionsFormsMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    type?: SortOrder
    holderId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type TransactionsFormsSumOrderByAggregateInput = {
    id?: SortOrder
    type?: SortOrder
    holderId?: SortOrder
  }

  export type TransactionTypeScalarRelationFilter = {
    is?: TransactionTypeWhereInput
    isNot?: TransactionTypeWhereInput
  }

  export type ParcelScalarRelationFilter = {
    is?: ParcelWhereInput
    isNot?: ParcelWhereInput
  }

  export type TransactionsFormsScalarRelationFilter = {
    is?: TransactionsFormsWhereInput
    isNot?: TransactionsFormsWhereInput
  }

  export type FinancialTransactionCountOrderByAggregateInput = {
    id?: SortOrder
    description?: SortOrder
    value?: SortOrder
    userId?: SortOrder
    transactionsFormsId?: SortOrder
    categoryId?: SortOrder
    parcelId?: SortOrder
    accountId?: SortOrder
    typeId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type FinancialTransactionAvgOrderByAggregateInput = {
    id?: SortOrder
    value?: SortOrder
    userId?: SortOrder
    transactionsFormsId?: SortOrder
    categoryId?: SortOrder
    parcelId?: SortOrder
    accountId?: SortOrder
    typeId?: SortOrder
  }

  export type FinancialTransactionMaxOrderByAggregateInput = {
    id?: SortOrder
    description?: SortOrder
    value?: SortOrder
    userId?: SortOrder
    transactionsFormsId?: SortOrder
    categoryId?: SortOrder
    parcelId?: SortOrder
    accountId?: SortOrder
    typeId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type FinancialTransactionMinOrderByAggregateInput = {
    id?: SortOrder
    description?: SortOrder
    value?: SortOrder
    userId?: SortOrder
    transactionsFormsId?: SortOrder
    categoryId?: SortOrder
    parcelId?: SortOrder
    accountId?: SortOrder
    typeId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type FinancialTransactionSumOrderByAggregateInput = {
    id?: SortOrder
    value?: SortOrder
    userId?: SortOrder
    transactionsFormsId?: SortOrder
    categoryId?: SortOrder
    parcelId?: SortOrder
    accountId?: SortOrder
    typeId?: SortOrder
  }

  export type TransactionTypeCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type TransactionTypeAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type TransactionTypeMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type TransactionTypeMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type TransactionTypeSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type RecurrenceListRelationFilter = {
    every?: RecurrenceWhereInput
    some?: RecurrenceWhereInput
    none?: RecurrenceWhereInput
  }

  export type RecurrenceOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type AccountPlanCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    type?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type AccountPlanAvgOrderByAggregateInput = {
    id?: SortOrder
    type?: SortOrder
  }

  export type AccountPlanMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    type?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type AccountPlanMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    type?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type AccountPlanSumOrderByAggregateInput = {
    id?: SortOrder
    type?: SortOrder
  }

  export type HolderCreateNestedManyWithoutOwnerInput = {
    create?: XOR<HolderCreateWithoutOwnerInput, HolderUncheckedCreateWithoutOwnerInput> | HolderCreateWithoutOwnerInput[] | HolderUncheckedCreateWithoutOwnerInput[]
    connectOrCreate?: HolderCreateOrConnectWithoutOwnerInput | HolderCreateOrConnectWithoutOwnerInput[]
    createMany?: HolderCreateManyOwnerInputEnvelope
    connect?: HolderWhereUniqueInput | HolderWhereUniqueInput[]
  }

  export type AccountCreateNestedManyWithoutUserInput = {
    create?: XOR<AccountCreateWithoutUserInput, AccountUncheckedCreateWithoutUserInput> | AccountCreateWithoutUserInput[] | AccountUncheckedCreateWithoutUserInput[]
    connectOrCreate?: AccountCreateOrConnectWithoutUserInput | AccountCreateOrConnectWithoutUserInput[]
    createMany?: AccountCreateManyUserInputEnvelope
    connect?: AccountWhereUniqueInput | AccountWhereUniqueInput[]
  }

  export type FinancialTransactionCreateNestedManyWithoutUserInput = {
    create?: XOR<FinancialTransactionCreateWithoutUserInput, FinancialTransactionUncheckedCreateWithoutUserInput> | FinancialTransactionCreateWithoutUserInput[] | FinancialTransactionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: FinancialTransactionCreateOrConnectWithoutUserInput | FinancialTransactionCreateOrConnectWithoutUserInput[]
    createMany?: FinancialTransactionCreateManyUserInputEnvelope
    connect?: FinancialTransactionWhereUniqueInput | FinancialTransactionWhereUniqueInput[]
  }

  export type HolderUncheckedCreateNestedManyWithoutOwnerInput = {
    create?: XOR<HolderCreateWithoutOwnerInput, HolderUncheckedCreateWithoutOwnerInput> | HolderCreateWithoutOwnerInput[] | HolderUncheckedCreateWithoutOwnerInput[]
    connectOrCreate?: HolderCreateOrConnectWithoutOwnerInput | HolderCreateOrConnectWithoutOwnerInput[]
    createMany?: HolderCreateManyOwnerInputEnvelope
    connect?: HolderWhereUniqueInput | HolderWhereUniqueInput[]
  }

  export type AccountUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<AccountCreateWithoutUserInput, AccountUncheckedCreateWithoutUserInput> | AccountCreateWithoutUserInput[] | AccountUncheckedCreateWithoutUserInput[]
    connectOrCreate?: AccountCreateOrConnectWithoutUserInput | AccountCreateOrConnectWithoutUserInput[]
    createMany?: AccountCreateManyUserInputEnvelope
    connect?: AccountWhereUniqueInput | AccountWhereUniqueInput[]
  }

  export type FinancialTransactionUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<FinancialTransactionCreateWithoutUserInput, FinancialTransactionUncheckedCreateWithoutUserInput> | FinancialTransactionCreateWithoutUserInput[] | FinancialTransactionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: FinancialTransactionCreateOrConnectWithoutUserInput | FinancialTransactionCreateOrConnectWithoutUserInput[]
    createMany?: FinancialTransactionCreateManyUserInputEnvelope
    connect?: FinancialTransactionWhereUniqueInput | FinancialTransactionWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type HolderUpdateManyWithoutOwnerNestedInput = {
    create?: XOR<HolderCreateWithoutOwnerInput, HolderUncheckedCreateWithoutOwnerInput> | HolderCreateWithoutOwnerInput[] | HolderUncheckedCreateWithoutOwnerInput[]
    connectOrCreate?: HolderCreateOrConnectWithoutOwnerInput | HolderCreateOrConnectWithoutOwnerInput[]
    upsert?: HolderUpsertWithWhereUniqueWithoutOwnerInput | HolderUpsertWithWhereUniqueWithoutOwnerInput[]
    createMany?: HolderCreateManyOwnerInputEnvelope
    set?: HolderWhereUniqueInput | HolderWhereUniqueInput[]
    disconnect?: HolderWhereUniqueInput | HolderWhereUniqueInput[]
    delete?: HolderWhereUniqueInput | HolderWhereUniqueInput[]
    connect?: HolderWhereUniqueInput | HolderWhereUniqueInput[]
    update?: HolderUpdateWithWhereUniqueWithoutOwnerInput | HolderUpdateWithWhereUniqueWithoutOwnerInput[]
    updateMany?: HolderUpdateManyWithWhereWithoutOwnerInput | HolderUpdateManyWithWhereWithoutOwnerInput[]
    deleteMany?: HolderScalarWhereInput | HolderScalarWhereInput[]
  }

  export type AccountUpdateManyWithoutUserNestedInput = {
    create?: XOR<AccountCreateWithoutUserInput, AccountUncheckedCreateWithoutUserInput> | AccountCreateWithoutUserInput[] | AccountUncheckedCreateWithoutUserInput[]
    connectOrCreate?: AccountCreateOrConnectWithoutUserInput | AccountCreateOrConnectWithoutUserInput[]
    upsert?: AccountUpsertWithWhereUniqueWithoutUserInput | AccountUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: AccountCreateManyUserInputEnvelope
    set?: AccountWhereUniqueInput | AccountWhereUniqueInput[]
    disconnect?: AccountWhereUniqueInput | AccountWhereUniqueInput[]
    delete?: AccountWhereUniqueInput | AccountWhereUniqueInput[]
    connect?: AccountWhereUniqueInput | AccountWhereUniqueInput[]
    update?: AccountUpdateWithWhereUniqueWithoutUserInput | AccountUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: AccountUpdateManyWithWhereWithoutUserInput | AccountUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: AccountScalarWhereInput | AccountScalarWhereInput[]
  }

  export type FinancialTransactionUpdateManyWithoutUserNestedInput = {
    create?: XOR<FinancialTransactionCreateWithoutUserInput, FinancialTransactionUncheckedCreateWithoutUserInput> | FinancialTransactionCreateWithoutUserInput[] | FinancialTransactionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: FinancialTransactionCreateOrConnectWithoutUserInput | FinancialTransactionCreateOrConnectWithoutUserInput[]
    upsert?: FinancialTransactionUpsertWithWhereUniqueWithoutUserInput | FinancialTransactionUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: FinancialTransactionCreateManyUserInputEnvelope
    set?: FinancialTransactionWhereUniqueInput | FinancialTransactionWhereUniqueInput[]
    disconnect?: FinancialTransactionWhereUniqueInput | FinancialTransactionWhereUniqueInput[]
    delete?: FinancialTransactionWhereUniqueInput | FinancialTransactionWhereUniqueInput[]
    connect?: FinancialTransactionWhereUniqueInput | FinancialTransactionWhereUniqueInput[]
    update?: FinancialTransactionUpdateWithWhereUniqueWithoutUserInput | FinancialTransactionUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: FinancialTransactionUpdateManyWithWhereWithoutUserInput | FinancialTransactionUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: FinancialTransactionScalarWhereInput | FinancialTransactionScalarWhereInput[]
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type HolderUncheckedUpdateManyWithoutOwnerNestedInput = {
    create?: XOR<HolderCreateWithoutOwnerInput, HolderUncheckedCreateWithoutOwnerInput> | HolderCreateWithoutOwnerInput[] | HolderUncheckedCreateWithoutOwnerInput[]
    connectOrCreate?: HolderCreateOrConnectWithoutOwnerInput | HolderCreateOrConnectWithoutOwnerInput[]
    upsert?: HolderUpsertWithWhereUniqueWithoutOwnerInput | HolderUpsertWithWhereUniqueWithoutOwnerInput[]
    createMany?: HolderCreateManyOwnerInputEnvelope
    set?: HolderWhereUniqueInput | HolderWhereUniqueInput[]
    disconnect?: HolderWhereUniqueInput | HolderWhereUniqueInput[]
    delete?: HolderWhereUniqueInput | HolderWhereUniqueInput[]
    connect?: HolderWhereUniqueInput | HolderWhereUniqueInput[]
    update?: HolderUpdateWithWhereUniqueWithoutOwnerInput | HolderUpdateWithWhereUniqueWithoutOwnerInput[]
    updateMany?: HolderUpdateManyWithWhereWithoutOwnerInput | HolderUpdateManyWithWhereWithoutOwnerInput[]
    deleteMany?: HolderScalarWhereInput | HolderScalarWhereInput[]
  }

  export type AccountUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<AccountCreateWithoutUserInput, AccountUncheckedCreateWithoutUserInput> | AccountCreateWithoutUserInput[] | AccountUncheckedCreateWithoutUserInput[]
    connectOrCreate?: AccountCreateOrConnectWithoutUserInput | AccountCreateOrConnectWithoutUserInput[]
    upsert?: AccountUpsertWithWhereUniqueWithoutUserInput | AccountUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: AccountCreateManyUserInputEnvelope
    set?: AccountWhereUniqueInput | AccountWhereUniqueInput[]
    disconnect?: AccountWhereUniqueInput | AccountWhereUniqueInput[]
    delete?: AccountWhereUniqueInput | AccountWhereUniqueInput[]
    connect?: AccountWhereUniqueInput | AccountWhereUniqueInput[]
    update?: AccountUpdateWithWhereUniqueWithoutUserInput | AccountUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: AccountUpdateManyWithWhereWithoutUserInput | AccountUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: AccountScalarWhereInput | AccountScalarWhereInput[]
  }

  export type FinancialTransactionUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<FinancialTransactionCreateWithoutUserInput, FinancialTransactionUncheckedCreateWithoutUserInput> | FinancialTransactionCreateWithoutUserInput[] | FinancialTransactionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: FinancialTransactionCreateOrConnectWithoutUserInput | FinancialTransactionCreateOrConnectWithoutUserInput[]
    upsert?: FinancialTransactionUpsertWithWhereUniqueWithoutUserInput | FinancialTransactionUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: FinancialTransactionCreateManyUserInputEnvelope
    set?: FinancialTransactionWhereUniqueInput | FinancialTransactionWhereUniqueInput[]
    disconnect?: FinancialTransactionWhereUniqueInput | FinancialTransactionWhereUniqueInput[]
    delete?: FinancialTransactionWhereUniqueInput | FinancialTransactionWhereUniqueInput[]
    connect?: FinancialTransactionWhereUniqueInput | FinancialTransactionWhereUniqueInput[]
    update?: FinancialTransactionUpdateWithWhereUniqueWithoutUserInput | FinancialTransactionUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: FinancialTransactionUpdateManyWithWhereWithoutUserInput | FinancialTransactionUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: FinancialTransactionScalarWhereInput | FinancialTransactionScalarWhereInput[]
  }

  export type UserCreateNestedOneWithoutHoldersInput = {
    create?: XOR<UserCreateWithoutHoldersInput, UserUncheckedCreateWithoutHoldersInput>
    connectOrCreate?: UserCreateOrConnectWithoutHoldersInput
    connect?: UserWhereUniqueInput
  }

  export type TransactionsFormsCreateNestedManyWithoutHolderInput = {
    create?: XOR<TransactionsFormsCreateWithoutHolderInput, TransactionsFormsUncheckedCreateWithoutHolderInput> | TransactionsFormsCreateWithoutHolderInput[] | TransactionsFormsUncheckedCreateWithoutHolderInput[]
    connectOrCreate?: TransactionsFormsCreateOrConnectWithoutHolderInput | TransactionsFormsCreateOrConnectWithoutHolderInput[]
    createMany?: TransactionsFormsCreateManyHolderInputEnvelope
    connect?: TransactionsFormsWhereUniqueInput | TransactionsFormsWhereUniqueInput[]
  }

  export type TransactionsFormsUncheckedCreateNestedManyWithoutHolderInput = {
    create?: XOR<TransactionsFormsCreateWithoutHolderInput, TransactionsFormsUncheckedCreateWithoutHolderInput> | TransactionsFormsCreateWithoutHolderInput[] | TransactionsFormsUncheckedCreateWithoutHolderInput[]
    connectOrCreate?: TransactionsFormsCreateOrConnectWithoutHolderInput | TransactionsFormsCreateOrConnectWithoutHolderInput[]
    createMany?: TransactionsFormsCreateManyHolderInputEnvelope
    connect?: TransactionsFormsWhereUniqueInput | TransactionsFormsWhereUniqueInput[]
  }

  export type FloatFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type UserUpdateOneRequiredWithoutHoldersNestedInput = {
    create?: XOR<UserCreateWithoutHoldersInput, UserUncheckedCreateWithoutHoldersInput>
    connectOrCreate?: UserCreateOrConnectWithoutHoldersInput
    upsert?: UserUpsertWithoutHoldersInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutHoldersInput, UserUpdateWithoutHoldersInput>, UserUncheckedUpdateWithoutHoldersInput>
  }

  export type TransactionsFormsUpdateManyWithoutHolderNestedInput = {
    create?: XOR<TransactionsFormsCreateWithoutHolderInput, TransactionsFormsUncheckedCreateWithoutHolderInput> | TransactionsFormsCreateWithoutHolderInput[] | TransactionsFormsUncheckedCreateWithoutHolderInput[]
    connectOrCreate?: TransactionsFormsCreateOrConnectWithoutHolderInput | TransactionsFormsCreateOrConnectWithoutHolderInput[]
    upsert?: TransactionsFormsUpsertWithWhereUniqueWithoutHolderInput | TransactionsFormsUpsertWithWhereUniqueWithoutHolderInput[]
    createMany?: TransactionsFormsCreateManyHolderInputEnvelope
    set?: TransactionsFormsWhereUniqueInput | TransactionsFormsWhereUniqueInput[]
    disconnect?: TransactionsFormsWhereUniqueInput | TransactionsFormsWhereUniqueInput[]
    delete?: TransactionsFormsWhereUniqueInput | TransactionsFormsWhereUniqueInput[]
    connect?: TransactionsFormsWhereUniqueInput | TransactionsFormsWhereUniqueInput[]
    update?: TransactionsFormsUpdateWithWhereUniqueWithoutHolderInput | TransactionsFormsUpdateWithWhereUniqueWithoutHolderInput[]
    updateMany?: TransactionsFormsUpdateManyWithWhereWithoutHolderInput | TransactionsFormsUpdateManyWithWhereWithoutHolderInput[]
    deleteMany?: TransactionsFormsScalarWhereInput | TransactionsFormsScalarWhereInput[]
  }

  export type TransactionsFormsUncheckedUpdateManyWithoutHolderNestedInput = {
    create?: XOR<TransactionsFormsCreateWithoutHolderInput, TransactionsFormsUncheckedCreateWithoutHolderInput> | TransactionsFormsCreateWithoutHolderInput[] | TransactionsFormsUncheckedCreateWithoutHolderInput[]
    connectOrCreate?: TransactionsFormsCreateOrConnectWithoutHolderInput | TransactionsFormsCreateOrConnectWithoutHolderInput[]
    upsert?: TransactionsFormsUpsertWithWhereUniqueWithoutHolderInput | TransactionsFormsUpsertWithWhereUniqueWithoutHolderInput[]
    createMany?: TransactionsFormsCreateManyHolderInputEnvelope
    set?: TransactionsFormsWhereUniqueInput | TransactionsFormsWhereUniqueInput[]
    disconnect?: TransactionsFormsWhereUniqueInput | TransactionsFormsWhereUniqueInput[]
    delete?: TransactionsFormsWhereUniqueInput | TransactionsFormsWhereUniqueInput[]
    connect?: TransactionsFormsWhereUniqueInput | TransactionsFormsWhereUniqueInput[]
    update?: TransactionsFormsUpdateWithWhereUniqueWithoutHolderInput | TransactionsFormsUpdateWithWhereUniqueWithoutHolderInput[]
    updateMany?: TransactionsFormsUpdateManyWithWhereWithoutHolderInput | TransactionsFormsUpdateManyWithWhereWithoutHolderInput[]
    deleteMany?: TransactionsFormsScalarWhereInput | TransactionsFormsScalarWhereInput[]
  }

  export type AccountPlanCreateNestedOneWithoutRecurrencesInput = {
    create?: XOR<AccountPlanCreateWithoutRecurrencesInput, AccountPlanUncheckedCreateWithoutRecurrencesInput>
    connectOrCreate?: AccountPlanCreateOrConnectWithoutRecurrencesInput
    connect?: AccountPlanWhereUniqueInput
  }

  export type AccountPlanUpdateOneRequiredWithoutRecurrencesNestedInput = {
    create?: XOR<AccountPlanCreateWithoutRecurrencesInput, AccountPlanUncheckedCreateWithoutRecurrencesInput>
    connectOrCreate?: AccountPlanCreateOrConnectWithoutRecurrencesInput
    upsert?: AccountPlanUpsertWithoutRecurrencesInput
    connect?: AccountPlanWhereUniqueInput
    update?: XOR<XOR<AccountPlanUpdateToOneWithWhereWithoutRecurrencesInput, AccountPlanUpdateWithoutRecurrencesInput>, AccountPlanUncheckedUpdateWithoutRecurrencesInput>
  }

  export type UserCreateNestedOneWithoutAccountsInput = {
    create?: XOR<UserCreateWithoutAccountsInput, UserUncheckedCreateWithoutAccountsInput>
    connectOrCreate?: UserCreateOrConnectWithoutAccountsInput
    connect?: UserWhereUniqueInput
  }

  export type ParcelCreateNestedManyWithoutAccountInput = {
    create?: XOR<ParcelCreateWithoutAccountInput, ParcelUncheckedCreateWithoutAccountInput> | ParcelCreateWithoutAccountInput[] | ParcelUncheckedCreateWithoutAccountInput[]
    connectOrCreate?: ParcelCreateOrConnectWithoutAccountInput | ParcelCreateOrConnectWithoutAccountInput[]
    createMany?: ParcelCreateManyAccountInputEnvelope
    connect?: ParcelWhereUniqueInput | ParcelWhereUniqueInput[]
  }

  export type AccountPlanCreateNestedOneWithoutAccountsInput = {
    create?: XOR<AccountPlanCreateWithoutAccountsInput, AccountPlanUncheckedCreateWithoutAccountsInput>
    connectOrCreate?: AccountPlanCreateOrConnectWithoutAccountsInput
    connect?: AccountPlanWhereUniqueInput
  }

  export type FinancialTransactionCreateNestedManyWithoutAccountInput = {
    create?: XOR<FinancialTransactionCreateWithoutAccountInput, FinancialTransactionUncheckedCreateWithoutAccountInput> | FinancialTransactionCreateWithoutAccountInput[] | FinancialTransactionUncheckedCreateWithoutAccountInput[]
    connectOrCreate?: FinancialTransactionCreateOrConnectWithoutAccountInput | FinancialTransactionCreateOrConnectWithoutAccountInput[]
    createMany?: FinancialTransactionCreateManyAccountInputEnvelope
    connect?: FinancialTransactionWhereUniqueInput | FinancialTransactionWhereUniqueInput[]
  }

  export type ParcelUncheckedCreateNestedManyWithoutAccountInput = {
    create?: XOR<ParcelCreateWithoutAccountInput, ParcelUncheckedCreateWithoutAccountInput> | ParcelCreateWithoutAccountInput[] | ParcelUncheckedCreateWithoutAccountInput[]
    connectOrCreate?: ParcelCreateOrConnectWithoutAccountInput | ParcelCreateOrConnectWithoutAccountInput[]
    createMany?: ParcelCreateManyAccountInputEnvelope
    connect?: ParcelWhereUniqueInput | ParcelWhereUniqueInput[]
  }

  export type FinancialTransactionUncheckedCreateNestedManyWithoutAccountInput = {
    create?: XOR<FinancialTransactionCreateWithoutAccountInput, FinancialTransactionUncheckedCreateWithoutAccountInput> | FinancialTransactionCreateWithoutAccountInput[] | FinancialTransactionUncheckedCreateWithoutAccountInput[]
    connectOrCreate?: FinancialTransactionCreateOrConnectWithoutAccountInput | FinancialTransactionCreateOrConnectWithoutAccountInput[]
    createMany?: FinancialTransactionCreateManyAccountInputEnvelope
    connect?: FinancialTransactionWhereUniqueInput | FinancialTransactionWhereUniqueInput[]
  }

  export type UserUpdateOneRequiredWithoutAccountsNestedInput = {
    create?: XOR<UserCreateWithoutAccountsInput, UserUncheckedCreateWithoutAccountsInput>
    connectOrCreate?: UserCreateOrConnectWithoutAccountsInput
    upsert?: UserUpsertWithoutAccountsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutAccountsInput, UserUpdateWithoutAccountsInput>, UserUncheckedUpdateWithoutAccountsInput>
  }

  export type ParcelUpdateManyWithoutAccountNestedInput = {
    create?: XOR<ParcelCreateWithoutAccountInput, ParcelUncheckedCreateWithoutAccountInput> | ParcelCreateWithoutAccountInput[] | ParcelUncheckedCreateWithoutAccountInput[]
    connectOrCreate?: ParcelCreateOrConnectWithoutAccountInput | ParcelCreateOrConnectWithoutAccountInput[]
    upsert?: ParcelUpsertWithWhereUniqueWithoutAccountInput | ParcelUpsertWithWhereUniqueWithoutAccountInput[]
    createMany?: ParcelCreateManyAccountInputEnvelope
    set?: ParcelWhereUniqueInput | ParcelWhereUniqueInput[]
    disconnect?: ParcelWhereUniqueInput | ParcelWhereUniqueInput[]
    delete?: ParcelWhereUniqueInput | ParcelWhereUniqueInput[]
    connect?: ParcelWhereUniqueInput | ParcelWhereUniqueInput[]
    update?: ParcelUpdateWithWhereUniqueWithoutAccountInput | ParcelUpdateWithWhereUniqueWithoutAccountInput[]
    updateMany?: ParcelUpdateManyWithWhereWithoutAccountInput | ParcelUpdateManyWithWhereWithoutAccountInput[]
    deleteMany?: ParcelScalarWhereInput | ParcelScalarWhereInput[]
  }

  export type AccountPlanUpdateOneRequiredWithoutAccountsNestedInput = {
    create?: XOR<AccountPlanCreateWithoutAccountsInput, AccountPlanUncheckedCreateWithoutAccountsInput>
    connectOrCreate?: AccountPlanCreateOrConnectWithoutAccountsInput
    upsert?: AccountPlanUpsertWithoutAccountsInput
    connect?: AccountPlanWhereUniqueInput
    update?: XOR<XOR<AccountPlanUpdateToOneWithWhereWithoutAccountsInput, AccountPlanUpdateWithoutAccountsInput>, AccountPlanUncheckedUpdateWithoutAccountsInput>
  }

  export type FinancialTransactionUpdateManyWithoutAccountNestedInput = {
    create?: XOR<FinancialTransactionCreateWithoutAccountInput, FinancialTransactionUncheckedCreateWithoutAccountInput> | FinancialTransactionCreateWithoutAccountInput[] | FinancialTransactionUncheckedCreateWithoutAccountInput[]
    connectOrCreate?: FinancialTransactionCreateOrConnectWithoutAccountInput | FinancialTransactionCreateOrConnectWithoutAccountInput[]
    upsert?: FinancialTransactionUpsertWithWhereUniqueWithoutAccountInput | FinancialTransactionUpsertWithWhereUniqueWithoutAccountInput[]
    createMany?: FinancialTransactionCreateManyAccountInputEnvelope
    set?: FinancialTransactionWhereUniqueInput | FinancialTransactionWhereUniqueInput[]
    disconnect?: FinancialTransactionWhereUniqueInput | FinancialTransactionWhereUniqueInput[]
    delete?: FinancialTransactionWhereUniqueInput | FinancialTransactionWhereUniqueInput[]
    connect?: FinancialTransactionWhereUniqueInput | FinancialTransactionWhereUniqueInput[]
    update?: FinancialTransactionUpdateWithWhereUniqueWithoutAccountInput | FinancialTransactionUpdateWithWhereUniqueWithoutAccountInput[]
    updateMany?: FinancialTransactionUpdateManyWithWhereWithoutAccountInput | FinancialTransactionUpdateManyWithWhereWithoutAccountInput[]
    deleteMany?: FinancialTransactionScalarWhereInput | FinancialTransactionScalarWhereInput[]
  }

  export type ParcelUncheckedUpdateManyWithoutAccountNestedInput = {
    create?: XOR<ParcelCreateWithoutAccountInput, ParcelUncheckedCreateWithoutAccountInput> | ParcelCreateWithoutAccountInput[] | ParcelUncheckedCreateWithoutAccountInput[]
    connectOrCreate?: ParcelCreateOrConnectWithoutAccountInput | ParcelCreateOrConnectWithoutAccountInput[]
    upsert?: ParcelUpsertWithWhereUniqueWithoutAccountInput | ParcelUpsertWithWhereUniqueWithoutAccountInput[]
    createMany?: ParcelCreateManyAccountInputEnvelope
    set?: ParcelWhereUniqueInput | ParcelWhereUniqueInput[]
    disconnect?: ParcelWhereUniqueInput | ParcelWhereUniqueInput[]
    delete?: ParcelWhereUniqueInput | ParcelWhereUniqueInput[]
    connect?: ParcelWhereUniqueInput | ParcelWhereUniqueInput[]
    update?: ParcelUpdateWithWhereUniqueWithoutAccountInput | ParcelUpdateWithWhereUniqueWithoutAccountInput[]
    updateMany?: ParcelUpdateManyWithWhereWithoutAccountInput | ParcelUpdateManyWithWhereWithoutAccountInput[]
    deleteMany?: ParcelScalarWhereInput | ParcelScalarWhereInput[]
  }

  export type FinancialTransactionUncheckedUpdateManyWithoutAccountNestedInput = {
    create?: XOR<FinancialTransactionCreateWithoutAccountInput, FinancialTransactionUncheckedCreateWithoutAccountInput> | FinancialTransactionCreateWithoutAccountInput[] | FinancialTransactionUncheckedCreateWithoutAccountInput[]
    connectOrCreate?: FinancialTransactionCreateOrConnectWithoutAccountInput | FinancialTransactionCreateOrConnectWithoutAccountInput[]
    upsert?: FinancialTransactionUpsertWithWhereUniqueWithoutAccountInput | FinancialTransactionUpsertWithWhereUniqueWithoutAccountInput[]
    createMany?: FinancialTransactionCreateManyAccountInputEnvelope
    set?: FinancialTransactionWhereUniqueInput | FinancialTransactionWhereUniqueInput[]
    disconnect?: FinancialTransactionWhereUniqueInput | FinancialTransactionWhereUniqueInput[]
    delete?: FinancialTransactionWhereUniqueInput | FinancialTransactionWhereUniqueInput[]
    connect?: FinancialTransactionWhereUniqueInput | FinancialTransactionWhereUniqueInput[]
    update?: FinancialTransactionUpdateWithWhereUniqueWithoutAccountInput | FinancialTransactionUpdateWithWhereUniqueWithoutAccountInput[]
    updateMany?: FinancialTransactionUpdateManyWithWhereWithoutAccountInput | FinancialTransactionUpdateManyWithWhereWithoutAccountInput[]
    deleteMany?: FinancialTransactionScalarWhereInput | FinancialTransactionScalarWhereInput[]
  }

  export type AccountPlanCreateNestedOneWithoutParcelsInput = {
    create?: XOR<AccountPlanCreateWithoutParcelsInput, AccountPlanUncheckedCreateWithoutParcelsInput>
    connectOrCreate?: AccountPlanCreateOrConnectWithoutParcelsInput
    connect?: AccountPlanWhereUniqueInput
  }

  export type AccountCreateNestedOneWithoutParcelsInput = {
    create?: XOR<AccountCreateWithoutParcelsInput, AccountUncheckedCreateWithoutParcelsInput>
    connectOrCreate?: AccountCreateOrConnectWithoutParcelsInput
    connect?: AccountWhereUniqueInput
  }

  export type FinancialTransactionCreateNestedManyWithoutParcelInput = {
    create?: XOR<FinancialTransactionCreateWithoutParcelInput, FinancialTransactionUncheckedCreateWithoutParcelInput> | FinancialTransactionCreateWithoutParcelInput[] | FinancialTransactionUncheckedCreateWithoutParcelInput[]
    connectOrCreate?: FinancialTransactionCreateOrConnectWithoutParcelInput | FinancialTransactionCreateOrConnectWithoutParcelInput[]
    createMany?: FinancialTransactionCreateManyParcelInputEnvelope
    connect?: FinancialTransactionWhereUniqueInput | FinancialTransactionWhereUniqueInput[]
  }

  export type FinancialTransactionUncheckedCreateNestedManyWithoutParcelInput = {
    create?: XOR<FinancialTransactionCreateWithoutParcelInput, FinancialTransactionUncheckedCreateWithoutParcelInput> | FinancialTransactionCreateWithoutParcelInput[] | FinancialTransactionUncheckedCreateWithoutParcelInput[]
    connectOrCreate?: FinancialTransactionCreateOrConnectWithoutParcelInput | FinancialTransactionCreateOrConnectWithoutParcelInput[]
    createMany?: FinancialTransactionCreateManyParcelInputEnvelope
    connect?: FinancialTransactionWhereUniqueInput | FinancialTransactionWhereUniqueInput[]
  }

  export type AccountPlanUpdateOneRequiredWithoutParcelsNestedInput = {
    create?: XOR<AccountPlanCreateWithoutParcelsInput, AccountPlanUncheckedCreateWithoutParcelsInput>
    connectOrCreate?: AccountPlanCreateOrConnectWithoutParcelsInput
    upsert?: AccountPlanUpsertWithoutParcelsInput
    connect?: AccountPlanWhereUniqueInput
    update?: XOR<XOR<AccountPlanUpdateToOneWithWhereWithoutParcelsInput, AccountPlanUpdateWithoutParcelsInput>, AccountPlanUncheckedUpdateWithoutParcelsInput>
  }

  export type AccountUpdateOneRequiredWithoutParcelsNestedInput = {
    create?: XOR<AccountCreateWithoutParcelsInput, AccountUncheckedCreateWithoutParcelsInput>
    connectOrCreate?: AccountCreateOrConnectWithoutParcelsInput
    upsert?: AccountUpsertWithoutParcelsInput
    connect?: AccountWhereUniqueInput
    update?: XOR<XOR<AccountUpdateToOneWithWhereWithoutParcelsInput, AccountUpdateWithoutParcelsInput>, AccountUncheckedUpdateWithoutParcelsInput>
  }

  export type FinancialTransactionUpdateManyWithoutParcelNestedInput = {
    create?: XOR<FinancialTransactionCreateWithoutParcelInput, FinancialTransactionUncheckedCreateWithoutParcelInput> | FinancialTransactionCreateWithoutParcelInput[] | FinancialTransactionUncheckedCreateWithoutParcelInput[]
    connectOrCreate?: FinancialTransactionCreateOrConnectWithoutParcelInput | FinancialTransactionCreateOrConnectWithoutParcelInput[]
    upsert?: FinancialTransactionUpsertWithWhereUniqueWithoutParcelInput | FinancialTransactionUpsertWithWhereUniqueWithoutParcelInput[]
    createMany?: FinancialTransactionCreateManyParcelInputEnvelope
    set?: FinancialTransactionWhereUniqueInput | FinancialTransactionWhereUniqueInput[]
    disconnect?: FinancialTransactionWhereUniqueInput | FinancialTransactionWhereUniqueInput[]
    delete?: FinancialTransactionWhereUniqueInput | FinancialTransactionWhereUniqueInput[]
    connect?: FinancialTransactionWhereUniqueInput | FinancialTransactionWhereUniqueInput[]
    update?: FinancialTransactionUpdateWithWhereUniqueWithoutParcelInput | FinancialTransactionUpdateWithWhereUniqueWithoutParcelInput[]
    updateMany?: FinancialTransactionUpdateManyWithWhereWithoutParcelInput | FinancialTransactionUpdateManyWithWhereWithoutParcelInput[]
    deleteMany?: FinancialTransactionScalarWhereInput | FinancialTransactionScalarWhereInput[]
  }

  export type FinancialTransactionUncheckedUpdateManyWithoutParcelNestedInput = {
    create?: XOR<FinancialTransactionCreateWithoutParcelInput, FinancialTransactionUncheckedCreateWithoutParcelInput> | FinancialTransactionCreateWithoutParcelInput[] | FinancialTransactionUncheckedCreateWithoutParcelInput[]
    connectOrCreate?: FinancialTransactionCreateOrConnectWithoutParcelInput | FinancialTransactionCreateOrConnectWithoutParcelInput[]
    upsert?: FinancialTransactionUpsertWithWhereUniqueWithoutParcelInput | FinancialTransactionUpsertWithWhereUniqueWithoutParcelInput[]
    createMany?: FinancialTransactionCreateManyParcelInputEnvelope
    set?: FinancialTransactionWhereUniqueInput | FinancialTransactionWhereUniqueInput[]
    disconnect?: FinancialTransactionWhereUniqueInput | FinancialTransactionWhereUniqueInput[]
    delete?: FinancialTransactionWhereUniqueInput | FinancialTransactionWhereUniqueInput[]
    connect?: FinancialTransactionWhereUniqueInput | FinancialTransactionWhereUniqueInput[]
    update?: FinancialTransactionUpdateWithWhereUniqueWithoutParcelInput | FinancialTransactionUpdateWithWhereUniqueWithoutParcelInput[]
    updateMany?: FinancialTransactionUpdateManyWithWhereWithoutParcelInput | FinancialTransactionUpdateManyWithWhereWithoutParcelInput[]
    deleteMany?: FinancialTransactionScalarWhereInput | FinancialTransactionScalarWhereInput[]
  }

  export type HolderCreateNestedOneWithoutTransactionsFormsInput = {
    create?: XOR<HolderCreateWithoutTransactionsFormsInput, HolderUncheckedCreateWithoutTransactionsFormsInput>
    connectOrCreate?: HolderCreateOrConnectWithoutTransactionsFormsInput
    connect?: HolderWhereUniqueInput
  }

  export type FinancialTransactionCreateNestedManyWithoutTransactionsFormInput = {
    create?: XOR<FinancialTransactionCreateWithoutTransactionsFormInput, FinancialTransactionUncheckedCreateWithoutTransactionsFormInput> | FinancialTransactionCreateWithoutTransactionsFormInput[] | FinancialTransactionUncheckedCreateWithoutTransactionsFormInput[]
    connectOrCreate?: FinancialTransactionCreateOrConnectWithoutTransactionsFormInput | FinancialTransactionCreateOrConnectWithoutTransactionsFormInput[]
    createMany?: FinancialTransactionCreateManyTransactionsFormInputEnvelope
    connect?: FinancialTransactionWhereUniqueInput | FinancialTransactionWhereUniqueInput[]
  }

  export type FinancialTransactionUncheckedCreateNestedManyWithoutTransactionsFormInput = {
    create?: XOR<FinancialTransactionCreateWithoutTransactionsFormInput, FinancialTransactionUncheckedCreateWithoutTransactionsFormInput> | FinancialTransactionCreateWithoutTransactionsFormInput[] | FinancialTransactionUncheckedCreateWithoutTransactionsFormInput[]
    connectOrCreate?: FinancialTransactionCreateOrConnectWithoutTransactionsFormInput | FinancialTransactionCreateOrConnectWithoutTransactionsFormInput[]
    createMany?: FinancialTransactionCreateManyTransactionsFormInputEnvelope
    connect?: FinancialTransactionWhereUniqueInput | FinancialTransactionWhereUniqueInput[]
  }

  export type HolderUpdateOneRequiredWithoutTransactionsFormsNestedInput = {
    create?: XOR<HolderCreateWithoutTransactionsFormsInput, HolderUncheckedCreateWithoutTransactionsFormsInput>
    connectOrCreate?: HolderCreateOrConnectWithoutTransactionsFormsInput
    upsert?: HolderUpsertWithoutTransactionsFormsInput
    connect?: HolderWhereUniqueInput
    update?: XOR<XOR<HolderUpdateToOneWithWhereWithoutTransactionsFormsInput, HolderUpdateWithoutTransactionsFormsInput>, HolderUncheckedUpdateWithoutTransactionsFormsInput>
  }

  export type FinancialTransactionUpdateManyWithoutTransactionsFormNestedInput = {
    create?: XOR<FinancialTransactionCreateWithoutTransactionsFormInput, FinancialTransactionUncheckedCreateWithoutTransactionsFormInput> | FinancialTransactionCreateWithoutTransactionsFormInput[] | FinancialTransactionUncheckedCreateWithoutTransactionsFormInput[]
    connectOrCreate?: FinancialTransactionCreateOrConnectWithoutTransactionsFormInput | FinancialTransactionCreateOrConnectWithoutTransactionsFormInput[]
    upsert?: FinancialTransactionUpsertWithWhereUniqueWithoutTransactionsFormInput | FinancialTransactionUpsertWithWhereUniqueWithoutTransactionsFormInput[]
    createMany?: FinancialTransactionCreateManyTransactionsFormInputEnvelope
    set?: FinancialTransactionWhereUniqueInput | FinancialTransactionWhereUniqueInput[]
    disconnect?: FinancialTransactionWhereUniqueInput | FinancialTransactionWhereUniqueInput[]
    delete?: FinancialTransactionWhereUniqueInput | FinancialTransactionWhereUniqueInput[]
    connect?: FinancialTransactionWhereUniqueInput | FinancialTransactionWhereUniqueInput[]
    update?: FinancialTransactionUpdateWithWhereUniqueWithoutTransactionsFormInput | FinancialTransactionUpdateWithWhereUniqueWithoutTransactionsFormInput[]
    updateMany?: FinancialTransactionUpdateManyWithWhereWithoutTransactionsFormInput | FinancialTransactionUpdateManyWithWhereWithoutTransactionsFormInput[]
    deleteMany?: FinancialTransactionScalarWhereInput | FinancialTransactionScalarWhereInput[]
  }

  export type FinancialTransactionUncheckedUpdateManyWithoutTransactionsFormNestedInput = {
    create?: XOR<FinancialTransactionCreateWithoutTransactionsFormInput, FinancialTransactionUncheckedCreateWithoutTransactionsFormInput> | FinancialTransactionCreateWithoutTransactionsFormInput[] | FinancialTransactionUncheckedCreateWithoutTransactionsFormInput[]
    connectOrCreate?: FinancialTransactionCreateOrConnectWithoutTransactionsFormInput | FinancialTransactionCreateOrConnectWithoutTransactionsFormInput[]
    upsert?: FinancialTransactionUpsertWithWhereUniqueWithoutTransactionsFormInput | FinancialTransactionUpsertWithWhereUniqueWithoutTransactionsFormInput[]
    createMany?: FinancialTransactionCreateManyTransactionsFormInputEnvelope
    set?: FinancialTransactionWhereUniqueInput | FinancialTransactionWhereUniqueInput[]
    disconnect?: FinancialTransactionWhereUniqueInput | FinancialTransactionWhereUniqueInput[]
    delete?: FinancialTransactionWhereUniqueInput | FinancialTransactionWhereUniqueInput[]
    connect?: FinancialTransactionWhereUniqueInput | FinancialTransactionWhereUniqueInput[]
    update?: FinancialTransactionUpdateWithWhereUniqueWithoutTransactionsFormInput | FinancialTransactionUpdateWithWhereUniqueWithoutTransactionsFormInput[]
    updateMany?: FinancialTransactionUpdateManyWithWhereWithoutTransactionsFormInput | FinancialTransactionUpdateManyWithWhereWithoutTransactionsFormInput[]
    deleteMany?: FinancialTransactionScalarWhereInput | FinancialTransactionScalarWhereInput[]
  }

  export type TransactionTypeCreateNestedOneWithoutFinancialTransactionsInput = {
    create?: XOR<TransactionTypeCreateWithoutFinancialTransactionsInput, TransactionTypeUncheckedCreateWithoutFinancialTransactionsInput>
    connectOrCreate?: TransactionTypeCreateOrConnectWithoutFinancialTransactionsInput
    connect?: TransactionTypeWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutTransactionsFinancialsInput = {
    create?: XOR<UserCreateWithoutTransactionsFinancialsInput, UserUncheckedCreateWithoutTransactionsFinancialsInput>
    connectOrCreate?: UserCreateOrConnectWithoutTransactionsFinancialsInput
    connect?: UserWhereUniqueInput
  }

  export type AccountPlanCreateNestedOneWithoutFinancialTransactionsInput = {
    create?: XOR<AccountPlanCreateWithoutFinancialTransactionsInput, AccountPlanUncheckedCreateWithoutFinancialTransactionsInput>
    connectOrCreate?: AccountPlanCreateOrConnectWithoutFinancialTransactionsInput
    connect?: AccountPlanWhereUniqueInput
  }

  export type AccountCreateNestedOneWithoutFinancialTransactionsInput = {
    create?: XOR<AccountCreateWithoutFinancialTransactionsInput, AccountUncheckedCreateWithoutFinancialTransactionsInput>
    connectOrCreate?: AccountCreateOrConnectWithoutFinancialTransactionsInput
    connect?: AccountWhereUniqueInput
  }

  export type ParcelCreateNestedOneWithoutFinancialTransactionsInput = {
    create?: XOR<ParcelCreateWithoutFinancialTransactionsInput, ParcelUncheckedCreateWithoutFinancialTransactionsInput>
    connectOrCreate?: ParcelCreateOrConnectWithoutFinancialTransactionsInput
    connect?: ParcelWhereUniqueInput
  }

  export type TransactionsFormsCreateNestedOneWithoutFinancialTransactionsInput = {
    create?: XOR<TransactionsFormsCreateWithoutFinancialTransactionsInput, TransactionsFormsUncheckedCreateWithoutFinancialTransactionsInput>
    connectOrCreate?: TransactionsFormsCreateOrConnectWithoutFinancialTransactionsInput
    connect?: TransactionsFormsWhereUniqueInput
  }

  export type TransactionTypeUpdateOneRequiredWithoutFinancialTransactionsNestedInput = {
    create?: XOR<TransactionTypeCreateWithoutFinancialTransactionsInput, TransactionTypeUncheckedCreateWithoutFinancialTransactionsInput>
    connectOrCreate?: TransactionTypeCreateOrConnectWithoutFinancialTransactionsInput
    upsert?: TransactionTypeUpsertWithoutFinancialTransactionsInput
    connect?: TransactionTypeWhereUniqueInput
    update?: XOR<XOR<TransactionTypeUpdateToOneWithWhereWithoutFinancialTransactionsInput, TransactionTypeUpdateWithoutFinancialTransactionsInput>, TransactionTypeUncheckedUpdateWithoutFinancialTransactionsInput>
  }

  export type UserUpdateOneRequiredWithoutTransactionsFinancialsNestedInput = {
    create?: XOR<UserCreateWithoutTransactionsFinancialsInput, UserUncheckedCreateWithoutTransactionsFinancialsInput>
    connectOrCreate?: UserCreateOrConnectWithoutTransactionsFinancialsInput
    upsert?: UserUpsertWithoutTransactionsFinancialsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutTransactionsFinancialsInput, UserUpdateWithoutTransactionsFinancialsInput>, UserUncheckedUpdateWithoutTransactionsFinancialsInput>
  }

  export type AccountPlanUpdateOneRequiredWithoutFinancialTransactionsNestedInput = {
    create?: XOR<AccountPlanCreateWithoutFinancialTransactionsInput, AccountPlanUncheckedCreateWithoutFinancialTransactionsInput>
    connectOrCreate?: AccountPlanCreateOrConnectWithoutFinancialTransactionsInput
    upsert?: AccountPlanUpsertWithoutFinancialTransactionsInput
    connect?: AccountPlanWhereUniqueInput
    update?: XOR<XOR<AccountPlanUpdateToOneWithWhereWithoutFinancialTransactionsInput, AccountPlanUpdateWithoutFinancialTransactionsInput>, AccountPlanUncheckedUpdateWithoutFinancialTransactionsInput>
  }

  export type AccountUpdateOneRequiredWithoutFinancialTransactionsNestedInput = {
    create?: XOR<AccountCreateWithoutFinancialTransactionsInput, AccountUncheckedCreateWithoutFinancialTransactionsInput>
    connectOrCreate?: AccountCreateOrConnectWithoutFinancialTransactionsInput
    upsert?: AccountUpsertWithoutFinancialTransactionsInput
    connect?: AccountWhereUniqueInput
    update?: XOR<XOR<AccountUpdateToOneWithWhereWithoutFinancialTransactionsInput, AccountUpdateWithoutFinancialTransactionsInput>, AccountUncheckedUpdateWithoutFinancialTransactionsInput>
  }

  export type ParcelUpdateOneRequiredWithoutFinancialTransactionsNestedInput = {
    create?: XOR<ParcelCreateWithoutFinancialTransactionsInput, ParcelUncheckedCreateWithoutFinancialTransactionsInput>
    connectOrCreate?: ParcelCreateOrConnectWithoutFinancialTransactionsInput
    upsert?: ParcelUpsertWithoutFinancialTransactionsInput
    connect?: ParcelWhereUniqueInput
    update?: XOR<XOR<ParcelUpdateToOneWithWhereWithoutFinancialTransactionsInput, ParcelUpdateWithoutFinancialTransactionsInput>, ParcelUncheckedUpdateWithoutFinancialTransactionsInput>
  }

  export type TransactionsFormsUpdateOneRequiredWithoutFinancialTransactionsNestedInput = {
    create?: XOR<TransactionsFormsCreateWithoutFinancialTransactionsInput, TransactionsFormsUncheckedCreateWithoutFinancialTransactionsInput>
    connectOrCreate?: TransactionsFormsCreateOrConnectWithoutFinancialTransactionsInput
    upsert?: TransactionsFormsUpsertWithoutFinancialTransactionsInput
    connect?: TransactionsFormsWhereUniqueInput
    update?: XOR<XOR<TransactionsFormsUpdateToOneWithWhereWithoutFinancialTransactionsInput, TransactionsFormsUpdateWithoutFinancialTransactionsInput>, TransactionsFormsUncheckedUpdateWithoutFinancialTransactionsInput>
  }

  export type FinancialTransactionCreateNestedManyWithoutTypeTransactionInput = {
    create?: XOR<FinancialTransactionCreateWithoutTypeTransactionInput, FinancialTransactionUncheckedCreateWithoutTypeTransactionInput> | FinancialTransactionCreateWithoutTypeTransactionInput[] | FinancialTransactionUncheckedCreateWithoutTypeTransactionInput[]
    connectOrCreate?: FinancialTransactionCreateOrConnectWithoutTypeTransactionInput | FinancialTransactionCreateOrConnectWithoutTypeTransactionInput[]
    createMany?: FinancialTransactionCreateManyTypeTransactionInputEnvelope
    connect?: FinancialTransactionWhereUniqueInput | FinancialTransactionWhereUniqueInput[]
  }

  export type FinancialTransactionUncheckedCreateNestedManyWithoutTypeTransactionInput = {
    create?: XOR<FinancialTransactionCreateWithoutTypeTransactionInput, FinancialTransactionUncheckedCreateWithoutTypeTransactionInput> | FinancialTransactionCreateWithoutTypeTransactionInput[] | FinancialTransactionUncheckedCreateWithoutTypeTransactionInput[]
    connectOrCreate?: FinancialTransactionCreateOrConnectWithoutTypeTransactionInput | FinancialTransactionCreateOrConnectWithoutTypeTransactionInput[]
    createMany?: FinancialTransactionCreateManyTypeTransactionInputEnvelope
    connect?: FinancialTransactionWhereUniqueInput | FinancialTransactionWhereUniqueInput[]
  }

  export type FinancialTransactionUpdateManyWithoutTypeTransactionNestedInput = {
    create?: XOR<FinancialTransactionCreateWithoutTypeTransactionInput, FinancialTransactionUncheckedCreateWithoutTypeTransactionInput> | FinancialTransactionCreateWithoutTypeTransactionInput[] | FinancialTransactionUncheckedCreateWithoutTypeTransactionInput[]
    connectOrCreate?: FinancialTransactionCreateOrConnectWithoutTypeTransactionInput | FinancialTransactionCreateOrConnectWithoutTypeTransactionInput[]
    upsert?: FinancialTransactionUpsertWithWhereUniqueWithoutTypeTransactionInput | FinancialTransactionUpsertWithWhereUniqueWithoutTypeTransactionInput[]
    createMany?: FinancialTransactionCreateManyTypeTransactionInputEnvelope
    set?: FinancialTransactionWhereUniqueInput | FinancialTransactionWhereUniqueInput[]
    disconnect?: FinancialTransactionWhereUniqueInput | FinancialTransactionWhereUniqueInput[]
    delete?: FinancialTransactionWhereUniqueInput | FinancialTransactionWhereUniqueInput[]
    connect?: FinancialTransactionWhereUniqueInput | FinancialTransactionWhereUniqueInput[]
    update?: FinancialTransactionUpdateWithWhereUniqueWithoutTypeTransactionInput | FinancialTransactionUpdateWithWhereUniqueWithoutTypeTransactionInput[]
    updateMany?: FinancialTransactionUpdateManyWithWhereWithoutTypeTransactionInput | FinancialTransactionUpdateManyWithWhereWithoutTypeTransactionInput[]
    deleteMany?: FinancialTransactionScalarWhereInput | FinancialTransactionScalarWhereInput[]
  }

  export type FinancialTransactionUncheckedUpdateManyWithoutTypeTransactionNestedInput = {
    create?: XOR<FinancialTransactionCreateWithoutTypeTransactionInput, FinancialTransactionUncheckedCreateWithoutTypeTransactionInput> | FinancialTransactionCreateWithoutTypeTransactionInput[] | FinancialTransactionUncheckedCreateWithoutTypeTransactionInput[]
    connectOrCreate?: FinancialTransactionCreateOrConnectWithoutTypeTransactionInput | FinancialTransactionCreateOrConnectWithoutTypeTransactionInput[]
    upsert?: FinancialTransactionUpsertWithWhereUniqueWithoutTypeTransactionInput | FinancialTransactionUpsertWithWhereUniqueWithoutTypeTransactionInput[]
    createMany?: FinancialTransactionCreateManyTypeTransactionInputEnvelope
    set?: FinancialTransactionWhereUniqueInput | FinancialTransactionWhereUniqueInput[]
    disconnect?: FinancialTransactionWhereUniqueInput | FinancialTransactionWhereUniqueInput[]
    delete?: FinancialTransactionWhereUniqueInput | FinancialTransactionWhereUniqueInput[]
    connect?: FinancialTransactionWhereUniqueInput | FinancialTransactionWhereUniqueInput[]
    update?: FinancialTransactionUpdateWithWhereUniqueWithoutTypeTransactionInput | FinancialTransactionUpdateWithWhereUniqueWithoutTypeTransactionInput[]
    updateMany?: FinancialTransactionUpdateManyWithWhereWithoutTypeTransactionInput | FinancialTransactionUpdateManyWithWhereWithoutTypeTransactionInput[]
    deleteMany?: FinancialTransactionScalarWhereInput | FinancialTransactionScalarWhereInput[]
  }

  export type RecurrenceCreateNestedManyWithoutCategoryInput = {
    create?: XOR<RecurrenceCreateWithoutCategoryInput, RecurrenceUncheckedCreateWithoutCategoryInput> | RecurrenceCreateWithoutCategoryInput[] | RecurrenceUncheckedCreateWithoutCategoryInput[]
    connectOrCreate?: RecurrenceCreateOrConnectWithoutCategoryInput | RecurrenceCreateOrConnectWithoutCategoryInput[]
    createMany?: RecurrenceCreateManyCategoryInputEnvelope
    connect?: RecurrenceWhereUniqueInput | RecurrenceWhereUniqueInput[]
  }

  export type AccountCreateNestedManyWithoutCategoryInput = {
    create?: XOR<AccountCreateWithoutCategoryInput, AccountUncheckedCreateWithoutCategoryInput> | AccountCreateWithoutCategoryInput[] | AccountUncheckedCreateWithoutCategoryInput[]
    connectOrCreate?: AccountCreateOrConnectWithoutCategoryInput | AccountCreateOrConnectWithoutCategoryInput[]
    createMany?: AccountCreateManyCategoryInputEnvelope
    connect?: AccountWhereUniqueInput | AccountWhereUniqueInput[]
  }

  export type ParcelCreateNestedManyWithoutCategoryInput = {
    create?: XOR<ParcelCreateWithoutCategoryInput, ParcelUncheckedCreateWithoutCategoryInput> | ParcelCreateWithoutCategoryInput[] | ParcelUncheckedCreateWithoutCategoryInput[]
    connectOrCreate?: ParcelCreateOrConnectWithoutCategoryInput | ParcelCreateOrConnectWithoutCategoryInput[]
    createMany?: ParcelCreateManyCategoryInputEnvelope
    connect?: ParcelWhereUniqueInput | ParcelWhereUniqueInput[]
  }

  export type FinancialTransactionCreateNestedManyWithoutCategoryInput = {
    create?: XOR<FinancialTransactionCreateWithoutCategoryInput, FinancialTransactionUncheckedCreateWithoutCategoryInput> | FinancialTransactionCreateWithoutCategoryInput[] | FinancialTransactionUncheckedCreateWithoutCategoryInput[]
    connectOrCreate?: FinancialTransactionCreateOrConnectWithoutCategoryInput | FinancialTransactionCreateOrConnectWithoutCategoryInput[]
    createMany?: FinancialTransactionCreateManyCategoryInputEnvelope
    connect?: FinancialTransactionWhereUniqueInput | FinancialTransactionWhereUniqueInput[]
  }

  export type RecurrenceUncheckedCreateNestedManyWithoutCategoryInput = {
    create?: XOR<RecurrenceCreateWithoutCategoryInput, RecurrenceUncheckedCreateWithoutCategoryInput> | RecurrenceCreateWithoutCategoryInput[] | RecurrenceUncheckedCreateWithoutCategoryInput[]
    connectOrCreate?: RecurrenceCreateOrConnectWithoutCategoryInput | RecurrenceCreateOrConnectWithoutCategoryInput[]
    createMany?: RecurrenceCreateManyCategoryInputEnvelope
    connect?: RecurrenceWhereUniqueInput | RecurrenceWhereUniqueInput[]
  }

  export type AccountUncheckedCreateNestedManyWithoutCategoryInput = {
    create?: XOR<AccountCreateWithoutCategoryInput, AccountUncheckedCreateWithoutCategoryInput> | AccountCreateWithoutCategoryInput[] | AccountUncheckedCreateWithoutCategoryInput[]
    connectOrCreate?: AccountCreateOrConnectWithoutCategoryInput | AccountCreateOrConnectWithoutCategoryInput[]
    createMany?: AccountCreateManyCategoryInputEnvelope
    connect?: AccountWhereUniqueInput | AccountWhereUniqueInput[]
  }

  export type ParcelUncheckedCreateNestedManyWithoutCategoryInput = {
    create?: XOR<ParcelCreateWithoutCategoryInput, ParcelUncheckedCreateWithoutCategoryInput> | ParcelCreateWithoutCategoryInput[] | ParcelUncheckedCreateWithoutCategoryInput[]
    connectOrCreate?: ParcelCreateOrConnectWithoutCategoryInput | ParcelCreateOrConnectWithoutCategoryInput[]
    createMany?: ParcelCreateManyCategoryInputEnvelope
    connect?: ParcelWhereUniqueInput | ParcelWhereUniqueInput[]
  }

  export type FinancialTransactionUncheckedCreateNestedManyWithoutCategoryInput = {
    create?: XOR<FinancialTransactionCreateWithoutCategoryInput, FinancialTransactionUncheckedCreateWithoutCategoryInput> | FinancialTransactionCreateWithoutCategoryInput[] | FinancialTransactionUncheckedCreateWithoutCategoryInput[]
    connectOrCreate?: FinancialTransactionCreateOrConnectWithoutCategoryInput | FinancialTransactionCreateOrConnectWithoutCategoryInput[]
    createMany?: FinancialTransactionCreateManyCategoryInputEnvelope
    connect?: FinancialTransactionWhereUniqueInput | FinancialTransactionWhereUniqueInput[]
  }

  export type RecurrenceUpdateManyWithoutCategoryNestedInput = {
    create?: XOR<RecurrenceCreateWithoutCategoryInput, RecurrenceUncheckedCreateWithoutCategoryInput> | RecurrenceCreateWithoutCategoryInput[] | RecurrenceUncheckedCreateWithoutCategoryInput[]
    connectOrCreate?: RecurrenceCreateOrConnectWithoutCategoryInput | RecurrenceCreateOrConnectWithoutCategoryInput[]
    upsert?: RecurrenceUpsertWithWhereUniqueWithoutCategoryInput | RecurrenceUpsertWithWhereUniqueWithoutCategoryInput[]
    createMany?: RecurrenceCreateManyCategoryInputEnvelope
    set?: RecurrenceWhereUniqueInput | RecurrenceWhereUniqueInput[]
    disconnect?: RecurrenceWhereUniqueInput | RecurrenceWhereUniqueInput[]
    delete?: RecurrenceWhereUniqueInput | RecurrenceWhereUniqueInput[]
    connect?: RecurrenceWhereUniqueInput | RecurrenceWhereUniqueInput[]
    update?: RecurrenceUpdateWithWhereUniqueWithoutCategoryInput | RecurrenceUpdateWithWhereUniqueWithoutCategoryInput[]
    updateMany?: RecurrenceUpdateManyWithWhereWithoutCategoryInput | RecurrenceUpdateManyWithWhereWithoutCategoryInput[]
    deleteMany?: RecurrenceScalarWhereInput | RecurrenceScalarWhereInput[]
  }

  export type AccountUpdateManyWithoutCategoryNestedInput = {
    create?: XOR<AccountCreateWithoutCategoryInput, AccountUncheckedCreateWithoutCategoryInput> | AccountCreateWithoutCategoryInput[] | AccountUncheckedCreateWithoutCategoryInput[]
    connectOrCreate?: AccountCreateOrConnectWithoutCategoryInput | AccountCreateOrConnectWithoutCategoryInput[]
    upsert?: AccountUpsertWithWhereUniqueWithoutCategoryInput | AccountUpsertWithWhereUniqueWithoutCategoryInput[]
    createMany?: AccountCreateManyCategoryInputEnvelope
    set?: AccountWhereUniqueInput | AccountWhereUniqueInput[]
    disconnect?: AccountWhereUniqueInput | AccountWhereUniqueInput[]
    delete?: AccountWhereUniqueInput | AccountWhereUniqueInput[]
    connect?: AccountWhereUniqueInput | AccountWhereUniqueInput[]
    update?: AccountUpdateWithWhereUniqueWithoutCategoryInput | AccountUpdateWithWhereUniqueWithoutCategoryInput[]
    updateMany?: AccountUpdateManyWithWhereWithoutCategoryInput | AccountUpdateManyWithWhereWithoutCategoryInput[]
    deleteMany?: AccountScalarWhereInput | AccountScalarWhereInput[]
  }

  export type ParcelUpdateManyWithoutCategoryNestedInput = {
    create?: XOR<ParcelCreateWithoutCategoryInput, ParcelUncheckedCreateWithoutCategoryInput> | ParcelCreateWithoutCategoryInput[] | ParcelUncheckedCreateWithoutCategoryInput[]
    connectOrCreate?: ParcelCreateOrConnectWithoutCategoryInput | ParcelCreateOrConnectWithoutCategoryInput[]
    upsert?: ParcelUpsertWithWhereUniqueWithoutCategoryInput | ParcelUpsertWithWhereUniqueWithoutCategoryInput[]
    createMany?: ParcelCreateManyCategoryInputEnvelope
    set?: ParcelWhereUniqueInput | ParcelWhereUniqueInput[]
    disconnect?: ParcelWhereUniqueInput | ParcelWhereUniqueInput[]
    delete?: ParcelWhereUniqueInput | ParcelWhereUniqueInput[]
    connect?: ParcelWhereUniqueInput | ParcelWhereUniqueInput[]
    update?: ParcelUpdateWithWhereUniqueWithoutCategoryInput | ParcelUpdateWithWhereUniqueWithoutCategoryInput[]
    updateMany?: ParcelUpdateManyWithWhereWithoutCategoryInput | ParcelUpdateManyWithWhereWithoutCategoryInput[]
    deleteMany?: ParcelScalarWhereInput | ParcelScalarWhereInput[]
  }

  export type FinancialTransactionUpdateManyWithoutCategoryNestedInput = {
    create?: XOR<FinancialTransactionCreateWithoutCategoryInput, FinancialTransactionUncheckedCreateWithoutCategoryInput> | FinancialTransactionCreateWithoutCategoryInput[] | FinancialTransactionUncheckedCreateWithoutCategoryInput[]
    connectOrCreate?: FinancialTransactionCreateOrConnectWithoutCategoryInput | FinancialTransactionCreateOrConnectWithoutCategoryInput[]
    upsert?: FinancialTransactionUpsertWithWhereUniqueWithoutCategoryInput | FinancialTransactionUpsertWithWhereUniqueWithoutCategoryInput[]
    createMany?: FinancialTransactionCreateManyCategoryInputEnvelope
    set?: FinancialTransactionWhereUniqueInput | FinancialTransactionWhereUniqueInput[]
    disconnect?: FinancialTransactionWhereUniqueInput | FinancialTransactionWhereUniqueInput[]
    delete?: FinancialTransactionWhereUniqueInput | FinancialTransactionWhereUniqueInput[]
    connect?: FinancialTransactionWhereUniqueInput | FinancialTransactionWhereUniqueInput[]
    update?: FinancialTransactionUpdateWithWhereUniqueWithoutCategoryInput | FinancialTransactionUpdateWithWhereUniqueWithoutCategoryInput[]
    updateMany?: FinancialTransactionUpdateManyWithWhereWithoutCategoryInput | FinancialTransactionUpdateManyWithWhereWithoutCategoryInput[]
    deleteMany?: FinancialTransactionScalarWhereInput | FinancialTransactionScalarWhereInput[]
  }

  export type RecurrenceUncheckedUpdateManyWithoutCategoryNestedInput = {
    create?: XOR<RecurrenceCreateWithoutCategoryInput, RecurrenceUncheckedCreateWithoutCategoryInput> | RecurrenceCreateWithoutCategoryInput[] | RecurrenceUncheckedCreateWithoutCategoryInput[]
    connectOrCreate?: RecurrenceCreateOrConnectWithoutCategoryInput | RecurrenceCreateOrConnectWithoutCategoryInput[]
    upsert?: RecurrenceUpsertWithWhereUniqueWithoutCategoryInput | RecurrenceUpsertWithWhereUniqueWithoutCategoryInput[]
    createMany?: RecurrenceCreateManyCategoryInputEnvelope
    set?: RecurrenceWhereUniqueInput | RecurrenceWhereUniqueInput[]
    disconnect?: RecurrenceWhereUniqueInput | RecurrenceWhereUniqueInput[]
    delete?: RecurrenceWhereUniqueInput | RecurrenceWhereUniqueInput[]
    connect?: RecurrenceWhereUniqueInput | RecurrenceWhereUniqueInput[]
    update?: RecurrenceUpdateWithWhereUniqueWithoutCategoryInput | RecurrenceUpdateWithWhereUniqueWithoutCategoryInput[]
    updateMany?: RecurrenceUpdateManyWithWhereWithoutCategoryInput | RecurrenceUpdateManyWithWhereWithoutCategoryInput[]
    deleteMany?: RecurrenceScalarWhereInput | RecurrenceScalarWhereInput[]
  }

  export type AccountUncheckedUpdateManyWithoutCategoryNestedInput = {
    create?: XOR<AccountCreateWithoutCategoryInput, AccountUncheckedCreateWithoutCategoryInput> | AccountCreateWithoutCategoryInput[] | AccountUncheckedCreateWithoutCategoryInput[]
    connectOrCreate?: AccountCreateOrConnectWithoutCategoryInput | AccountCreateOrConnectWithoutCategoryInput[]
    upsert?: AccountUpsertWithWhereUniqueWithoutCategoryInput | AccountUpsertWithWhereUniqueWithoutCategoryInput[]
    createMany?: AccountCreateManyCategoryInputEnvelope
    set?: AccountWhereUniqueInput | AccountWhereUniqueInput[]
    disconnect?: AccountWhereUniqueInput | AccountWhereUniqueInput[]
    delete?: AccountWhereUniqueInput | AccountWhereUniqueInput[]
    connect?: AccountWhereUniqueInput | AccountWhereUniqueInput[]
    update?: AccountUpdateWithWhereUniqueWithoutCategoryInput | AccountUpdateWithWhereUniqueWithoutCategoryInput[]
    updateMany?: AccountUpdateManyWithWhereWithoutCategoryInput | AccountUpdateManyWithWhereWithoutCategoryInput[]
    deleteMany?: AccountScalarWhereInput | AccountScalarWhereInput[]
  }

  export type ParcelUncheckedUpdateManyWithoutCategoryNestedInput = {
    create?: XOR<ParcelCreateWithoutCategoryInput, ParcelUncheckedCreateWithoutCategoryInput> | ParcelCreateWithoutCategoryInput[] | ParcelUncheckedCreateWithoutCategoryInput[]
    connectOrCreate?: ParcelCreateOrConnectWithoutCategoryInput | ParcelCreateOrConnectWithoutCategoryInput[]
    upsert?: ParcelUpsertWithWhereUniqueWithoutCategoryInput | ParcelUpsertWithWhereUniqueWithoutCategoryInput[]
    createMany?: ParcelCreateManyCategoryInputEnvelope
    set?: ParcelWhereUniqueInput | ParcelWhereUniqueInput[]
    disconnect?: ParcelWhereUniqueInput | ParcelWhereUniqueInput[]
    delete?: ParcelWhereUniqueInput | ParcelWhereUniqueInput[]
    connect?: ParcelWhereUniqueInput | ParcelWhereUniqueInput[]
    update?: ParcelUpdateWithWhereUniqueWithoutCategoryInput | ParcelUpdateWithWhereUniqueWithoutCategoryInput[]
    updateMany?: ParcelUpdateManyWithWhereWithoutCategoryInput | ParcelUpdateManyWithWhereWithoutCategoryInput[]
    deleteMany?: ParcelScalarWhereInput | ParcelScalarWhereInput[]
  }

  export type FinancialTransactionUncheckedUpdateManyWithoutCategoryNestedInput = {
    create?: XOR<FinancialTransactionCreateWithoutCategoryInput, FinancialTransactionUncheckedCreateWithoutCategoryInput> | FinancialTransactionCreateWithoutCategoryInput[] | FinancialTransactionUncheckedCreateWithoutCategoryInput[]
    connectOrCreate?: FinancialTransactionCreateOrConnectWithoutCategoryInput | FinancialTransactionCreateOrConnectWithoutCategoryInput[]
    upsert?: FinancialTransactionUpsertWithWhereUniqueWithoutCategoryInput | FinancialTransactionUpsertWithWhereUniqueWithoutCategoryInput[]
    createMany?: FinancialTransactionCreateManyCategoryInputEnvelope
    set?: FinancialTransactionWhereUniqueInput | FinancialTransactionWhereUniqueInput[]
    disconnect?: FinancialTransactionWhereUniqueInput | FinancialTransactionWhereUniqueInput[]
    delete?: FinancialTransactionWhereUniqueInput | FinancialTransactionWhereUniqueInput[]
    connect?: FinancialTransactionWhereUniqueInput | FinancialTransactionWhereUniqueInput[]
    update?: FinancialTransactionUpdateWithWhereUniqueWithoutCategoryInput | FinancialTransactionUpdateWithWhereUniqueWithoutCategoryInput[]
    updateMany?: FinancialTransactionUpdateManyWithWhereWithoutCategoryInput | FinancialTransactionUpdateManyWithWhereWithoutCategoryInput[]
    deleteMany?: FinancialTransactionScalarWhereInput | FinancialTransactionScalarWhereInput[]
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedFloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type HolderCreateWithoutOwnerInput = {
    name: string
    value: number
    createdAt?: Date | string
    updatedAt?: Date | string
    transactionsForms?: TransactionsFormsCreateNestedManyWithoutHolderInput
  }

  export type HolderUncheckedCreateWithoutOwnerInput = {
    id?: number
    name: string
    value: number
    createdAt?: Date | string
    updatedAt?: Date | string
    transactionsForms?: TransactionsFormsUncheckedCreateNestedManyWithoutHolderInput
  }

  export type HolderCreateOrConnectWithoutOwnerInput = {
    where: HolderWhereUniqueInput
    create: XOR<HolderCreateWithoutOwnerInput, HolderUncheckedCreateWithoutOwnerInput>
  }

  export type HolderCreateManyOwnerInputEnvelope = {
    data: HolderCreateManyOwnerInput | HolderCreateManyOwnerInput[]
    skipDuplicates?: boolean
  }

  export type AccountCreateWithoutUserInput = {
    description: string
    balance: number
    createdAt?: Date | string
    updatedAt?: Date | string
    parcels?: ParcelCreateNestedManyWithoutAccountInput
    category: AccountPlanCreateNestedOneWithoutAccountsInput
    financialTransactions?: FinancialTransactionCreateNestedManyWithoutAccountInput
  }

  export type AccountUncheckedCreateWithoutUserInput = {
    id?: number
    description: string
    balance: number
    categoryId: number
    createdAt?: Date | string
    updatedAt?: Date | string
    parcels?: ParcelUncheckedCreateNestedManyWithoutAccountInput
    financialTransactions?: FinancialTransactionUncheckedCreateNestedManyWithoutAccountInput
  }

  export type AccountCreateOrConnectWithoutUserInput = {
    where: AccountWhereUniqueInput
    create: XOR<AccountCreateWithoutUserInput, AccountUncheckedCreateWithoutUserInput>
  }

  export type AccountCreateManyUserInputEnvelope = {
    data: AccountCreateManyUserInput | AccountCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type FinancialTransactionCreateWithoutUserInput = {
    description: string
    value: number
    createdAt?: Date | string
    updatedAt?: Date | string
    typeTransaction: TransactionTypeCreateNestedOneWithoutFinancialTransactionsInput
    category: AccountPlanCreateNestedOneWithoutFinancialTransactionsInput
    account: AccountCreateNestedOneWithoutFinancialTransactionsInput
    parcel: ParcelCreateNestedOneWithoutFinancialTransactionsInput
    transactionsForm: TransactionsFormsCreateNestedOneWithoutFinancialTransactionsInput
  }

  export type FinancialTransactionUncheckedCreateWithoutUserInput = {
    id?: number
    description: string
    value: number
    transactionsFormsId: number
    categoryId: number
    parcelId: number
    accountId: number
    typeId: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type FinancialTransactionCreateOrConnectWithoutUserInput = {
    where: FinancialTransactionWhereUniqueInput
    create: XOR<FinancialTransactionCreateWithoutUserInput, FinancialTransactionUncheckedCreateWithoutUserInput>
  }

  export type FinancialTransactionCreateManyUserInputEnvelope = {
    data: FinancialTransactionCreateManyUserInput | FinancialTransactionCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type HolderUpsertWithWhereUniqueWithoutOwnerInput = {
    where: HolderWhereUniqueInput
    update: XOR<HolderUpdateWithoutOwnerInput, HolderUncheckedUpdateWithoutOwnerInput>
    create: XOR<HolderCreateWithoutOwnerInput, HolderUncheckedCreateWithoutOwnerInput>
  }

  export type HolderUpdateWithWhereUniqueWithoutOwnerInput = {
    where: HolderWhereUniqueInput
    data: XOR<HolderUpdateWithoutOwnerInput, HolderUncheckedUpdateWithoutOwnerInput>
  }

  export type HolderUpdateManyWithWhereWithoutOwnerInput = {
    where: HolderScalarWhereInput
    data: XOR<HolderUpdateManyMutationInput, HolderUncheckedUpdateManyWithoutOwnerInput>
  }

  export type HolderScalarWhereInput = {
    AND?: HolderScalarWhereInput | HolderScalarWhereInput[]
    OR?: HolderScalarWhereInput[]
    NOT?: HolderScalarWhereInput | HolderScalarWhereInput[]
    id?: IntFilter<"Holder"> | number
    name?: StringFilter<"Holder"> | string
    value?: FloatFilter<"Holder"> | number
    ownerId?: IntFilter<"Holder"> | number
    createdAt?: DateTimeFilter<"Holder"> | Date | string
    updatedAt?: DateTimeFilter<"Holder"> | Date | string
  }

  export type AccountUpsertWithWhereUniqueWithoutUserInput = {
    where: AccountWhereUniqueInput
    update: XOR<AccountUpdateWithoutUserInput, AccountUncheckedUpdateWithoutUserInput>
    create: XOR<AccountCreateWithoutUserInput, AccountUncheckedCreateWithoutUserInput>
  }

  export type AccountUpdateWithWhereUniqueWithoutUserInput = {
    where: AccountWhereUniqueInput
    data: XOR<AccountUpdateWithoutUserInput, AccountUncheckedUpdateWithoutUserInput>
  }

  export type AccountUpdateManyWithWhereWithoutUserInput = {
    where: AccountScalarWhereInput
    data: XOR<AccountUpdateManyMutationInput, AccountUncheckedUpdateManyWithoutUserInput>
  }

  export type AccountScalarWhereInput = {
    AND?: AccountScalarWhereInput | AccountScalarWhereInput[]
    OR?: AccountScalarWhereInput[]
    NOT?: AccountScalarWhereInput | AccountScalarWhereInput[]
    id?: IntFilter<"Account"> | number
    description?: StringFilter<"Account"> | string
    balance?: FloatFilter<"Account"> | number
    userId?: IntFilter<"Account"> | number
    categoryId?: IntFilter<"Account"> | number
    createdAt?: DateTimeFilter<"Account"> | Date | string
    updatedAt?: DateTimeFilter<"Account"> | Date | string
  }

  export type FinancialTransactionUpsertWithWhereUniqueWithoutUserInput = {
    where: FinancialTransactionWhereUniqueInput
    update: XOR<FinancialTransactionUpdateWithoutUserInput, FinancialTransactionUncheckedUpdateWithoutUserInput>
    create: XOR<FinancialTransactionCreateWithoutUserInput, FinancialTransactionUncheckedCreateWithoutUserInput>
  }

  export type FinancialTransactionUpdateWithWhereUniqueWithoutUserInput = {
    where: FinancialTransactionWhereUniqueInput
    data: XOR<FinancialTransactionUpdateWithoutUserInput, FinancialTransactionUncheckedUpdateWithoutUserInput>
  }

  export type FinancialTransactionUpdateManyWithWhereWithoutUserInput = {
    where: FinancialTransactionScalarWhereInput
    data: XOR<FinancialTransactionUpdateManyMutationInput, FinancialTransactionUncheckedUpdateManyWithoutUserInput>
  }

  export type FinancialTransactionScalarWhereInput = {
    AND?: FinancialTransactionScalarWhereInput | FinancialTransactionScalarWhereInput[]
    OR?: FinancialTransactionScalarWhereInput[]
    NOT?: FinancialTransactionScalarWhereInput | FinancialTransactionScalarWhereInput[]
    id?: IntFilter<"FinancialTransaction"> | number
    description?: StringFilter<"FinancialTransaction"> | string
    value?: FloatFilter<"FinancialTransaction"> | number
    userId?: IntFilter<"FinancialTransaction"> | number
    transactionsFormsId?: IntFilter<"FinancialTransaction"> | number
    categoryId?: IntFilter<"FinancialTransaction"> | number
    parcelId?: IntFilter<"FinancialTransaction"> | number
    accountId?: IntFilter<"FinancialTransaction"> | number
    typeId?: IntFilter<"FinancialTransaction"> | number
    createdAt?: DateTimeFilter<"FinancialTransaction"> | Date | string
    updatedAt?: DateTimeFilter<"FinancialTransaction"> | Date | string
  }

  export type UserCreateWithoutHoldersInput = {
    email: string
    name: string
    password: string
    createdAt?: Date | string
    updatedAt?: Date | string
    accounts?: AccountCreateNestedManyWithoutUserInput
    transactionsFinancials?: FinancialTransactionCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutHoldersInput = {
    id?: number
    email: string
    name: string
    password: string
    createdAt?: Date | string
    updatedAt?: Date | string
    accounts?: AccountUncheckedCreateNestedManyWithoutUserInput
    transactionsFinancials?: FinancialTransactionUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutHoldersInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutHoldersInput, UserUncheckedCreateWithoutHoldersInput>
  }

  export type TransactionsFormsCreateWithoutHolderInput = {
    name: string
    type: number
    createdAt?: Date | string
    updatedAt?: Date | string
    FinancialTransactions?: FinancialTransactionCreateNestedManyWithoutTransactionsFormInput
  }

  export type TransactionsFormsUncheckedCreateWithoutHolderInput = {
    id?: number
    name: string
    type: number
    createdAt?: Date | string
    updatedAt?: Date | string
    FinancialTransactions?: FinancialTransactionUncheckedCreateNestedManyWithoutTransactionsFormInput
  }

  export type TransactionsFormsCreateOrConnectWithoutHolderInput = {
    where: TransactionsFormsWhereUniqueInput
    create: XOR<TransactionsFormsCreateWithoutHolderInput, TransactionsFormsUncheckedCreateWithoutHolderInput>
  }

  export type TransactionsFormsCreateManyHolderInputEnvelope = {
    data: TransactionsFormsCreateManyHolderInput | TransactionsFormsCreateManyHolderInput[]
    skipDuplicates?: boolean
  }

  export type UserUpsertWithoutHoldersInput = {
    update: XOR<UserUpdateWithoutHoldersInput, UserUncheckedUpdateWithoutHoldersInput>
    create: XOR<UserCreateWithoutHoldersInput, UserUncheckedCreateWithoutHoldersInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutHoldersInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutHoldersInput, UserUncheckedUpdateWithoutHoldersInput>
  }

  export type UserUpdateWithoutHoldersInput = {
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    accounts?: AccountUpdateManyWithoutUserNestedInput
    transactionsFinancials?: FinancialTransactionUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutHoldersInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    accounts?: AccountUncheckedUpdateManyWithoutUserNestedInput
    transactionsFinancials?: FinancialTransactionUncheckedUpdateManyWithoutUserNestedInput
  }

  export type TransactionsFormsUpsertWithWhereUniqueWithoutHolderInput = {
    where: TransactionsFormsWhereUniqueInput
    update: XOR<TransactionsFormsUpdateWithoutHolderInput, TransactionsFormsUncheckedUpdateWithoutHolderInput>
    create: XOR<TransactionsFormsCreateWithoutHolderInput, TransactionsFormsUncheckedCreateWithoutHolderInput>
  }

  export type TransactionsFormsUpdateWithWhereUniqueWithoutHolderInput = {
    where: TransactionsFormsWhereUniqueInput
    data: XOR<TransactionsFormsUpdateWithoutHolderInput, TransactionsFormsUncheckedUpdateWithoutHolderInput>
  }

  export type TransactionsFormsUpdateManyWithWhereWithoutHolderInput = {
    where: TransactionsFormsScalarWhereInput
    data: XOR<TransactionsFormsUpdateManyMutationInput, TransactionsFormsUncheckedUpdateManyWithoutHolderInput>
  }

  export type TransactionsFormsScalarWhereInput = {
    AND?: TransactionsFormsScalarWhereInput | TransactionsFormsScalarWhereInput[]
    OR?: TransactionsFormsScalarWhereInput[]
    NOT?: TransactionsFormsScalarWhereInput | TransactionsFormsScalarWhereInput[]
    id?: IntFilter<"TransactionsForms"> | number
    name?: StringFilter<"TransactionsForms"> | string
    type?: IntFilter<"TransactionsForms"> | number
    holderId?: IntFilter<"TransactionsForms"> | number
    createdAt?: DateTimeFilter<"TransactionsForms"> | Date | string
    updatedAt?: DateTimeFilter<"TransactionsForms"> | Date | string
  }

  export type AccountPlanCreateWithoutRecurrencesInput = {
    name: string
    type: number
    createdAt?: Date | string
    updatedAt?: Date | string
    accounts?: AccountCreateNestedManyWithoutCategoryInput
    parcels?: ParcelCreateNestedManyWithoutCategoryInput
    financialTransactions?: FinancialTransactionCreateNestedManyWithoutCategoryInput
  }

  export type AccountPlanUncheckedCreateWithoutRecurrencesInput = {
    id?: number
    name: string
    type: number
    createdAt?: Date | string
    updatedAt?: Date | string
    accounts?: AccountUncheckedCreateNestedManyWithoutCategoryInput
    parcels?: ParcelUncheckedCreateNestedManyWithoutCategoryInput
    financialTransactions?: FinancialTransactionUncheckedCreateNestedManyWithoutCategoryInput
  }

  export type AccountPlanCreateOrConnectWithoutRecurrencesInput = {
    where: AccountPlanWhereUniqueInput
    create: XOR<AccountPlanCreateWithoutRecurrencesInput, AccountPlanUncheckedCreateWithoutRecurrencesInput>
  }

  export type AccountPlanUpsertWithoutRecurrencesInput = {
    update: XOR<AccountPlanUpdateWithoutRecurrencesInput, AccountPlanUncheckedUpdateWithoutRecurrencesInput>
    create: XOR<AccountPlanCreateWithoutRecurrencesInput, AccountPlanUncheckedCreateWithoutRecurrencesInput>
    where?: AccountPlanWhereInput
  }

  export type AccountPlanUpdateToOneWithWhereWithoutRecurrencesInput = {
    where?: AccountPlanWhereInput
    data: XOR<AccountPlanUpdateWithoutRecurrencesInput, AccountPlanUncheckedUpdateWithoutRecurrencesInput>
  }

  export type AccountPlanUpdateWithoutRecurrencesInput = {
    name?: StringFieldUpdateOperationsInput | string
    type?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    accounts?: AccountUpdateManyWithoutCategoryNestedInput
    parcels?: ParcelUpdateManyWithoutCategoryNestedInput
    financialTransactions?: FinancialTransactionUpdateManyWithoutCategoryNestedInput
  }

  export type AccountPlanUncheckedUpdateWithoutRecurrencesInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    type?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    accounts?: AccountUncheckedUpdateManyWithoutCategoryNestedInput
    parcels?: ParcelUncheckedUpdateManyWithoutCategoryNestedInput
    financialTransactions?: FinancialTransactionUncheckedUpdateManyWithoutCategoryNestedInput
  }

  export type UserCreateWithoutAccountsInput = {
    email: string
    name: string
    password: string
    createdAt?: Date | string
    updatedAt?: Date | string
    holders?: HolderCreateNestedManyWithoutOwnerInput
    transactionsFinancials?: FinancialTransactionCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutAccountsInput = {
    id?: number
    email: string
    name: string
    password: string
    createdAt?: Date | string
    updatedAt?: Date | string
    holders?: HolderUncheckedCreateNestedManyWithoutOwnerInput
    transactionsFinancials?: FinancialTransactionUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutAccountsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutAccountsInput, UserUncheckedCreateWithoutAccountsInput>
  }

  export type ParcelCreateWithoutAccountInput = {
    value: number
    dueDate: Date | string
    competence: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
    category: AccountPlanCreateNestedOneWithoutParcelsInput
    FinancialTransactions?: FinancialTransactionCreateNestedManyWithoutParcelInput
  }

  export type ParcelUncheckedCreateWithoutAccountInput = {
    id?: number
    value: number
    dueDate: Date | string
    competence: Date | string
    categoryId: number
    createdAt?: Date | string
    updatedAt?: Date | string
    FinancialTransactions?: FinancialTransactionUncheckedCreateNestedManyWithoutParcelInput
  }

  export type ParcelCreateOrConnectWithoutAccountInput = {
    where: ParcelWhereUniqueInput
    create: XOR<ParcelCreateWithoutAccountInput, ParcelUncheckedCreateWithoutAccountInput>
  }

  export type ParcelCreateManyAccountInputEnvelope = {
    data: ParcelCreateManyAccountInput | ParcelCreateManyAccountInput[]
    skipDuplicates?: boolean
  }

  export type AccountPlanCreateWithoutAccountsInput = {
    name: string
    type: number
    createdAt?: Date | string
    updatedAt?: Date | string
    recurrences?: RecurrenceCreateNestedManyWithoutCategoryInput
    parcels?: ParcelCreateNestedManyWithoutCategoryInput
    financialTransactions?: FinancialTransactionCreateNestedManyWithoutCategoryInput
  }

  export type AccountPlanUncheckedCreateWithoutAccountsInput = {
    id?: number
    name: string
    type: number
    createdAt?: Date | string
    updatedAt?: Date | string
    recurrences?: RecurrenceUncheckedCreateNestedManyWithoutCategoryInput
    parcels?: ParcelUncheckedCreateNestedManyWithoutCategoryInput
    financialTransactions?: FinancialTransactionUncheckedCreateNestedManyWithoutCategoryInput
  }

  export type AccountPlanCreateOrConnectWithoutAccountsInput = {
    where: AccountPlanWhereUniqueInput
    create: XOR<AccountPlanCreateWithoutAccountsInput, AccountPlanUncheckedCreateWithoutAccountsInput>
  }

  export type FinancialTransactionCreateWithoutAccountInput = {
    description: string
    value: number
    createdAt?: Date | string
    updatedAt?: Date | string
    typeTransaction: TransactionTypeCreateNestedOneWithoutFinancialTransactionsInput
    user: UserCreateNestedOneWithoutTransactionsFinancialsInput
    category: AccountPlanCreateNestedOneWithoutFinancialTransactionsInput
    parcel: ParcelCreateNestedOneWithoutFinancialTransactionsInput
    transactionsForm: TransactionsFormsCreateNestedOneWithoutFinancialTransactionsInput
  }

  export type FinancialTransactionUncheckedCreateWithoutAccountInput = {
    id?: number
    description: string
    value: number
    userId: number
    transactionsFormsId: number
    categoryId: number
    parcelId: number
    typeId: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type FinancialTransactionCreateOrConnectWithoutAccountInput = {
    where: FinancialTransactionWhereUniqueInput
    create: XOR<FinancialTransactionCreateWithoutAccountInput, FinancialTransactionUncheckedCreateWithoutAccountInput>
  }

  export type FinancialTransactionCreateManyAccountInputEnvelope = {
    data: FinancialTransactionCreateManyAccountInput | FinancialTransactionCreateManyAccountInput[]
    skipDuplicates?: boolean
  }

  export type UserUpsertWithoutAccountsInput = {
    update: XOR<UserUpdateWithoutAccountsInput, UserUncheckedUpdateWithoutAccountsInput>
    create: XOR<UserCreateWithoutAccountsInput, UserUncheckedCreateWithoutAccountsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutAccountsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutAccountsInput, UserUncheckedUpdateWithoutAccountsInput>
  }

  export type UserUpdateWithoutAccountsInput = {
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    holders?: HolderUpdateManyWithoutOwnerNestedInput
    transactionsFinancials?: FinancialTransactionUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutAccountsInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    holders?: HolderUncheckedUpdateManyWithoutOwnerNestedInput
    transactionsFinancials?: FinancialTransactionUncheckedUpdateManyWithoutUserNestedInput
  }

  export type ParcelUpsertWithWhereUniqueWithoutAccountInput = {
    where: ParcelWhereUniqueInput
    update: XOR<ParcelUpdateWithoutAccountInput, ParcelUncheckedUpdateWithoutAccountInput>
    create: XOR<ParcelCreateWithoutAccountInput, ParcelUncheckedCreateWithoutAccountInput>
  }

  export type ParcelUpdateWithWhereUniqueWithoutAccountInput = {
    where: ParcelWhereUniqueInput
    data: XOR<ParcelUpdateWithoutAccountInput, ParcelUncheckedUpdateWithoutAccountInput>
  }

  export type ParcelUpdateManyWithWhereWithoutAccountInput = {
    where: ParcelScalarWhereInput
    data: XOR<ParcelUpdateManyMutationInput, ParcelUncheckedUpdateManyWithoutAccountInput>
  }

  export type ParcelScalarWhereInput = {
    AND?: ParcelScalarWhereInput | ParcelScalarWhereInput[]
    OR?: ParcelScalarWhereInput[]
    NOT?: ParcelScalarWhereInput | ParcelScalarWhereInput[]
    id?: IntFilter<"Parcel"> | number
    value?: FloatFilter<"Parcel"> | number
    dueDate?: DateTimeFilter<"Parcel"> | Date | string
    competence?: DateTimeFilter<"Parcel"> | Date | string
    accountId?: IntFilter<"Parcel"> | number
    categoryId?: IntFilter<"Parcel"> | number
    createdAt?: DateTimeFilter<"Parcel"> | Date | string
    updatedAt?: DateTimeFilter<"Parcel"> | Date | string
  }

  export type AccountPlanUpsertWithoutAccountsInput = {
    update: XOR<AccountPlanUpdateWithoutAccountsInput, AccountPlanUncheckedUpdateWithoutAccountsInput>
    create: XOR<AccountPlanCreateWithoutAccountsInput, AccountPlanUncheckedCreateWithoutAccountsInput>
    where?: AccountPlanWhereInput
  }

  export type AccountPlanUpdateToOneWithWhereWithoutAccountsInput = {
    where?: AccountPlanWhereInput
    data: XOR<AccountPlanUpdateWithoutAccountsInput, AccountPlanUncheckedUpdateWithoutAccountsInput>
  }

  export type AccountPlanUpdateWithoutAccountsInput = {
    name?: StringFieldUpdateOperationsInput | string
    type?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    recurrences?: RecurrenceUpdateManyWithoutCategoryNestedInput
    parcels?: ParcelUpdateManyWithoutCategoryNestedInput
    financialTransactions?: FinancialTransactionUpdateManyWithoutCategoryNestedInput
  }

  export type AccountPlanUncheckedUpdateWithoutAccountsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    type?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    recurrences?: RecurrenceUncheckedUpdateManyWithoutCategoryNestedInput
    parcels?: ParcelUncheckedUpdateManyWithoutCategoryNestedInput
    financialTransactions?: FinancialTransactionUncheckedUpdateManyWithoutCategoryNestedInput
  }

  export type FinancialTransactionUpsertWithWhereUniqueWithoutAccountInput = {
    where: FinancialTransactionWhereUniqueInput
    update: XOR<FinancialTransactionUpdateWithoutAccountInput, FinancialTransactionUncheckedUpdateWithoutAccountInput>
    create: XOR<FinancialTransactionCreateWithoutAccountInput, FinancialTransactionUncheckedCreateWithoutAccountInput>
  }

  export type FinancialTransactionUpdateWithWhereUniqueWithoutAccountInput = {
    where: FinancialTransactionWhereUniqueInput
    data: XOR<FinancialTransactionUpdateWithoutAccountInput, FinancialTransactionUncheckedUpdateWithoutAccountInput>
  }

  export type FinancialTransactionUpdateManyWithWhereWithoutAccountInput = {
    where: FinancialTransactionScalarWhereInput
    data: XOR<FinancialTransactionUpdateManyMutationInput, FinancialTransactionUncheckedUpdateManyWithoutAccountInput>
  }

  export type AccountPlanCreateWithoutParcelsInput = {
    name: string
    type: number
    createdAt?: Date | string
    updatedAt?: Date | string
    recurrences?: RecurrenceCreateNestedManyWithoutCategoryInput
    accounts?: AccountCreateNestedManyWithoutCategoryInput
    financialTransactions?: FinancialTransactionCreateNestedManyWithoutCategoryInput
  }

  export type AccountPlanUncheckedCreateWithoutParcelsInput = {
    id?: number
    name: string
    type: number
    createdAt?: Date | string
    updatedAt?: Date | string
    recurrences?: RecurrenceUncheckedCreateNestedManyWithoutCategoryInput
    accounts?: AccountUncheckedCreateNestedManyWithoutCategoryInput
    financialTransactions?: FinancialTransactionUncheckedCreateNestedManyWithoutCategoryInput
  }

  export type AccountPlanCreateOrConnectWithoutParcelsInput = {
    where: AccountPlanWhereUniqueInput
    create: XOR<AccountPlanCreateWithoutParcelsInput, AccountPlanUncheckedCreateWithoutParcelsInput>
  }

  export type AccountCreateWithoutParcelsInput = {
    description: string
    balance: number
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutAccountsInput
    category: AccountPlanCreateNestedOneWithoutAccountsInput
    financialTransactions?: FinancialTransactionCreateNestedManyWithoutAccountInput
  }

  export type AccountUncheckedCreateWithoutParcelsInput = {
    id?: number
    description: string
    balance: number
    userId: number
    categoryId: number
    createdAt?: Date | string
    updatedAt?: Date | string
    financialTransactions?: FinancialTransactionUncheckedCreateNestedManyWithoutAccountInput
  }

  export type AccountCreateOrConnectWithoutParcelsInput = {
    where: AccountWhereUniqueInput
    create: XOR<AccountCreateWithoutParcelsInput, AccountUncheckedCreateWithoutParcelsInput>
  }

  export type FinancialTransactionCreateWithoutParcelInput = {
    description: string
    value: number
    createdAt?: Date | string
    updatedAt?: Date | string
    typeTransaction: TransactionTypeCreateNestedOneWithoutFinancialTransactionsInput
    user: UserCreateNestedOneWithoutTransactionsFinancialsInput
    category: AccountPlanCreateNestedOneWithoutFinancialTransactionsInput
    account: AccountCreateNestedOneWithoutFinancialTransactionsInput
    transactionsForm: TransactionsFormsCreateNestedOneWithoutFinancialTransactionsInput
  }

  export type FinancialTransactionUncheckedCreateWithoutParcelInput = {
    id?: number
    description: string
    value: number
    userId: number
    transactionsFormsId: number
    categoryId: number
    accountId: number
    typeId: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type FinancialTransactionCreateOrConnectWithoutParcelInput = {
    where: FinancialTransactionWhereUniqueInput
    create: XOR<FinancialTransactionCreateWithoutParcelInput, FinancialTransactionUncheckedCreateWithoutParcelInput>
  }

  export type FinancialTransactionCreateManyParcelInputEnvelope = {
    data: FinancialTransactionCreateManyParcelInput | FinancialTransactionCreateManyParcelInput[]
    skipDuplicates?: boolean
  }

  export type AccountPlanUpsertWithoutParcelsInput = {
    update: XOR<AccountPlanUpdateWithoutParcelsInput, AccountPlanUncheckedUpdateWithoutParcelsInput>
    create: XOR<AccountPlanCreateWithoutParcelsInput, AccountPlanUncheckedCreateWithoutParcelsInput>
    where?: AccountPlanWhereInput
  }

  export type AccountPlanUpdateToOneWithWhereWithoutParcelsInput = {
    where?: AccountPlanWhereInput
    data: XOR<AccountPlanUpdateWithoutParcelsInput, AccountPlanUncheckedUpdateWithoutParcelsInput>
  }

  export type AccountPlanUpdateWithoutParcelsInput = {
    name?: StringFieldUpdateOperationsInput | string
    type?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    recurrences?: RecurrenceUpdateManyWithoutCategoryNestedInput
    accounts?: AccountUpdateManyWithoutCategoryNestedInput
    financialTransactions?: FinancialTransactionUpdateManyWithoutCategoryNestedInput
  }

  export type AccountPlanUncheckedUpdateWithoutParcelsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    type?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    recurrences?: RecurrenceUncheckedUpdateManyWithoutCategoryNestedInput
    accounts?: AccountUncheckedUpdateManyWithoutCategoryNestedInput
    financialTransactions?: FinancialTransactionUncheckedUpdateManyWithoutCategoryNestedInput
  }

  export type AccountUpsertWithoutParcelsInput = {
    update: XOR<AccountUpdateWithoutParcelsInput, AccountUncheckedUpdateWithoutParcelsInput>
    create: XOR<AccountCreateWithoutParcelsInput, AccountUncheckedCreateWithoutParcelsInput>
    where?: AccountWhereInput
  }

  export type AccountUpdateToOneWithWhereWithoutParcelsInput = {
    where?: AccountWhereInput
    data: XOR<AccountUpdateWithoutParcelsInput, AccountUncheckedUpdateWithoutParcelsInput>
  }

  export type AccountUpdateWithoutParcelsInput = {
    description?: StringFieldUpdateOperationsInput | string
    balance?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutAccountsNestedInput
    category?: AccountPlanUpdateOneRequiredWithoutAccountsNestedInput
    financialTransactions?: FinancialTransactionUpdateManyWithoutAccountNestedInput
  }

  export type AccountUncheckedUpdateWithoutParcelsInput = {
    id?: IntFieldUpdateOperationsInput | number
    description?: StringFieldUpdateOperationsInput | string
    balance?: FloatFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    categoryId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    financialTransactions?: FinancialTransactionUncheckedUpdateManyWithoutAccountNestedInput
  }

  export type FinancialTransactionUpsertWithWhereUniqueWithoutParcelInput = {
    where: FinancialTransactionWhereUniqueInput
    update: XOR<FinancialTransactionUpdateWithoutParcelInput, FinancialTransactionUncheckedUpdateWithoutParcelInput>
    create: XOR<FinancialTransactionCreateWithoutParcelInput, FinancialTransactionUncheckedCreateWithoutParcelInput>
  }

  export type FinancialTransactionUpdateWithWhereUniqueWithoutParcelInput = {
    where: FinancialTransactionWhereUniqueInput
    data: XOR<FinancialTransactionUpdateWithoutParcelInput, FinancialTransactionUncheckedUpdateWithoutParcelInput>
  }

  export type FinancialTransactionUpdateManyWithWhereWithoutParcelInput = {
    where: FinancialTransactionScalarWhereInput
    data: XOR<FinancialTransactionUpdateManyMutationInput, FinancialTransactionUncheckedUpdateManyWithoutParcelInput>
  }

  export type HolderCreateWithoutTransactionsFormsInput = {
    name: string
    value: number
    createdAt?: Date | string
    updatedAt?: Date | string
    owner: UserCreateNestedOneWithoutHoldersInput
  }

  export type HolderUncheckedCreateWithoutTransactionsFormsInput = {
    id?: number
    name: string
    value: number
    ownerId: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type HolderCreateOrConnectWithoutTransactionsFormsInput = {
    where: HolderWhereUniqueInput
    create: XOR<HolderCreateWithoutTransactionsFormsInput, HolderUncheckedCreateWithoutTransactionsFormsInput>
  }

  export type FinancialTransactionCreateWithoutTransactionsFormInput = {
    description: string
    value: number
    createdAt?: Date | string
    updatedAt?: Date | string
    typeTransaction: TransactionTypeCreateNestedOneWithoutFinancialTransactionsInput
    user: UserCreateNestedOneWithoutTransactionsFinancialsInput
    category: AccountPlanCreateNestedOneWithoutFinancialTransactionsInput
    account: AccountCreateNestedOneWithoutFinancialTransactionsInput
    parcel: ParcelCreateNestedOneWithoutFinancialTransactionsInput
  }

  export type FinancialTransactionUncheckedCreateWithoutTransactionsFormInput = {
    id?: number
    description: string
    value: number
    userId: number
    categoryId: number
    parcelId: number
    accountId: number
    typeId: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type FinancialTransactionCreateOrConnectWithoutTransactionsFormInput = {
    where: FinancialTransactionWhereUniqueInput
    create: XOR<FinancialTransactionCreateWithoutTransactionsFormInput, FinancialTransactionUncheckedCreateWithoutTransactionsFormInput>
  }

  export type FinancialTransactionCreateManyTransactionsFormInputEnvelope = {
    data: FinancialTransactionCreateManyTransactionsFormInput | FinancialTransactionCreateManyTransactionsFormInput[]
    skipDuplicates?: boolean
  }

  export type HolderUpsertWithoutTransactionsFormsInput = {
    update: XOR<HolderUpdateWithoutTransactionsFormsInput, HolderUncheckedUpdateWithoutTransactionsFormsInput>
    create: XOR<HolderCreateWithoutTransactionsFormsInput, HolderUncheckedCreateWithoutTransactionsFormsInput>
    where?: HolderWhereInput
  }

  export type HolderUpdateToOneWithWhereWithoutTransactionsFormsInput = {
    where?: HolderWhereInput
    data: XOR<HolderUpdateWithoutTransactionsFormsInput, HolderUncheckedUpdateWithoutTransactionsFormsInput>
  }

  export type HolderUpdateWithoutTransactionsFormsInput = {
    name?: StringFieldUpdateOperationsInput | string
    value?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    owner?: UserUpdateOneRequiredWithoutHoldersNestedInput
  }

  export type HolderUncheckedUpdateWithoutTransactionsFormsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    value?: FloatFieldUpdateOperationsInput | number
    ownerId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FinancialTransactionUpsertWithWhereUniqueWithoutTransactionsFormInput = {
    where: FinancialTransactionWhereUniqueInput
    update: XOR<FinancialTransactionUpdateWithoutTransactionsFormInput, FinancialTransactionUncheckedUpdateWithoutTransactionsFormInput>
    create: XOR<FinancialTransactionCreateWithoutTransactionsFormInput, FinancialTransactionUncheckedCreateWithoutTransactionsFormInput>
  }

  export type FinancialTransactionUpdateWithWhereUniqueWithoutTransactionsFormInput = {
    where: FinancialTransactionWhereUniqueInput
    data: XOR<FinancialTransactionUpdateWithoutTransactionsFormInput, FinancialTransactionUncheckedUpdateWithoutTransactionsFormInput>
  }

  export type FinancialTransactionUpdateManyWithWhereWithoutTransactionsFormInput = {
    where: FinancialTransactionScalarWhereInput
    data: XOR<FinancialTransactionUpdateManyMutationInput, FinancialTransactionUncheckedUpdateManyWithoutTransactionsFormInput>
  }

  export type TransactionTypeCreateWithoutFinancialTransactionsInput = {
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TransactionTypeUncheckedCreateWithoutFinancialTransactionsInput = {
    id?: number
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TransactionTypeCreateOrConnectWithoutFinancialTransactionsInput = {
    where: TransactionTypeWhereUniqueInput
    create: XOR<TransactionTypeCreateWithoutFinancialTransactionsInput, TransactionTypeUncheckedCreateWithoutFinancialTransactionsInput>
  }

  export type UserCreateWithoutTransactionsFinancialsInput = {
    email: string
    name: string
    password: string
    createdAt?: Date | string
    updatedAt?: Date | string
    holders?: HolderCreateNestedManyWithoutOwnerInput
    accounts?: AccountCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutTransactionsFinancialsInput = {
    id?: number
    email: string
    name: string
    password: string
    createdAt?: Date | string
    updatedAt?: Date | string
    holders?: HolderUncheckedCreateNestedManyWithoutOwnerInput
    accounts?: AccountUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutTransactionsFinancialsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutTransactionsFinancialsInput, UserUncheckedCreateWithoutTransactionsFinancialsInput>
  }

  export type AccountPlanCreateWithoutFinancialTransactionsInput = {
    name: string
    type: number
    createdAt?: Date | string
    updatedAt?: Date | string
    recurrences?: RecurrenceCreateNestedManyWithoutCategoryInput
    accounts?: AccountCreateNestedManyWithoutCategoryInput
    parcels?: ParcelCreateNestedManyWithoutCategoryInput
  }

  export type AccountPlanUncheckedCreateWithoutFinancialTransactionsInput = {
    id?: number
    name: string
    type: number
    createdAt?: Date | string
    updatedAt?: Date | string
    recurrences?: RecurrenceUncheckedCreateNestedManyWithoutCategoryInput
    accounts?: AccountUncheckedCreateNestedManyWithoutCategoryInput
    parcels?: ParcelUncheckedCreateNestedManyWithoutCategoryInput
  }

  export type AccountPlanCreateOrConnectWithoutFinancialTransactionsInput = {
    where: AccountPlanWhereUniqueInput
    create: XOR<AccountPlanCreateWithoutFinancialTransactionsInput, AccountPlanUncheckedCreateWithoutFinancialTransactionsInput>
  }

  export type AccountCreateWithoutFinancialTransactionsInput = {
    description: string
    balance: number
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutAccountsInput
    parcels?: ParcelCreateNestedManyWithoutAccountInput
    category: AccountPlanCreateNestedOneWithoutAccountsInput
  }

  export type AccountUncheckedCreateWithoutFinancialTransactionsInput = {
    id?: number
    description: string
    balance: number
    userId: number
    categoryId: number
    createdAt?: Date | string
    updatedAt?: Date | string
    parcels?: ParcelUncheckedCreateNestedManyWithoutAccountInput
  }

  export type AccountCreateOrConnectWithoutFinancialTransactionsInput = {
    where: AccountWhereUniqueInput
    create: XOR<AccountCreateWithoutFinancialTransactionsInput, AccountUncheckedCreateWithoutFinancialTransactionsInput>
  }

  export type ParcelCreateWithoutFinancialTransactionsInput = {
    value: number
    dueDate: Date | string
    competence: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
    category: AccountPlanCreateNestedOneWithoutParcelsInput
    account: AccountCreateNestedOneWithoutParcelsInput
  }

  export type ParcelUncheckedCreateWithoutFinancialTransactionsInput = {
    id?: number
    value: number
    dueDate: Date | string
    competence: Date | string
    accountId: number
    categoryId: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ParcelCreateOrConnectWithoutFinancialTransactionsInput = {
    where: ParcelWhereUniqueInput
    create: XOR<ParcelCreateWithoutFinancialTransactionsInput, ParcelUncheckedCreateWithoutFinancialTransactionsInput>
  }

  export type TransactionsFormsCreateWithoutFinancialTransactionsInput = {
    name: string
    type: number
    createdAt?: Date | string
    updatedAt?: Date | string
    holder: HolderCreateNestedOneWithoutTransactionsFormsInput
  }

  export type TransactionsFormsUncheckedCreateWithoutFinancialTransactionsInput = {
    id?: number
    name: string
    type: number
    holderId: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TransactionsFormsCreateOrConnectWithoutFinancialTransactionsInput = {
    where: TransactionsFormsWhereUniqueInput
    create: XOR<TransactionsFormsCreateWithoutFinancialTransactionsInput, TransactionsFormsUncheckedCreateWithoutFinancialTransactionsInput>
  }

  export type TransactionTypeUpsertWithoutFinancialTransactionsInput = {
    update: XOR<TransactionTypeUpdateWithoutFinancialTransactionsInput, TransactionTypeUncheckedUpdateWithoutFinancialTransactionsInput>
    create: XOR<TransactionTypeCreateWithoutFinancialTransactionsInput, TransactionTypeUncheckedCreateWithoutFinancialTransactionsInput>
    where?: TransactionTypeWhereInput
  }

  export type TransactionTypeUpdateToOneWithWhereWithoutFinancialTransactionsInput = {
    where?: TransactionTypeWhereInput
    data: XOR<TransactionTypeUpdateWithoutFinancialTransactionsInput, TransactionTypeUncheckedUpdateWithoutFinancialTransactionsInput>
  }

  export type TransactionTypeUpdateWithoutFinancialTransactionsInput = {
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TransactionTypeUncheckedUpdateWithoutFinancialTransactionsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserUpsertWithoutTransactionsFinancialsInput = {
    update: XOR<UserUpdateWithoutTransactionsFinancialsInput, UserUncheckedUpdateWithoutTransactionsFinancialsInput>
    create: XOR<UserCreateWithoutTransactionsFinancialsInput, UserUncheckedCreateWithoutTransactionsFinancialsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutTransactionsFinancialsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutTransactionsFinancialsInput, UserUncheckedUpdateWithoutTransactionsFinancialsInput>
  }

  export type UserUpdateWithoutTransactionsFinancialsInput = {
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    holders?: HolderUpdateManyWithoutOwnerNestedInput
    accounts?: AccountUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutTransactionsFinancialsInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    holders?: HolderUncheckedUpdateManyWithoutOwnerNestedInput
    accounts?: AccountUncheckedUpdateManyWithoutUserNestedInput
  }

  export type AccountPlanUpsertWithoutFinancialTransactionsInput = {
    update: XOR<AccountPlanUpdateWithoutFinancialTransactionsInput, AccountPlanUncheckedUpdateWithoutFinancialTransactionsInput>
    create: XOR<AccountPlanCreateWithoutFinancialTransactionsInput, AccountPlanUncheckedCreateWithoutFinancialTransactionsInput>
    where?: AccountPlanWhereInput
  }

  export type AccountPlanUpdateToOneWithWhereWithoutFinancialTransactionsInput = {
    where?: AccountPlanWhereInput
    data: XOR<AccountPlanUpdateWithoutFinancialTransactionsInput, AccountPlanUncheckedUpdateWithoutFinancialTransactionsInput>
  }

  export type AccountPlanUpdateWithoutFinancialTransactionsInput = {
    name?: StringFieldUpdateOperationsInput | string
    type?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    recurrences?: RecurrenceUpdateManyWithoutCategoryNestedInput
    accounts?: AccountUpdateManyWithoutCategoryNestedInput
    parcels?: ParcelUpdateManyWithoutCategoryNestedInput
  }

  export type AccountPlanUncheckedUpdateWithoutFinancialTransactionsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    type?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    recurrences?: RecurrenceUncheckedUpdateManyWithoutCategoryNestedInput
    accounts?: AccountUncheckedUpdateManyWithoutCategoryNestedInput
    parcels?: ParcelUncheckedUpdateManyWithoutCategoryNestedInput
  }

  export type AccountUpsertWithoutFinancialTransactionsInput = {
    update: XOR<AccountUpdateWithoutFinancialTransactionsInput, AccountUncheckedUpdateWithoutFinancialTransactionsInput>
    create: XOR<AccountCreateWithoutFinancialTransactionsInput, AccountUncheckedCreateWithoutFinancialTransactionsInput>
    where?: AccountWhereInput
  }

  export type AccountUpdateToOneWithWhereWithoutFinancialTransactionsInput = {
    where?: AccountWhereInput
    data: XOR<AccountUpdateWithoutFinancialTransactionsInput, AccountUncheckedUpdateWithoutFinancialTransactionsInput>
  }

  export type AccountUpdateWithoutFinancialTransactionsInput = {
    description?: StringFieldUpdateOperationsInput | string
    balance?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutAccountsNestedInput
    parcels?: ParcelUpdateManyWithoutAccountNestedInput
    category?: AccountPlanUpdateOneRequiredWithoutAccountsNestedInput
  }

  export type AccountUncheckedUpdateWithoutFinancialTransactionsInput = {
    id?: IntFieldUpdateOperationsInput | number
    description?: StringFieldUpdateOperationsInput | string
    balance?: FloatFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    categoryId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    parcels?: ParcelUncheckedUpdateManyWithoutAccountNestedInput
  }

  export type ParcelUpsertWithoutFinancialTransactionsInput = {
    update: XOR<ParcelUpdateWithoutFinancialTransactionsInput, ParcelUncheckedUpdateWithoutFinancialTransactionsInput>
    create: XOR<ParcelCreateWithoutFinancialTransactionsInput, ParcelUncheckedCreateWithoutFinancialTransactionsInput>
    where?: ParcelWhereInput
  }

  export type ParcelUpdateToOneWithWhereWithoutFinancialTransactionsInput = {
    where?: ParcelWhereInput
    data: XOR<ParcelUpdateWithoutFinancialTransactionsInput, ParcelUncheckedUpdateWithoutFinancialTransactionsInput>
  }

  export type ParcelUpdateWithoutFinancialTransactionsInput = {
    value?: FloatFieldUpdateOperationsInput | number
    dueDate?: DateTimeFieldUpdateOperationsInput | Date | string
    competence?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    category?: AccountPlanUpdateOneRequiredWithoutParcelsNestedInput
    account?: AccountUpdateOneRequiredWithoutParcelsNestedInput
  }

  export type ParcelUncheckedUpdateWithoutFinancialTransactionsInput = {
    id?: IntFieldUpdateOperationsInput | number
    value?: FloatFieldUpdateOperationsInput | number
    dueDate?: DateTimeFieldUpdateOperationsInput | Date | string
    competence?: DateTimeFieldUpdateOperationsInput | Date | string
    accountId?: IntFieldUpdateOperationsInput | number
    categoryId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TransactionsFormsUpsertWithoutFinancialTransactionsInput = {
    update: XOR<TransactionsFormsUpdateWithoutFinancialTransactionsInput, TransactionsFormsUncheckedUpdateWithoutFinancialTransactionsInput>
    create: XOR<TransactionsFormsCreateWithoutFinancialTransactionsInput, TransactionsFormsUncheckedCreateWithoutFinancialTransactionsInput>
    where?: TransactionsFormsWhereInput
  }

  export type TransactionsFormsUpdateToOneWithWhereWithoutFinancialTransactionsInput = {
    where?: TransactionsFormsWhereInput
    data: XOR<TransactionsFormsUpdateWithoutFinancialTransactionsInput, TransactionsFormsUncheckedUpdateWithoutFinancialTransactionsInput>
  }

  export type TransactionsFormsUpdateWithoutFinancialTransactionsInput = {
    name?: StringFieldUpdateOperationsInput | string
    type?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    holder?: HolderUpdateOneRequiredWithoutTransactionsFormsNestedInput
  }

  export type TransactionsFormsUncheckedUpdateWithoutFinancialTransactionsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    type?: IntFieldUpdateOperationsInput | number
    holderId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FinancialTransactionCreateWithoutTypeTransactionInput = {
    description: string
    value: number
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutTransactionsFinancialsInput
    category: AccountPlanCreateNestedOneWithoutFinancialTransactionsInput
    account: AccountCreateNestedOneWithoutFinancialTransactionsInput
    parcel: ParcelCreateNestedOneWithoutFinancialTransactionsInput
    transactionsForm: TransactionsFormsCreateNestedOneWithoutFinancialTransactionsInput
  }

  export type FinancialTransactionUncheckedCreateWithoutTypeTransactionInput = {
    id?: number
    description: string
    value: number
    userId: number
    transactionsFormsId: number
    categoryId: number
    parcelId: number
    accountId: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type FinancialTransactionCreateOrConnectWithoutTypeTransactionInput = {
    where: FinancialTransactionWhereUniqueInput
    create: XOR<FinancialTransactionCreateWithoutTypeTransactionInput, FinancialTransactionUncheckedCreateWithoutTypeTransactionInput>
  }

  export type FinancialTransactionCreateManyTypeTransactionInputEnvelope = {
    data: FinancialTransactionCreateManyTypeTransactionInput | FinancialTransactionCreateManyTypeTransactionInput[]
    skipDuplicates?: boolean
  }

  export type FinancialTransactionUpsertWithWhereUniqueWithoutTypeTransactionInput = {
    where: FinancialTransactionWhereUniqueInput
    update: XOR<FinancialTransactionUpdateWithoutTypeTransactionInput, FinancialTransactionUncheckedUpdateWithoutTypeTransactionInput>
    create: XOR<FinancialTransactionCreateWithoutTypeTransactionInput, FinancialTransactionUncheckedCreateWithoutTypeTransactionInput>
  }

  export type FinancialTransactionUpdateWithWhereUniqueWithoutTypeTransactionInput = {
    where: FinancialTransactionWhereUniqueInput
    data: XOR<FinancialTransactionUpdateWithoutTypeTransactionInput, FinancialTransactionUncheckedUpdateWithoutTypeTransactionInput>
  }

  export type FinancialTransactionUpdateManyWithWhereWithoutTypeTransactionInput = {
    where: FinancialTransactionScalarWhereInput
    data: XOR<FinancialTransactionUpdateManyMutationInput, FinancialTransactionUncheckedUpdateManyWithoutTypeTransactionInput>
  }

  export type RecurrenceCreateWithoutCategoryInput = {
    name: string
    reptition: number
    range: number
    value: number
    type: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type RecurrenceUncheckedCreateWithoutCategoryInput = {
    id?: number
    name: string
    reptition: number
    range: number
    value: number
    type: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type RecurrenceCreateOrConnectWithoutCategoryInput = {
    where: RecurrenceWhereUniqueInput
    create: XOR<RecurrenceCreateWithoutCategoryInput, RecurrenceUncheckedCreateWithoutCategoryInput>
  }

  export type RecurrenceCreateManyCategoryInputEnvelope = {
    data: RecurrenceCreateManyCategoryInput | RecurrenceCreateManyCategoryInput[]
    skipDuplicates?: boolean
  }

  export type AccountCreateWithoutCategoryInput = {
    description: string
    balance: number
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutAccountsInput
    parcels?: ParcelCreateNestedManyWithoutAccountInput
    financialTransactions?: FinancialTransactionCreateNestedManyWithoutAccountInput
  }

  export type AccountUncheckedCreateWithoutCategoryInput = {
    id?: number
    description: string
    balance: number
    userId: number
    createdAt?: Date | string
    updatedAt?: Date | string
    parcels?: ParcelUncheckedCreateNestedManyWithoutAccountInput
    financialTransactions?: FinancialTransactionUncheckedCreateNestedManyWithoutAccountInput
  }

  export type AccountCreateOrConnectWithoutCategoryInput = {
    where: AccountWhereUniqueInput
    create: XOR<AccountCreateWithoutCategoryInput, AccountUncheckedCreateWithoutCategoryInput>
  }

  export type AccountCreateManyCategoryInputEnvelope = {
    data: AccountCreateManyCategoryInput | AccountCreateManyCategoryInput[]
    skipDuplicates?: boolean
  }

  export type ParcelCreateWithoutCategoryInput = {
    value: number
    dueDate: Date | string
    competence: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
    account: AccountCreateNestedOneWithoutParcelsInput
    FinancialTransactions?: FinancialTransactionCreateNestedManyWithoutParcelInput
  }

  export type ParcelUncheckedCreateWithoutCategoryInput = {
    id?: number
    value: number
    dueDate: Date | string
    competence: Date | string
    accountId: number
    createdAt?: Date | string
    updatedAt?: Date | string
    FinancialTransactions?: FinancialTransactionUncheckedCreateNestedManyWithoutParcelInput
  }

  export type ParcelCreateOrConnectWithoutCategoryInput = {
    where: ParcelWhereUniqueInput
    create: XOR<ParcelCreateWithoutCategoryInput, ParcelUncheckedCreateWithoutCategoryInput>
  }

  export type ParcelCreateManyCategoryInputEnvelope = {
    data: ParcelCreateManyCategoryInput | ParcelCreateManyCategoryInput[]
    skipDuplicates?: boolean
  }

  export type FinancialTransactionCreateWithoutCategoryInput = {
    description: string
    value: number
    createdAt?: Date | string
    updatedAt?: Date | string
    typeTransaction: TransactionTypeCreateNestedOneWithoutFinancialTransactionsInput
    user: UserCreateNestedOneWithoutTransactionsFinancialsInput
    account: AccountCreateNestedOneWithoutFinancialTransactionsInput
    parcel: ParcelCreateNestedOneWithoutFinancialTransactionsInput
    transactionsForm: TransactionsFormsCreateNestedOneWithoutFinancialTransactionsInput
  }

  export type FinancialTransactionUncheckedCreateWithoutCategoryInput = {
    id?: number
    description: string
    value: number
    userId: number
    transactionsFormsId: number
    parcelId: number
    accountId: number
    typeId: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type FinancialTransactionCreateOrConnectWithoutCategoryInput = {
    where: FinancialTransactionWhereUniqueInput
    create: XOR<FinancialTransactionCreateWithoutCategoryInput, FinancialTransactionUncheckedCreateWithoutCategoryInput>
  }

  export type FinancialTransactionCreateManyCategoryInputEnvelope = {
    data: FinancialTransactionCreateManyCategoryInput | FinancialTransactionCreateManyCategoryInput[]
    skipDuplicates?: boolean
  }

  export type RecurrenceUpsertWithWhereUniqueWithoutCategoryInput = {
    where: RecurrenceWhereUniqueInput
    update: XOR<RecurrenceUpdateWithoutCategoryInput, RecurrenceUncheckedUpdateWithoutCategoryInput>
    create: XOR<RecurrenceCreateWithoutCategoryInput, RecurrenceUncheckedCreateWithoutCategoryInput>
  }

  export type RecurrenceUpdateWithWhereUniqueWithoutCategoryInput = {
    where: RecurrenceWhereUniqueInput
    data: XOR<RecurrenceUpdateWithoutCategoryInput, RecurrenceUncheckedUpdateWithoutCategoryInput>
  }

  export type RecurrenceUpdateManyWithWhereWithoutCategoryInput = {
    where: RecurrenceScalarWhereInput
    data: XOR<RecurrenceUpdateManyMutationInput, RecurrenceUncheckedUpdateManyWithoutCategoryInput>
  }

  export type RecurrenceScalarWhereInput = {
    AND?: RecurrenceScalarWhereInput | RecurrenceScalarWhereInput[]
    OR?: RecurrenceScalarWhereInput[]
    NOT?: RecurrenceScalarWhereInput | RecurrenceScalarWhereInput[]
    id?: IntFilter<"Recurrence"> | number
    name?: StringFilter<"Recurrence"> | string
    reptition?: IntFilter<"Recurrence"> | number
    range?: IntFilter<"Recurrence"> | number
    value?: FloatFilter<"Recurrence"> | number
    categoryId?: IntFilter<"Recurrence"> | number
    type?: IntFilter<"Recurrence"> | number
    createdAt?: DateTimeFilter<"Recurrence"> | Date | string
    updatedAt?: DateTimeFilter<"Recurrence"> | Date | string
  }

  export type AccountUpsertWithWhereUniqueWithoutCategoryInput = {
    where: AccountWhereUniqueInput
    update: XOR<AccountUpdateWithoutCategoryInput, AccountUncheckedUpdateWithoutCategoryInput>
    create: XOR<AccountCreateWithoutCategoryInput, AccountUncheckedCreateWithoutCategoryInput>
  }

  export type AccountUpdateWithWhereUniqueWithoutCategoryInput = {
    where: AccountWhereUniqueInput
    data: XOR<AccountUpdateWithoutCategoryInput, AccountUncheckedUpdateWithoutCategoryInput>
  }

  export type AccountUpdateManyWithWhereWithoutCategoryInput = {
    where: AccountScalarWhereInput
    data: XOR<AccountUpdateManyMutationInput, AccountUncheckedUpdateManyWithoutCategoryInput>
  }

  export type ParcelUpsertWithWhereUniqueWithoutCategoryInput = {
    where: ParcelWhereUniqueInput
    update: XOR<ParcelUpdateWithoutCategoryInput, ParcelUncheckedUpdateWithoutCategoryInput>
    create: XOR<ParcelCreateWithoutCategoryInput, ParcelUncheckedCreateWithoutCategoryInput>
  }

  export type ParcelUpdateWithWhereUniqueWithoutCategoryInput = {
    where: ParcelWhereUniqueInput
    data: XOR<ParcelUpdateWithoutCategoryInput, ParcelUncheckedUpdateWithoutCategoryInput>
  }

  export type ParcelUpdateManyWithWhereWithoutCategoryInput = {
    where: ParcelScalarWhereInput
    data: XOR<ParcelUpdateManyMutationInput, ParcelUncheckedUpdateManyWithoutCategoryInput>
  }

  export type FinancialTransactionUpsertWithWhereUniqueWithoutCategoryInput = {
    where: FinancialTransactionWhereUniqueInput
    update: XOR<FinancialTransactionUpdateWithoutCategoryInput, FinancialTransactionUncheckedUpdateWithoutCategoryInput>
    create: XOR<FinancialTransactionCreateWithoutCategoryInput, FinancialTransactionUncheckedCreateWithoutCategoryInput>
  }

  export type FinancialTransactionUpdateWithWhereUniqueWithoutCategoryInput = {
    where: FinancialTransactionWhereUniqueInput
    data: XOR<FinancialTransactionUpdateWithoutCategoryInput, FinancialTransactionUncheckedUpdateWithoutCategoryInput>
  }

  export type FinancialTransactionUpdateManyWithWhereWithoutCategoryInput = {
    where: FinancialTransactionScalarWhereInput
    data: XOR<FinancialTransactionUpdateManyMutationInput, FinancialTransactionUncheckedUpdateManyWithoutCategoryInput>
  }

  export type HolderCreateManyOwnerInput = {
    id?: number
    name: string
    value: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type AccountCreateManyUserInput = {
    id?: number
    description: string
    balance: number
    categoryId: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type FinancialTransactionCreateManyUserInput = {
    id?: number
    description: string
    value: number
    transactionsFormsId: number
    categoryId: number
    parcelId: number
    accountId: number
    typeId: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type HolderUpdateWithoutOwnerInput = {
    name?: StringFieldUpdateOperationsInput | string
    value?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    transactionsForms?: TransactionsFormsUpdateManyWithoutHolderNestedInput
  }

  export type HolderUncheckedUpdateWithoutOwnerInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    value?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    transactionsForms?: TransactionsFormsUncheckedUpdateManyWithoutHolderNestedInput
  }

  export type HolderUncheckedUpdateManyWithoutOwnerInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    value?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AccountUpdateWithoutUserInput = {
    description?: StringFieldUpdateOperationsInput | string
    balance?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    parcels?: ParcelUpdateManyWithoutAccountNestedInput
    category?: AccountPlanUpdateOneRequiredWithoutAccountsNestedInput
    financialTransactions?: FinancialTransactionUpdateManyWithoutAccountNestedInput
  }

  export type AccountUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    description?: StringFieldUpdateOperationsInput | string
    balance?: FloatFieldUpdateOperationsInput | number
    categoryId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    parcels?: ParcelUncheckedUpdateManyWithoutAccountNestedInput
    financialTransactions?: FinancialTransactionUncheckedUpdateManyWithoutAccountNestedInput
  }

  export type AccountUncheckedUpdateManyWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    description?: StringFieldUpdateOperationsInput | string
    balance?: FloatFieldUpdateOperationsInput | number
    categoryId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FinancialTransactionUpdateWithoutUserInput = {
    description?: StringFieldUpdateOperationsInput | string
    value?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    typeTransaction?: TransactionTypeUpdateOneRequiredWithoutFinancialTransactionsNestedInput
    category?: AccountPlanUpdateOneRequiredWithoutFinancialTransactionsNestedInput
    account?: AccountUpdateOneRequiredWithoutFinancialTransactionsNestedInput
    parcel?: ParcelUpdateOneRequiredWithoutFinancialTransactionsNestedInput
    transactionsForm?: TransactionsFormsUpdateOneRequiredWithoutFinancialTransactionsNestedInput
  }

  export type FinancialTransactionUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    description?: StringFieldUpdateOperationsInput | string
    value?: FloatFieldUpdateOperationsInput | number
    transactionsFormsId?: IntFieldUpdateOperationsInput | number
    categoryId?: IntFieldUpdateOperationsInput | number
    parcelId?: IntFieldUpdateOperationsInput | number
    accountId?: IntFieldUpdateOperationsInput | number
    typeId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FinancialTransactionUncheckedUpdateManyWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    description?: StringFieldUpdateOperationsInput | string
    value?: FloatFieldUpdateOperationsInput | number
    transactionsFormsId?: IntFieldUpdateOperationsInput | number
    categoryId?: IntFieldUpdateOperationsInput | number
    parcelId?: IntFieldUpdateOperationsInput | number
    accountId?: IntFieldUpdateOperationsInput | number
    typeId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TransactionsFormsCreateManyHolderInput = {
    id?: number
    name: string
    type: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TransactionsFormsUpdateWithoutHolderInput = {
    name?: StringFieldUpdateOperationsInput | string
    type?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    FinancialTransactions?: FinancialTransactionUpdateManyWithoutTransactionsFormNestedInput
  }

  export type TransactionsFormsUncheckedUpdateWithoutHolderInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    type?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    FinancialTransactions?: FinancialTransactionUncheckedUpdateManyWithoutTransactionsFormNestedInput
  }

  export type TransactionsFormsUncheckedUpdateManyWithoutHolderInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    type?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ParcelCreateManyAccountInput = {
    id?: number
    value: number
    dueDate: Date | string
    competence: Date | string
    categoryId: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type FinancialTransactionCreateManyAccountInput = {
    id?: number
    description: string
    value: number
    userId: number
    transactionsFormsId: number
    categoryId: number
    parcelId: number
    typeId: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ParcelUpdateWithoutAccountInput = {
    value?: FloatFieldUpdateOperationsInput | number
    dueDate?: DateTimeFieldUpdateOperationsInput | Date | string
    competence?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    category?: AccountPlanUpdateOneRequiredWithoutParcelsNestedInput
    FinancialTransactions?: FinancialTransactionUpdateManyWithoutParcelNestedInput
  }

  export type ParcelUncheckedUpdateWithoutAccountInput = {
    id?: IntFieldUpdateOperationsInput | number
    value?: FloatFieldUpdateOperationsInput | number
    dueDate?: DateTimeFieldUpdateOperationsInput | Date | string
    competence?: DateTimeFieldUpdateOperationsInput | Date | string
    categoryId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    FinancialTransactions?: FinancialTransactionUncheckedUpdateManyWithoutParcelNestedInput
  }

  export type ParcelUncheckedUpdateManyWithoutAccountInput = {
    id?: IntFieldUpdateOperationsInput | number
    value?: FloatFieldUpdateOperationsInput | number
    dueDate?: DateTimeFieldUpdateOperationsInput | Date | string
    competence?: DateTimeFieldUpdateOperationsInput | Date | string
    categoryId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FinancialTransactionUpdateWithoutAccountInput = {
    description?: StringFieldUpdateOperationsInput | string
    value?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    typeTransaction?: TransactionTypeUpdateOneRequiredWithoutFinancialTransactionsNestedInput
    user?: UserUpdateOneRequiredWithoutTransactionsFinancialsNestedInput
    category?: AccountPlanUpdateOneRequiredWithoutFinancialTransactionsNestedInput
    parcel?: ParcelUpdateOneRequiredWithoutFinancialTransactionsNestedInput
    transactionsForm?: TransactionsFormsUpdateOneRequiredWithoutFinancialTransactionsNestedInput
  }

  export type FinancialTransactionUncheckedUpdateWithoutAccountInput = {
    id?: IntFieldUpdateOperationsInput | number
    description?: StringFieldUpdateOperationsInput | string
    value?: FloatFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    transactionsFormsId?: IntFieldUpdateOperationsInput | number
    categoryId?: IntFieldUpdateOperationsInput | number
    parcelId?: IntFieldUpdateOperationsInput | number
    typeId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FinancialTransactionUncheckedUpdateManyWithoutAccountInput = {
    id?: IntFieldUpdateOperationsInput | number
    description?: StringFieldUpdateOperationsInput | string
    value?: FloatFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    transactionsFormsId?: IntFieldUpdateOperationsInput | number
    categoryId?: IntFieldUpdateOperationsInput | number
    parcelId?: IntFieldUpdateOperationsInput | number
    typeId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FinancialTransactionCreateManyParcelInput = {
    id?: number
    description: string
    value: number
    userId: number
    transactionsFormsId: number
    categoryId: number
    accountId: number
    typeId: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type FinancialTransactionUpdateWithoutParcelInput = {
    description?: StringFieldUpdateOperationsInput | string
    value?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    typeTransaction?: TransactionTypeUpdateOneRequiredWithoutFinancialTransactionsNestedInput
    user?: UserUpdateOneRequiredWithoutTransactionsFinancialsNestedInput
    category?: AccountPlanUpdateOneRequiredWithoutFinancialTransactionsNestedInput
    account?: AccountUpdateOneRequiredWithoutFinancialTransactionsNestedInput
    transactionsForm?: TransactionsFormsUpdateOneRequiredWithoutFinancialTransactionsNestedInput
  }

  export type FinancialTransactionUncheckedUpdateWithoutParcelInput = {
    id?: IntFieldUpdateOperationsInput | number
    description?: StringFieldUpdateOperationsInput | string
    value?: FloatFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    transactionsFormsId?: IntFieldUpdateOperationsInput | number
    categoryId?: IntFieldUpdateOperationsInput | number
    accountId?: IntFieldUpdateOperationsInput | number
    typeId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FinancialTransactionUncheckedUpdateManyWithoutParcelInput = {
    id?: IntFieldUpdateOperationsInput | number
    description?: StringFieldUpdateOperationsInput | string
    value?: FloatFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    transactionsFormsId?: IntFieldUpdateOperationsInput | number
    categoryId?: IntFieldUpdateOperationsInput | number
    accountId?: IntFieldUpdateOperationsInput | number
    typeId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FinancialTransactionCreateManyTransactionsFormInput = {
    id?: number
    description: string
    value: number
    userId: number
    categoryId: number
    parcelId: number
    accountId: number
    typeId: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type FinancialTransactionUpdateWithoutTransactionsFormInput = {
    description?: StringFieldUpdateOperationsInput | string
    value?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    typeTransaction?: TransactionTypeUpdateOneRequiredWithoutFinancialTransactionsNestedInput
    user?: UserUpdateOneRequiredWithoutTransactionsFinancialsNestedInput
    category?: AccountPlanUpdateOneRequiredWithoutFinancialTransactionsNestedInput
    account?: AccountUpdateOneRequiredWithoutFinancialTransactionsNestedInput
    parcel?: ParcelUpdateOneRequiredWithoutFinancialTransactionsNestedInput
  }

  export type FinancialTransactionUncheckedUpdateWithoutTransactionsFormInput = {
    id?: IntFieldUpdateOperationsInput | number
    description?: StringFieldUpdateOperationsInput | string
    value?: FloatFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    categoryId?: IntFieldUpdateOperationsInput | number
    parcelId?: IntFieldUpdateOperationsInput | number
    accountId?: IntFieldUpdateOperationsInput | number
    typeId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FinancialTransactionUncheckedUpdateManyWithoutTransactionsFormInput = {
    id?: IntFieldUpdateOperationsInput | number
    description?: StringFieldUpdateOperationsInput | string
    value?: FloatFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    categoryId?: IntFieldUpdateOperationsInput | number
    parcelId?: IntFieldUpdateOperationsInput | number
    accountId?: IntFieldUpdateOperationsInput | number
    typeId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FinancialTransactionCreateManyTypeTransactionInput = {
    id?: number
    description: string
    value: number
    userId: number
    transactionsFormsId: number
    categoryId: number
    parcelId: number
    accountId: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type FinancialTransactionUpdateWithoutTypeTransactionInput = {
    description?: StringFieldUpdateOperationsInput | string
    value?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutTransactionsFinancialsNestedInput
    category?: AccountPlanUpdateOneRequiredWithoutFinancialTransactionsNestedInput
    account?: AccountUpdateOneRequiredWithoutFinancialTransactionsNestedInput
    parcel?: ParcelUpdateOneRequiredWithoutFinancialTransactionsNestedInput
    transactionsForm?: TransactionsFormsUpdateOneRequiredWithoutFinancialTransactionsNestedInput
  }

  export type FinancialTransactionUncheckedUpdateWithoutTypeTransactionInput = {
    id?: IntFieldUpdateOperationsInput | number
    description?: StringFieldUpdateOperationsInput | string
    value?: FloatFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    transactionsFormsId?: IntFieldUpdateOperationsInput | number
    categoryId?: IntFieldUpdateOperationsInput | number
    parcelId?: IntFieldUpdateOperationsInput | number
    accountId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FinancialTransactionUncheckedUpdateManyWithoutTypeTransactionInput = {
    id?: IntFieldUpdateOperationsInput | number
    description?: StringFieldUpdateOperationsInput | string
    value?: FloatFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    transactionsFormsId?: IntFieldUpdateOperationsInput | number
    categoryId?: IntFieldUpdateOperationsInput | number
    parcelId?: IntFieldUpdateOperationsInput | number
    accountId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RecurrenceCreateManyCategoryInput = {
    id?: number
    name: string
    reptition: number
    range: number
    value: number
    type: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type AccountCreateManyCategoryInput = {
    id?: number
    description: string
    balance: number
    userId: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ParcelCreateManyCategoryInput = {
    id?: number
    value: number
    dueDate: Date | string
    competence: Date | string
    accountId: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type FinancialTransactionCreateManyCategoryInput = {
    id?: number
    description: string
    value: number
    userId: number
    transactionsFormsId: number
    parcelId: number
    accountId: number
    typeId: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type RecurrenceUpdateWithoutCategoryInput = {
    name?: StringFieldUpdateOperationsInput | string
    reptition?: IntFieldUpdateOperationsInput | number
    range?: IntFieldUpdateOperationsInput | number
    value?: FloatFieldUpdateOperationsInput | number
    type?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RecurrenceUncheckedUpdateWithoutCategoryInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    reptition?: IntFieldUpdateOperationsInput | number
    range?: IntFieldUpdateOperationsInput | number
    value?: FloatFieldUpdateOperationsInput | number
    type?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RecurrenceUncheckedUpdateManyWithoutCategoryInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    reptition?: IntFieldUpdateOperationsInput | number
    range?: IntFieldUpdateOperationsInput | number
    value?: FloatFieldUpdateOperationsInput | number
    type?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AccountUpdateWithoutCategoryInput = {
    description?: StringFieldUpdateOperationsInput | string
    balance?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutAccountsNestedInput
    parcels?: ParcelUpdateManyWithoutAccountNestedInput
    financialTransactions?: FinancialTransactionUpdateManyWithoutAccountNestedInput
  }

  export type AccountUncheckedUpdateWithoutCategoryInput = {
    id?: IntFieldUpdateOperationsInput | number
    description?: StringFieldUpdateOperationsInput | string
    balance?: FloatFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    parcels?: ParcelUncheckedUpdateManyWithoutAccountNestedInput
    financialTransactions?: FinancialTransactionUncheckedUpdateManyWithoutAccountNestedInput
  }

  export type AccountUncheckedUpdateManyWithoutCategoryInput = {
    id?: IntFieldUpdateOperationsInput | number
    description?: StringFieldUpdateOperationsInput | string
    balance?: FloatFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ParcelUpdateWithoutCategoryInput = {
    value?: FloatFieldUpdateOperationsInput | number
    dueDate?: DateTimeFieldUpdateOperationsInput | Date | string
    competence?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    account?: AccountUpdateOneRequiredWithoutParcelsNestedInput
    FinancialTransactions?: FinancialTransactionUpdateManyWithoutParcelNestedInput
  }

  export type ParcelUncheckedUpdateWithoutCategoryInput = {
    id?: IntFieldUpdateOperationsInput | number
    value?: FloatFieldUpdateOperationsInput | number
    dueDate?: DateTimeFieldUpdateOperationsInput | Date | string
    competence?: DateTimeFieldUpdateOperationsInput | Date | string
    accountId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    FinancialTransactions?: FinancialTransactionUncheckedUpdateManyWithoutParcelNestedInput
  }

  export type ParcelUncheckedUpdateManyWithoutCategoryInput = {
    id?: IntFieldUpdateOperationsInput | number
    value?: FloatFieldUpdateOperationsInput | number
    dueDate?: DateTimeFieldUpdateOperationsInput | Date | string
    competence?: DateTimeFieldUpdateOperationsInput | Date | string
    accountId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FinancialTransactionUpdateWithoutCategoryInput = {
    description?: StringFieldUpdateOperationsInput | string
    value?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    typeTransaction?: TransactionTypeUpdateOneRequiredWithoutFinancialTransactionsNestedInput
    user?: UserUpdateOneRequiredWithoutTransactionsFinancialsNestedInput
    account?: AccountUpdateOneRequiredWithoutFinancialTransactionsNestedInput
    parcel?: ParcelUpdateOneRequiredWithoutFinancialTransactionsNestedInput
    transactionsForm?: TransactionsFormsUpdateOneRequiredWithoutFinancialTransactionsNestedInput
  }

  export type FinancialTransactionUncheckedUpdateWithoutCategoryInput = {
    id?: IntFieldUpdateOperationsInput | number
    description?: StringFieldUpdateOperationsInput | string
    value?: FloatFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    transactionsFormsId?: IntFieldUpdateOperationsInput | number
    parcelId?: IntFieldUpdateOperationsInput | number
    accountId?: IntFieldUpdateOperationsInput | number
    typeId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FinancialTransactionUncheckedUpdateManyWithoutCategoryInput = {
    id?: IntFieldUpdateOperationsInput | number
    description?: StringFieldUpdateOperationsInput | string
    value?: FloatFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    transactionsFormsId?: IntFieldUpdateOperationsInput | number
    parcelId?: IntFieldUpdateOperationsInput | number
    accountId?: IntFieldUpdateOperationsInput | number
    typeId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}